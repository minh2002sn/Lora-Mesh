
Lora Mesh_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ee8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08005088  08005088  00015088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d4  080052d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052dc  080052dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052dc  080052dc  000152dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a38  20000070  08005354  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000aa8  08005354  00020aa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae9a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e7  00000000  00000000  0002af3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002d128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002da30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170d0  00000000  00000000  0002e240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5a5  00000000  00000000  00045310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087983  00000000  00000000  000518b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9238  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e00  00000000  00000000  000d9288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005070 	.word	0x08005070

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005070 	.word	0x08005070

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <BUTTON_Press_Short_Callback>:
 */
//uint8_t tx_frame_data[] = {0x00, 0x11, 0x22, 0x33};
uint8_t tx_frame_data[255];
uint8_t tx_frame_len = 0;
void BUTTON_Press_Short_Callback(BUTTON_HandleTypedef *ButtonX)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af02      	add	r7, sp, #8
 800059a:	6078      	str	r0, [r7, #4]
	if(ButtonX == &btn)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <BUTTON_Press_Short_Callback+0x30>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d10a      	bne.n	80005ba <BUTTON_Press_Short_Callback+0x26>
	{
		FRAME_SYNC_Transmit(1, 1, 5, tx_frame_data, tx_frame_len, 1);
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <BUTTON_Press_Short_Callback+0x34>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2201      	movs	r2, #1
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <BUTTON_Press_Short_Callback+0x38>)
 80005b0:	2205      	movs	r2, #5
 80005b2:	2101      	movs	r1, #1
 80005b4:	2001      	movs	r0, #1
 80005b6:	f002 ff05 	bl	80033c4 <FRAME_SYNC_Transmit>
	}
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000118 	.word	0x20000118
 80005c8:	20000233 	.word	0x20000233
 80005cc:	20000134 	.word	0x20000134

080005d0 <FRAME_SYNC_RxCpltCallback>:

void FRAME_SYNC_RxCpltCallback(uint8_t *p_rx_data, uint8_t data_size)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b09f      	sub	sp, #124	; 0x7c
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
	char tx_str[100] = "\nData: ";
 80005dc:	4a27      	ldr	r2, [pc, #156]	; (800067c <FRAME_SYNC_RxCpltCallback+0xac>)
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	225c      	movs	r2, #92	; 0x5c
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 faea 	bl	8003bcc <memset>
	for(int i = 0; i < data_size; i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	677b      	str	r3, [r7, #116]	; 0x74
 80005fc:	e015      	b.n	800062a <FRAME_SYNC_RxCpltCallback+0x5a>
	{
		char temp_str[4];
		sprintf(temp_str, "%02X ", p_rx_data[i]);
 80005fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	491c      	ldr	r1, [pc, #112]	; (8000680 <FRAME_SYNC_RxCpltCallback+0xb0>)
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fae4 	bl	8003bdc <siprintf>
		strcat(tx_str, temp_str);
 8000614:	f107 020c 	add.w	r2, r7, #12
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	4611      	mov	r1, r2
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fafc 	bl	8003c1c <strcat>
	for(int i = 0; i < data_size; i++)
 8000624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000626:	3301      	adds	r3, #1
 8000628:	677b      	str	r3, [r7, #116]	; 0x74
 800062a:	78fb      	ldrb	r3, [r7, #3]
 800062c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800062e:	429a      	cmp	r2, r3
 8000630:	dbe5      	blt.n	80005fe <FRAME_SYNC_RxCpltCallback+0x2e>
	}
	strcat(tx_str, "\nCRC Correct\n");
 8000632:	f107 0310 	add.w	r3, r7, #16
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff fdd2 	bl	80001e0 <strlen>
 800063c:	4603      	mov	r3, r0
 800063e:	461a      	mov	r2, r3
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4413      	add	r3, r2
 8000646:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <FRAME_SYNC_RxCpltCallback+0xb4>)
 8000648:	461c      	mov	r4, r3
 800064a:	4613      	mov	r3, r2
 800064c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800064e:	6020      	str	r0, [r4, #0]
 8000650:	6061      	str	r1, [r4, #4]
 8000652:	60a2      	str	r2, [r4, #8]
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	81a3      	strh	r3, [r4, #12]
	HAL_UART_Transmit(&huart6, (uint8_t *)tx_str, strlen(tx_str), 1000);
 8000658:	f107 0310 	add.w	r3, r7, #16
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff fdbf 	bl	80001e0 <strlen>
 8000662:	4603      	mov	r3, r0
 8000664:	b29a      	uxth	r2, r3
 8000666:	f107 0110 	add.w	r1, r7, #16
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <FRAME_SYNC_RxCpltCallback+0xb8>)
 8000670:	f001 fc2b 	bl	8001eca <HAL_UART_Transmit>

}
 8000674:	bf00      	nop
 8000676:	377c      	adds	r7, #124	; 0x7c
 8000678:	46bd      	mov	sp, r7
 800067a:	bd90      	pop	{r4, r7, pc}
 800067c:	080050a0 	.word	0x080050a0
 8000680:	08005088 	.word	0x08005088
 8000684:	08005090 	.word	0x08005090
 8000688:	200000d0 	.word	0x200000d0

0800068c <FRAME_SYNC_RxFailCallback>:

void FRAME_SYNC_RxFailCallback(uint8_t *p_rx_data, uint8_t data_size)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b09c      	sub	sp, #112	; 0x70
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	70fb      	strb	r3, [r7, #3]
	char tx_str[100] = "\nCRC Fail\n";
 8000698:	4a10      	ldr	r2, [pc, #64]	; (80006dc <FRAME_SYNC_RxFailCallback+0x50>)
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	ca07      	ldmia	r2, {r0, r1, r2}
 80006a0:	c303      	stmia	r3!, {r0, r1}
 80006a2:	801a      	strh	r2, [r3, #0]
 80006a4:	3302      	adds	r3, #2
 80006a6:	0c12      	lsrs	r2, r2, #16
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	f107 0317 	add.w	r3, r7, #23
 80006ae:	2259      	movs	r2, #89	; 0x59
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f003 fa8a 	bl	8003bcc <memset>
	HAL_UART_Transmit(&huart6, (uint8_t *)tx_str, strlen(tx_str), 1000);
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fd8f 	bl	80001e0 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	f107 010c 	add.w	r1, r7, #12
 80006ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ce:	4804      	ldr	r0, [pc, #16]	; (80006e0 <FRAME_SYNC_RxFailCallback+0x54>)
 80006d0:	f001 fbfb 	bl	8001eca <HAL_UART_Transmit>
}
 80006d4:	bf00      	nop
 80006d6:	3770      	adds	r7, #112	; 0x70
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	08005104 	.word	0x08005104
 80006e0:	200000d0 	.word	0x200000d0

080006e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart6.Instance)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <HAL_UART_RxCpltCallback+0x54>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d10a      	bne.n	800070e <HAL_UART_RxCpltCallback+0x2a>
	{
		COMMAND_LINE_Receive(uart_rx_buf);
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <HAL_UART_RxCpltCallback+0x58>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f002 fd41 	bl	8003184 <COMMAND_LINE_Receive>
		HAL_UART_Receive_IT(&huart6, &uart_rx_buf, 1);
 8000702:	2201      	movs	r2, #1
 8000704:	490d      	ldr	r1, [pc, #52]	; (800073c <HAL_UART_RxCpltCallback+0x58>)
 8000706:	480c      	ldr	r0, [pc, #48]	; (8000738 <HAL_UART_RxCpltCallback+0x54>)
 8000708:	f001 fc71 	bl	8001fee <HAL_UART_Receive_IT>
	else if(huart->Instance == huart2.Instance)
	{
		UART_Receive(uart_rx_buf);
		HAL_UART_Receive_IT(&huart2, &uart_rx_buf, 1);
	}
}
 800070c:	e00f      	b.n	800072e <HAL_UART_RxCpltCallback+0x4a>
	else if(huart->Instance == huart2.Instance)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <HAL_UART_RxCpltCallback+0x5c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	429a      	cmp	r2, r3
 8000718:	d109      	bne.n	800072e <HAL_UART_RxCpltCallback+0x4a>
		UART_Receive(uart_rx_buf);
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <HAL_UART_RxCpltCallback+0x58>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f003 f9de 	bl	8003ae0 <UART_Receive>
		HAL_UART_Receive_IT(&huart2, &uart_rx_buf, 1);
 8000724:	2201      	movs	r2, #1
 8000726:	4905      	ldr	r1, [pc, #20]	; (800073c <HAL_UART_RxCpltCallback+0x58>)
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <HAL_UART_RxCpltCallback+0x5c>)
 800072a:	f001 fc60 	bl	8001fee <HAL_UART_Receive_IT>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000d0 	.word	0x200000d0
 800073c:	20000114 	.word	0x20000114
 8000740:	2000008c 	.word	0x2000008c

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 fb4e 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f834 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f000 f8ee 	bl	8000930 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000754:	f000 f898 	bl	8000888 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000758:	f000 f8c0 	bl	80008dc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  BUTTON_Init(&btn, GPIOA, GPIO_PIN_0, 0);
 800075c:	2300      	movs	r3, #0
 800075e:	2201      	movs	r2, #1
 8000760:	490f      	ldr	r1, [pc, #60]	; (80007a0 <main+0x5c>)
 8000762:	4810      	ldr	r0, [pc, #64]	; (80007a4 <main+0x60>)
 8000764:	f003 f8e0 	bl	8003928 <BUTTON_Init>
  BUTTON_Set_Callback_Function(NULL, NULL, BUTTON_Press_Short_Callback, NULL);
 8000768:	2300      	movs	r3, #0
 800076a:	4a0f      	ldr	r2, [pc, #60]	; (80007a8 <main+0x64>)
 800076c:	2100      	movs	r1, #0
 800076e:	2000      	movs	r0, #0
 8000770:	f003 f904 	bl	800397c <BUTTON_Set_Callback_Function>

  HAL_UART_Receive_IT(&huart6, &uart_rx_buf, 1);
 8000774:	2201      	movs	r2, #1
 8000776:	490d      	ldr	r1, [pc, #52]	; (80007ac <main+0x68>)
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <main+0x6c>)
 800077a:	f001 fc38 	bl	8001fee <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &uart_rx_buf, 1);
 800077e:	2201      	movs	r2, #1
 8000780:	490a      	ldr	r1, [pc, #40]	; (80007ac <main+0x68>)
 8000782:	480c      	ldr	r0, [pc, #48]	; (80007b4 <main+0x70>)
 8000784:	f001 fc33 	bl	8001fee <HAL_UART_Receive_IT>
  UART_Init();
 8000788:	f003 f99c 	bl	8003ac4 <UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  BUTTON_Handle(&btn);
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <main+0x60>)
 800078e:	f003 f833 	bl	80037f8 <BUTTON_Handle>

	  UART_Handle();
 8000792:	f003 f9b5 	bl	8003b00 <UART_Handle>

	  COMMAND_LINE_Handle();
 8000796:	f002 fc81 	bl	800309c <COMMAND_LINE_Handle>

	  FRAME_SYNC_Handle();
 800079a:	f002 ffc3 	bl	8003724 <FRAME_SYNC_Handle>
	  BUTTON_Handle(&btn);
 800079e:	e7f5      	b.n	800078c <main+0x48>
 80007a0:	40020000 	.word	0x40020000
 80007a4:	20000118 	.word	0x20000118
 80007a8:	08000595 	.word	0x08000595
 80007ac:	20000114 	.word	0x20000114
 80007b0:	200000d0 	.word	0x200000d0
 80007b4:	2000008c 	.word	0x2000008c

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	; 0x50
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	2230      	movs	r2, #48	; 0x30
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f003 fa00 	bl	8003bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <SystemClock_Config+0xc8>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a26      	ldr	r2, [pc, #152]	; (8000880 <SystemClock_Config+0xc8>)
 80007e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
 80007ec:	4b24      	ldr	r3, [pc, #144]	; (8000880 <SystemClock_Config+0xc8>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	4b21      	ldr	r3, [pc, #132]	; (8000884 <SystemClock_Config+0xcc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a20      	ldr	r2, [pc, #128]	; (8000884 <SystemClock_Config+0xcc>)
 8000802:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <SystemClock_Config+0xcc>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000814:	2302      	movs	r3, #2
 8000816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000818:	2301      	movs	r3, #1
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081c:	2310      	movs	r3, #16
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000820:	2302      	movs	r3, #2
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000824:	2300      	movs	r3, #0
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000828:	2308      	movs	r3, #8
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800082c:	2364      	movs	r3, #100	; 0x64
 800082e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000830:	2302      	movs	r3, #2
 8000832:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000834:	2304      	movs	r3, #4
 8000836:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	f107 0320 	add.w	r3, r7, #32
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fe9f 	bl	8001580 <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000848:	f000 f8d2 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084c:	230f      	movs	r3, #15
 800084e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000850:	2302      	movs	r3, #2
 8000852:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2103      	movs	r1, #3
 8000868:	4618      	mov	r0, r3
 800086a:	f001 f901 	bl	8001a70 <HAL_RCC_ClockConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000874:	f000 f8bc 	bl	80009f0 <Error_Handler>
  }
}
 8000878:	bf00      	nop
 800087a:	3750      	adds	r7, #80	; 0x50
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_USART2_UART_Init+0x4c>)
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <MX_USART2_UART_Init+0x50>)
 8000890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_USART2_UART_Init+0x4c>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_USART2_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_USART2_UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_USART2_UART_Init+0x4c>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_USART2_UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_USART2_UART_Init+0x4c>)
 80008c0:	f001 fab6 	bl	8001e30 <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ca:	f000 f891 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2000008c 	.word	0x2000008c
 80008d8:	40004400 	.word	0x40004400

080008dc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_USART6_UART_Init+0x4c>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <MX_USART6_UART_Init+0x50>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <MX_USART6_UART_Init+0x4c>)
 80008e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_USART6_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_USART6_UART_Init+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_USART6_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_USART6_UART_Init+0x4c>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_USART6_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_USART6_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_USART6_UART_Init+0x4c>)
 8000914:	f001 fa8c 	bl	8001e30 <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800091e:	f000 f867 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200000d0 	.word	0x200000d0
 800092c:	40011400 	.word	0x40011400

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <MX_GPIO_Init+0xb4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a25      	ldr	r2, [pc, #148]	; (80009e4 <MX_GPIO_Init+0xb4>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <MX_GPIO_Init+0xb4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_GPIO_Init+0xb4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a1e      	ldr	r2, [pc, #120]	; (80009e4 <MX_GPIO_Init+0xb4>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_GPIO_Init+0xb4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_GPIO_Init+0xb4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <MX_GPIO_Init+0xb4>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_GPIO_Init+0xb4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009a0:	4811      	ldr	r0, [pc, #68]	; (80009e8 <MX_GPIO_Init+0xb8>)
 80009a2:	f000 fdd3 	bl	800154c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009a6:	2301      	movs	r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	4619      	mov	r1, r3
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <MX_GPIO_Init+0xbc>)
 80009ba:	f000 fc2b 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009be:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_GPIO_Init+0xb8>)
 80009d8:	f000 fc1c 	bl	8001214 <HAL_GPIO_Init>

}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020c00 	.word	0x40020c00
 80009ec:	40020000 	.word	0x40020000

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>
	...

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a3a      	ldr	r2, [pc, #232]	; (8000b54 <HAL_UART_MspInit+0x108>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d134      	bne.n	8000ad8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
 8000a72:	4b39      	ldr	r3, [pc, #228]	; (8000b58 <HAL_UART_MspInit+0x10c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a38      	ldr	r2, [pc, #224]	; (8000b58 <HAL_UART_MspInit+0x10c>)
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b36      	ldr	r3, [pc, #216]	; (8000b58 <HAL_UART_MspInit+0x10c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a86:	61bb      	str	r3, [r7, #24]
 8000a88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	4b32      	ldr	r3, [pc, #200]	; (8000b58 <HAL_UART_MspInit+0x10c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a31      	ldr	r2, [pc, #196]	; (8000b58 <HAL_UART_MspInit+0x10c>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <HAL_UART_MspInit+0x10c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4826      	ldr	r0, [pc, #152]	; (8000b5c <HAL_UART_MspInit+0x110>)
 8000ac2:	f000 fba7 	bl	8001214 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2026      	movs	r0, #38	; 0x26
 8000acc:	f000 fad9 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ad0:	2026      	movs	r0, #38	; 0x26
 8000ad2:	f000 faf2 	bl	80010ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000ad6:	e038      	b.n	8000b4a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a20      	ldr	r2, [pc, #128]	; (8000b60 <HAL_UART_MspInit+0x114>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d133      	bne.n	8000b4a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <HAL_UART_MspInit+0x10c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <HAL_UART_MspInit+0x10c>)
 8000aec:	f043 0320 	orr.w	r3, r3, #32
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_UART_MspInit+0x10c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f003 0320 	and.w	r3, r3, #32
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_UART_MspInit+0x10c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <HAL_UART_MspInit+0x10c>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_UART_MspInit+0x10c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b1a:	23c0      	movs	r3, #192	; 0xc0
 8000b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000b2a:	2308      	movs	r3, #8
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	480b      	ldr	r0, [pc, #44]	; (8000b64 <HAL_UART_MspInit+0x118>)
 8000b36:	f000 fb6d 	bl	8001214 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2047      	movs	r0, #71	; 0x47
 8000b40:	f000 fa9f 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000b44:	2047      	movs	r0, #71	; 0x47
 8000b46:	f000 fab8 	bl	80010ba <HAL_NVIC_EnableIRQ>
}
 8000b4a:	bf00      	nop
 8000b4c:	3730      	adds	r7, #48	; 0x30
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40004400 	.word	0x40004400
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40011400 	.word	0x40011400
 8000b64:	40020800 	.word	0x40020800

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 f96a 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <USART2_IRQHandler+0x10>)
 8000bc2:	f001 fa45 	bl	8002050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000008c 	.word	0x2000008c

08000bd0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <USART6_IRQHandler+0x10>)
 8000bd6:	f001 fa3b 	bl	8002050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200000d0 	.word	0x200000d0

08000be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
	return 1;
 8000be8:	2301      	movs	r3, #1
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <_kill>:

int _kill(int pid, int sig)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000bfe:	f002 ffad 	bl	8003b5c <__errno>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2216      	movs	r2, #22
 8000c06:	601a      	str	r2, [r3, #0]
	return -1;
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <_exit>:

void _exit (int status)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ffe7 	bl	8000bf4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c26:	e7fe      	b.n	8000c26 <_exit+0x12>

08000c28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	e00a      	b.n	8000c50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c3a:	f3af 8000 	nop.w
 8000c3e:	4601      	mov	r1, r0
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	60ba      	str	r2, [r7, #8]
 8000c46:	b2ca      	uxtb	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	dbf0      	blt.n	8000c3a <_read+0x12>
	}

return len;
 8000c58:	687b      	ldr	r3, [r7, #4]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	e009      	b.n	8000c88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	60ba      	str	r2, [r7, #8]
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3301      	adds	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	dbf1      	blt.n	8000c74 <_write+0x12>
	}
	return len;
 8000c90:	687b      	ldr	r3, [r7, #4]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <_close>:

int _close(int file)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_isatty>:

int _isatty(int file)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
	return 1;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
	return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <_sbrk+0x5c>)
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <_sbrk+0x60>)
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <_sbrk+0x64>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <_sbrk+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d207      	bcs.n	8000d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d34:	f002 ff12 	bl	8003b5c <__errno>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	e009      	b.n	8000d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <_sbrk+0x64>)
 8000d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20020000 	.word	0x20020000
 8000d64:	00000400 	.word	0x00000400
 8000d68:	20000234 	.word	0x20000234
 8000d6c:	20000aa8 	.word	0x20000aa8

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9a:	490e      	ldr	r1, [pc, #56]	; (8000dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db0:	4c0b      	ldr	r4, [pc, #44]	; (8000de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dbe:	f7ff ffd7 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f002 fed1 	bl	8003b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fcbd 	bl	8000744 <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dd8:	080052e4 	.word	0x080052e4
  ldr r2, =_sbss
 8000ddc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000de0:	20000aa8 	.word	0x20000aa8

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f92b 	bl	800106c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	200f      	movs	r0, #15
 8000e18:	f000 f808 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fdee 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x54>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x58>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f943 	bl	80010d6 <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f90b 	bl	8001082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_InitTick+0x5c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000238 	.word	0x20000238

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000238 	.word	0x20000238

08000ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efe:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	60d3      	str	r3, [r2, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <__NVIC_GetPriorityGrouping+0x18>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	f003 0307 	and.w	r3, r3, #7
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	db0b      	blt.n	8000f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 021f 	and.w	r2, r3, #31
 8000f48:	4907      	ldr	r1, [pc, #28]	; (8000f68 <__NVIC_EnableIRQ+0x38>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	2001      	movs	r0, #1
 8000f52:	fa00 f202 	lsl.w	r2, r0, r2
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000e100 	.word	0xe000e100

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	; (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
         );
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001038:	d301      	bcc.n	800103e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103a:	2301      	movs	r3, #1
 800103c:	e00f      	b.n	800105e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <SysTick_Config+0x40>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001046:	210f      	movs	r1, #15
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f7ff ff8e 	bl	8000f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <SysTick_Config+0x40>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <SysTick_Config+0x40>)
 8001058:	2207      	movs	r2, #7
 800105a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	e000e010 	.word	0xe000e010

0800106c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff29 	bl	8000ecc <__NVIC_SetPriorityGrouping>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001094:	f7ff ff3e 	bl	8000f14 <__NVIC_GetPriorityGrouping>
 8001098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff ff8e 	bl	8000fc0 <NVIC_EncodePriority>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff5d 	bl	8000f6c <__NVIC_SetPriority>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff31 	bl	8000f30 <__NVIC_EnableIRQ>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffa2 	bl	8001028 <SysTick_Config>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b084      	sub	sp, #16
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff feda 	bl	8000eb4 <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d008      	beq.n	8001120 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2280      	movs	r2, #128	; 0x80
 8001112:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e052      	b.n	80011c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0216 	bic.w	r2, r2, #22
 800112e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	695a      	ldr	r2, [r3, #20]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800113e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	2b00      	cmp	r3, #0
 8001146:	d103      	bne.n	8001150 <HAL_DMA_Abort+0x62>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800114c:	2b00      	cmp	r3, #0
 800114e:	d007      	beq.n	8001160 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0208 	bic.w	r2, r2, #8
 800115e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0201 	bic.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001170:	e013      	b.n	800119a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001172:	f7ff fe9f 	bl	8000eb4 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b05      	cmp	r3, #5
 800117e:	d90c      	bls.n	800119a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2220      	movs	r2, #32
 8001184:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2203      	movs	r2, #3
 800118a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e015      	b.n	80011c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1e4      	bne.n	8001172 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ac:	223f      	movs	r2, #63	; 0x3f
 80011ae:	409a      	lsls	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d004      	beq.n	80011ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e00c      	b.n	8001206 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2205      	movs	r2, #5
 80011f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0201 	bic.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
 800122e:	e159      	b.n	80014e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001230:	2201      	movs	r2, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	429a      	cmp	r2, r3
 800124a:	f040 8148 	bne.w	80014de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	2b01      	cmp	r3, #1
 8001258:	d005      	beq.n	8001266 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001262:	2b02      	cmp	r3, #2
 8001264:	d130      	bne.n	80012c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	2203      	movs	r2, #3
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	68da      	ldr	r2, [r3, #12]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800129c:	2201      	movs	r2, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	f003 0201 	and.w	r2, r3, #1
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d017      	beq.n	8001304 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d123      	bne.n	8001358 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	08da      	lsrs	r2, r3, #3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3208      	adds	r2, #8
 8001318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	220f      	movs	r2, #15
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	691a      	ldr	r2, [r3, #16]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	08da      	lsrs	r2, r3, #3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3208      	adds	r2, #8
 8001352:	69b9      	ldr	r1, [r7, #24]
 8001354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0203 	and.w	r2, r3, #3
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 80a2 	beq.w	80014de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b57      	ldr	r3, [pc, #348]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a56      	ldr	r2, [pc, #344]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 80013a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b54      	ldr	r3, [pc, #336]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013b6:	4a52      	ldr	r2, [pc, #328]	; (8001500 <HAL_GPIO_Init+0x2ec>)
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	3302      	adds	r3, #2
 80013be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	220f      	movs	r2, #15
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a49      	ldr	r2, [pc, #292]	; (8001504 <HAL_GPIO_Init+0x2f0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d019      	beq.n	8001416 <HAL_GPIO_Init+0x202>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a48      	ldr	r2, [pc, #288]	; (8001508 <HAL_GPIO_Init+0x2f4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x1fe>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a47      	ldr	r2, [pc, #284]	; (800150c <HAL_GPIO_Init+0x2f8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x1fa>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a46      	ldr	r2, [pc, #280]	; (8001510 <HAL_GPIO_Init+0x2fc>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x1f6>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a45      	ldr	r2, [pc, #276]	; (8001514 <HAL_GPIO_Init+0x300>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x1f2>
 8001402:	2304      	movs	r3, #4
 8001404:	e008      	b.n	8001418 <HAL_GPIO_Init+0x204>
 8001406:	2307      	movs	r3, #7
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x204>
 800140a:	2303      	movs	r3, #3
 800140c:	e004      	b.n	8001418 <HAL_GPIO_Init+0x204>
 800140e:	2302      	movs	r3, #2
 8001410:	e002      	b.n	8001418 <HAL_GPIO_Init+0x204>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_GPIO_Init+0x204>
 8001416:	2300      	movs	r3, #0
 8001418:	69fa      	ldr	r2, [r7, #28]
 800141a:	f002 0203 	and.w	r2, r2, #3
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	4093      	lsls	r3, r2
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001428:	4935      	ldr	r1, [pc, #212]	; (8001500 <HAL_GPIO_Init+0x2ec>)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3302      	adds	r3, #2
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001436:	4b38      	ldr	r3, [pc, #224]	; (8001518 <HAL_GPIO_Init+0x304>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800145a:	4a2f      	ldr	r2, [pc, #188]	; (8001518 <HAL_GPIO_Init+0x304>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001460:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <HAL_GPIO_Init+0x304>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001484:	4a24      	ldr	r2, [pc, #144]	; (8001518 <HAL_GPIO_Init+0x304>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <HAL_GPIO_Init+0x304>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ae:	4a1a      	ldr	r2, [pc, #104]	; (8001518 <HAL_GPIO_Init+0x304>)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b4:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_GPIO_Init+0x304>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d8:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <HAL_GPIO_Init+0x304>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3301      	adds	r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	2b0f      	cmp	r3, #15
 80014e8:	f67f aea2 	bls.w	8001230 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40013800 	.word	0x40013800
 8001504:	40020000 	.word	0x40020000
 8001508:	40020400 	.word	0x40020400
 800150c:	40020800 	.word	0x40020800
 8001510:	40020c00 	.word	0x40020c00
 8001514:	40021000 	.word	0x40021000
 8001518:	40013c00 	.word	0x40013c00

0800151c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	887b      	ldrh	r3, [r7, #2]
 800152e:	4013      	ands	r3, r2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001534:	2301      	movs	r3, #1
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	e001      	b.n	800153e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
 8001558:	4613      	mov	r3, r2
 800155a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800155c:	787b      	ldrb	r3, [r7, #1]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001562:	887a      	ldrh	r2, [r7, #2]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001568:	e003      	b.n	8001572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	041a      	lsls	r2, r3, #16
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	619a      	str	r2, [r3, #24]
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e267      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d075      	beq.n	800168a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800159e:	4b88      	ldr	r3, [pc, #544]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d00c      	beq.n	80015c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015aa:	4b85      	ldr	r3, [pc, #532]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d112      	bne.n	80015dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015b6:	4b82      	ldr	r3, [pc, #520]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015c2:	d10b      	bne.n	80015dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c4:	4b7e      	ldr	r3, [pc, #504]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d05b      	beq.n	8001688 <HAL_RCC_OscConfig+0x108>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d157      	bne.n	8001688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e242      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e4:	d106      	bne.n	80015f4 <HAL_RCC_OscConfig+0x74>
 80015e6:	4b76      	ldr	r3, [pc, #472]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a75      	ldr	r2, [pc, #468]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e01d      	b.n	8001630 <HAL_RCC_OscConfig+0xb0>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015fc:	d10c      	bne.n	8001618 <HAL_RCC_OscConfig+0x98>
 80015fe:	4b70      	ldr	r3, [pc, #448]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a6f      	ldr	r2, [pc, #444]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 8001604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	4b6d      	ldr	r3, [pc, #436]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a6c      	ldr	r2, [pc, #432]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 8001610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e00b      	b.n	8001630 <HAL_RCC_OscConfig+0xb0>
 8001618:	4b69      	ldr	r3, [pc, #420]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a68      	ldr	r2, [pc, #416]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 800161e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b66      	ldr	r3, [pc, #408]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a65      	ldr	r2, [pc, #404]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 800162a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d013      	beq.n	8001660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff fc3c 	bl	8000eb4 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001640:	f7ff fc38 	bl	8000eb4 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b64      	cmp	r3, #100	; 0x64
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e207      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	4b5b      	ldr	r3, [pc, #364]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0xc0>
 800165e:	e014      	b.n	800168a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fc28 	bl	8000eb4 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff fc24 	bl	8000eb4 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	; 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e1f3      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167a:	4b51      	ldr	r3, [pc, #324]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0xe8>
 8001686:	e000      	b.n	800168a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d063      	beq.n	800175e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001696:	4b4a      	ldr	r3, [pc, #296]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00b      	beq.n	80016ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016a2:	4b47      	ldr	r3, [pc, #284]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d11c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ae:	4b44      	ldr	r3, [pc, #272]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d116      	bne.n	80016e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ba:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <HAL_RCC_OscConfig+0x152>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d001      	beq.n	80016d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e1c7      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4937      	ldr	r1, [pc, #220]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e6:	e03a      	b.n	800175e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d020      	beq.n	8001732 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f0:	4b34      	ldr	r3, [pc, #208]	; (80017c4 <HAL_RCC_OscConfig+0x244>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f6:	f7ff fbdd 	bl	8000eb4 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016fe:	f7ff fbd9 	bl	8000eb4 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e1a8      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171c:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4925      	ldr	r1, [pc, #148]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 800172c:	4313      	orrs	r3, r2
 800172e:	600b      	str	r3, [r1, #0]
 8001730:	e015      	b.n	800175e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001732:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <HAL_RCC_OscConfig+0x244>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001738:	f7ff fbbc 	bl	8000eb4 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001740:	f7ff fbb8 	bl	8000eb4 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e187      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001752:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d036      	beq.n	80017d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d016      	beq.n	80017a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_RCC_OscConfig+0x248>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001778:	f7ff fb9c 	bl	8000eb4 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001780:	f7ff fb98 	bl	8000eb4 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e167      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_RCC_OscConfig+0x240>)
 8001794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0x200>
 800179e:	e01b      	b.n	80017d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_RCC_OscConfig+0x248>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a6:	f7ff fb85 	bl	8000eb4 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ac:	e00e      	b.n	80017cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ae:	f7ff fb81 	bl	8000eb4 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d907      	bls.n	80017cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e150      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
 80017c0:	40023800 	.word	0x40023800
 80017c4:	42470000 	.word	0x42470000
 80017c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017cc:	4b88      	ldr	r3, [pc, #544]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 80017ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1ea      	bne.n	80017ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 8097 	beq.w	8001914 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ea:	4b81      	ldr	r3, [pc, #516]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10f      	bne.n	8001816 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b7d      	ldr	r3, [pc, #500]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a7c      	ldr	r2, [pc, #496]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b7a      	ldr	r3, [pc, #488]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001812:	2301      	movs	r3, #1
 8001814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001816:	4b77      	ldr	r3, [pc, #476]	; (80019f4 <HAL_RCC_OscConfig+0x474>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181e:	2b00      	cmp	r3, #0
 8001820:	d118      	bne.n	8001854 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001822:	4b74      	ldr	r3, [pc, #464]	; (80019f4 <HAL_RCC_OscConfig+0x474>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a73      	ldr	r2, [pc, #460]	; (80019f4 <HAL_RCC_OscConfig+0x474>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182e:	f7ff fb41 	bl	8000eb4 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001836:	f7ff fb3d 	bl	8000eb4 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e10c      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001848:	4b6a      	ldr	r3, [pc, #424]	; (80019f4 <HAL_RCC_OscConfig+0x474>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d106      	bne.n	800186a <HAL_RCC_OscConfig+0x2ea>
 800185c:	4b64      	ldr	r3, [pc, #400]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 800185e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001860:	4a63      	ldr	r2, [pc, #396]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6713      	str	r3, [r2, #112]	; 0x70
 8001868:	e01c      	b.n	80018a4 <HAL_RCC_OscConfig+0x324>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b05      	cmp	r3, #5
 8001870:	d10c      	bne.n	800188c <HAL_RCC_OscConfig+0x30c>
 8001872:	4b5f      	ldr	r3, [pc, #380]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001876:	4a5e      	ldr	r2, [pc, #376]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	6713      	str	r3, [r2, #112]	; 0x70
 800187e:	4b5c      	ldr	r3, [pc, #368]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001882:	4a5b      	ldr	r2, [pc, #364]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6713      	str	r3, [r2, #112]	; 0x70
 800188a:	e00b      	b.n	80018a4 <HAL_RCC_OscConfig+0x324>
 800188c:	4b58      	ldr	r3, [pc, #352]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 800188e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001890:	4a57      	ldr	r2, [pc, #348]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001892:	f023 0301 	bic.w	r3, r3, #1
 8001896:	6713      	str	r3, [r2, #112]	; 0x70
 8001898:	4b55      	ldr	r3, [pc, #340]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 800189a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189c:	4a54      	ldr	r2, [pc, #336]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 800189e:	f023 0304 	bic.w	r3, r3, #4
 80018a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d015      	beq.n	80018d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ac:	f7ff fb02 	bl	8000eb4 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b4:	f7ff fafe 	bl	8000eb4 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e0cb      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ca:	4b49      	ldr	r3, [pc, #292]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0ee      	beq.n	80018b4 <HAL_RCC_OscConfig+0x334>
 80018d6:	e014      	b.n	8001902 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d8:	f7ff faec 	bl	8000eb4 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e0:	f7ff fae8 	bl	8000eb4 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e0b5      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f6:	4b3e      	ldr	r3, [pc, #248]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1ee      	bne.n	80018e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001902:	7dfb      	ldrb	r3, [r7, #23]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d105      	bne.n	8001914 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001908:	4b39      	ldr	r3, [pc, #228]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	4a38      	ldr	r2, [pc, #224]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 800190e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001912:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80a1 	beq.w	8001a60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800191e:	4b34      	ldr	r3, [pc, #208]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	2b08      	cmp	r3, #8
 8001928:	d05c      	beq.n	80019e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d141      	bne.n	80019b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <HAL_RCC_OscConfig+0x478>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff fabc 	bl	8000eb4 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001940:	f7ff fab8 	bl	8000eb4 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e087      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001952:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69da      	ldr	r2, [r3, #28]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	019b      	lsls	r3, r3, #6
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	085b      	lsrs	r3, r3, #1
 8001976:	3b01      	subs	r3, #1
 8001978:	041b      	lsls	r3, r3, #16
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	491b      	ldr	r1, [pc, #108]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_RCC_OscConfig+0x478>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198e:	f7ff fa91 	bl	8000eb4 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001996:	f7ff fa8d 	bl	8000eb4 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e05c      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x416>
 80019b4:	e054      	b.n	8001a60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_RCC_OscConfig+0x478>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff fa7a 	bl	8000eb4 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c4:	f7ff fa76 	bl	8000eb4 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e045      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_RCC_OscConfig+0x470>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x444>
 80019e2:	e03d      	b.n	8001a60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d107      	bne.n	80019fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e038      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40007000 	.word	0x40007000
 80019f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_RCC_OscConfig+0x4ec>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d028      	beq.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d121      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d11a      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d111      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	085b      	lsrs	r3, r3, #1
 8001a44:	3b01      	subs	r3, #1
 8001a46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d107      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800

08001a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0cc      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b68      	ldr	r3, [pc, #416]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d90c      	bls.n	8001aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b65      	ldr	r3, [pc, #404]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9a:	4b63      	ldr	r3, [pc, #396]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0b8      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d020      	beq.n	8001afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac4:	4b59      	ldr	r3, [pc, #356]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4a58      	ldr	r2, [pc, #352]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001adc:	4b53      	ldr	r3, [pc, #332]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4a52      	ldr	r2, [pc, #328]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae8:	4b50      	ldr	r3, [pc, #320]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	494d      	ldr	r1, [pc, #308]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d044      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d119      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e07f      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d003      	beq.n	8001b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d107      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2e:	4b3f      	ldr	r3, [pc, #252]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d109      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e06f      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3e:	4b3b      	ldr	r3, [pc, #236]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e067      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4e:	4b37      	ldr	r3, [pc, #220]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f023 0203 	bic.w	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4934      	ldr	r1, [pc, #208]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b60:	f7ff f9a8 	bl	8000eb4 <HAL_GetTick>
 8001b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b68:	f7ff f9a4 	bl	8000eb4 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e04f      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 020c 	and.w	r2, r3, #12
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d1eb      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b90:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d20c      	bcs.n	8001bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e032      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4916      	ldr	r1, [pc, #88]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d009      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	490e      	ldr	r1, [pc, #56]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bf6:	f000 f821 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	490a      	ldr	r1, [pc, #40]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	5ccb      	ldrb	r3, [r1, r3]
 8001c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f908 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023c00 	.word	0x40023c00
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	08005174 	.word	0x08005174
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c40:	b090      	sub	sp, #64	; 0x40
 8001c42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
 8001c48:	2300      	movs	r3, #0
 8001c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c54:	4b59      	ldr	r3, [pc, #356]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d00d      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0x40>
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	f200 80a1 	bhi.w	8001da8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0x34>
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d003      	beq.n	8001c76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c6e:	e09b      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c70:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c74:	e09b      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c76:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c7a:	e098      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c7c:	4b4f      	ldr	r3, [pc, #316]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c86:	4b4d      	ldr	r3, [pc, #308]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d028      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c92:	4b4a      	ldr	r3, [pc, #296]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	099b      	lsrs	r3, r3, #6
 8001c98:	2200      	movs	r2, #0
 8001c9a:	623b      	str	r3, [r7, #32]
 8001c9c:	627a      	str	r2, [r7, #36]	; 0x24
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ca8:	fb03 f201 	mul.w	r2, r3, r1
 8001cac:	2300      	movs	r3, #0
 8001cae:	fb00 f303 	mul.w	r3, r0, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a43      	ldr	r2, [pc, #268]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cb6:	fba0 1202 	umull	r1, r2, r0, r2
 8001cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cc2:	4413      	add	r3, r2
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc8:	2200      	movs	r2, #0
 8001cca:	61bb      	str	r3, [r7, #24]
 8001ccc:	61fa      	str	r2, [r7, #28]
 8001cce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cd6:	f7fe fadb 	bl	8000290 <__aeabi_uldivmod>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4613      	mov	r3, r2
 8001ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ce2:	e053      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce4:	4b35      	ldr	r3, [pc, #212]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	099b      	lsrs	r3, r3, #6
 8001cea:	2200      	movs	r2, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	617a      	str	r2, [r7, #20]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001cf6:	f04f 0b00 	mov.w	fp, #0
 8001cfa:	4652      	mov	r2, sl
 8001cfc:	465b      	mov	r3, fp
 8001cfe:	f04f 0000 	mov.w	r0, #0
 8001d02:	f04f 0100 	mov.w	r1, #0
 8001d06:	0159      	lsls	r1, r3, #5
 8001d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d0c:	0150      	lsls	r0, r2, #5
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	ebb2 080a 	subs.w	r8, r2, sl
 8001d16:	eb63 090b 	sbc.w	r9, r3, fp
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d2e:	ebb2 0408 	subs.w	r4, r2, r8
 8001d32:	eb63 0509 	sbc.w	r5, r3, r9
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	00eb      	lsls	r3, r5, #3
 8001d40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d44:	00e2      	lsls	r2, r4, #3
 8001d46:	4614      	mov	r4, r2
 8001d48:	461d      	mov	r5, r3
 8001d4a:	eb14 030a 	adds.w	r3, r4, sl
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	eb45 030b 	adc.w	r3, r5, fp
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d62:	4629      	mov	r1, r5
 8001d64:	028b      	lsls	r3, r1, #10
 8001d66:	4621      	mov	r1, r4
 8001d68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	028a      	lsls	r2, r1, #10
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d76:	2200      	movs	r2, #0
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	60fa      	str	r2, [r7, #12]
 8001d7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d80:	f7fe fa86 	bl	8000290 <__aeabi_uldivmod>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4613      	mov	r3, r2
 8001d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	0c1b      	lsrs	r3, r3, #16
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	3301      	adds	r3, #1
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001d9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001da6:	e002      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001daa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3740      	adds	r7, #64	; 0x40
 8001db4:	46bd      	mov	sp, r7
 8001db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	00f42400 	.word	0x00f42400
 8001dc4:	017d7840 	.word	0x017d7840

08001dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000000 	.word	0x20000000

08001de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001de4:	f7ff fff0 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	0a9b      	lsrs	r3, r3, #10
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	4903      	ldr	r1, [pc, #12]	; (8001e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023800 	.word	0x40023800
 8001e04:	08005184 	.word	0x08005184

08001e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e0c:	f7ff ffdc 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	0b5b      	lsrs	r3, r3, #13
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	4903      	ldr	r1, [pc, #12]	; (8001e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e1e:	5ccb      	ldrb	r3, [r1, r3]
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	08005184 	.word	0x08005184

08001e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e03f      	b.n	8001ec2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fdf8 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2224      	movs	r2, #36	; 0x24
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fddf 	bl	8002a38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695a      	ldr	r2, [r3, #20]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b08a      	sub	sp, #40	; 0x28
 8001ece:	af02      	add	r7, sp, #8
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b20      	cmp	r3, #32
 8001ee8:	d17c      	bne.n	8001fe4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <HAL_UART_Transmit+0x2c>
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e075      	b.n	8001fe6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_UART_Transmit+0x3e>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e06e      	b.n	8001fe6 <HAL_UART_Transmit+0x11c>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2221      	movs	r2, #33	; 0x21
 8001f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f1e:	f7fe ffc9 	bl	8000eb4 <HAL_GetTick>
 8001f22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	88fa      	ldrh	r2, [r7, #6]
 8001f28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	88fa      	ldrh	r2, [r7, #6]
 8001f2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f38:	d108      	bne.n	8001f4c <HAL_UART_Transmit+0x82>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d104      	bne.n	8001f4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	61bb      	str	r3, [r7, #24]
 8001f4a:	e003      	b.n	8001f54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f5c:	e02a      	b.n	8001fb4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2200      	movs	r2, #0
 8001f66:	2180      	movs	r1, #128	; 0x80
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fb1f 	bl	80025ac <UART_WaitOnFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e036      	b.n	8001fe6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10b      	bne.n	8001f96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	3302      	adds	r3, #2
 8001f92:	61bb      	str	r3, [r7, #24]
 8001f94:	e007      	b.n	8001fa6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	781a      	ldrb	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1cf      	bne.n	8001f5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2140      	movs	r1, #64	; 0x40
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 faef 	bl	80025ac <UART_WaitOnFlagUntilTimeout>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e006      	b.n	8001fe6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e000      	b.n	8001fe6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fe4:	2302      	movs	r3, #2
  }
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3720      	adds	r7, #32
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b20      	cmp	r3, #32
 8002006:	d11d      	bne.n	8002044 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <HAL_UART_Receive_IT+0x26>
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e016      	b.n	8002046 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_UART_Receive_IT+0x38>
 8002022:	2302      	movs	r3, #2
 8002024:	e00f      	b.n	8002046 <HAL_UART_Receive_IT+0x58>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	461a      	mov	r2, r3
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fb24 	bl	8002688 <UART_Start_Receive_IT>
 8002040:	4603      	mov	r3, r0
 8002042:	e000      	b.n	8002046 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002044:	2302      	movs	r3, #2
  }
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b0ba      	sub	sp, #232	; 0xe8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800208e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10f      	bne.n	80020b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800209a:	f003 0320 	and.w	r3, r3, #32
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d009      	beq.n	80020b6 <HAL_UART_IRQHandler+0x66>
 80020a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fc07 	bl	80028c2 <UART_Receive_IT>
      return;
 80020b4:	e256      	b.n	8002564 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80020b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80de 	beq.w	800227c <HAL_UART_IRQHandler+0x22c>
 80020c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d106      	bne.n	80020da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80d1 	beq.w	800227c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00b      	beq.n	80020fe <HAL_UART_IRQHandler+0xae>
 80020e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f043 0201 	orr.w	r2, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <HAL_UART_IRQHandler+0xd2>
 800210a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f043 0202 	orr.w	r2, r3, #2
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <HAL_UART_IRQHandler+0xf6>
 800212e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d005      	beq.n	8002146 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f043 0204 	orr.w	r2, r3, #4
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d011      	beq.n	8002176 <HAL_UART_IRQHandler+0x126>
 8002152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	2b00      	cmp	r3, #0
 800215c:	d105      	bne.n	800216a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800215e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d005      	beq.n	8002176 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f043 0208 	orr.w	r2, r3, #8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 81ed 	beq.w	800255a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_UART_IRQHandler+0x14e>
 800218c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002190:	f003 0320 	and.w	r3, r3, #32
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fb92 	bl	80028c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a8:	2b40      	cmp	r3, #64	; 0x40
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d103      	bne.n	80021ca <HAL_UART_IRQHandler+0x17a>
 80021c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d04f      	beq.n	800226a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fa9a 	bl	8002704 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021da:	2b40      	cmp	r3, #64	; 0x40
 80021dc:	d141      	bne.n	8002262 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3314      	adds	r3, #20
 80021e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021ec:	e853 3f00 	ldrex	r3, [r3]
 80021f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80021f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	3314      	adds	r3, #20
 8002206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800220a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800220e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800221a:	e841 2300 	strex	r3, r2, [r1]
 800221e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1d9      	bne.n	80021de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	2b00      	cmp	r3, #0
 8002230:	d013      	beq.n	800225a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	4a7d      	ldr	r2, [pc, #500]	; (800242c <HAL_UART_IRQHandler+0x3dc>)
 8002238:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe ffc5 	bl	80011ce <HAL_DMA_Abort_IT>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d016      	beq.n	8002278 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002254:	4610      	mov	r0, r2
 8002256:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002258:	e00e      	b.n	8002278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f990 	bl	8002580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002260:	e00a      	b.n	8002278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f98c 	bl	8002580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002268:	e006      	b.n	8002278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f988 	bl	8002580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002276:	e170      	b.n	800255a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002278:	bf00      	nop
    return;
 800227a:	e16e      	b.n	800255a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	2b01      	cmp	r3, #1
 8002282:	f040 814a 	bne.w	800251a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8143 	beq.w	800251a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 813c 	beq.w	800251a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	2b40      	cmp	r3, #64	; 0x40
 80022c4:	f040 80b4 	bne.w	8002430 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80022d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 8140 	beq.w	800255e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022e6:	429a      	cmp	r2, r3
 80022e8:	f080 8139 	bcs.w	800255e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022fe:	f000 8088 	beq.w	8002412 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	330c      	adds	r3, #12
 8002308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800230c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002310:	e853 3f00 	ldrex	r3, [r3]
 8002314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800231c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	330c      	adds	r3, #12
 800232a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800232e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002336:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800233a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800233e:	e841 2300 	strex	r3, r2, [r1]
 8002342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1d9      	bne.n	8002302 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3314      	adds	r3, #20
 8002354:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002358:	e853 3f00 	ldrex	r3, [r3]
 800235c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800235e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	3314      	adds	r3, #20
 800236e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002372:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002376:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002378:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800237a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800237e:	e841 2300 	strex	r3, r2, [r1]
 8002382:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1e1      	bne.n	800234e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3314      	adds	r3, #20
 8002390:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002394:	e853 3f00 	ldrex	r3, [r3]
 8002398:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800239a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800239c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3314      	adds	r3, #20
 80023aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80023ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80023b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80023b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023b6:	e841 2300 	strex	r3, r2, [r1]
 80023ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80023bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1e3      	bne.n	800238a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2220      	movs	r2, #32
 80023c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	330c      	adds	r3, #12
 80023d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023da:	e853 3f00 	ldrex	r3, [r3]
 80023de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80023e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e2:	f023 0310 	bic.w	r3, r3, #16
 80023e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	330c      	adds	r3, #12
 80023f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80023f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80023f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023fc:	e841 2300 	strex	r3, r2, [r1]
 8002400:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1e3      	bne.n	80023d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fe6e 	bl	80010ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800241a:	b29b      	uxth	r3, r3
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	b29b      	uxth	r3, r3
 8002420:	4619      	mov	r1, r3
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f8b6 	bl	8002594 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002428:	e099      	b.n	800255e <HAL_UART_IRQHandler+0x50e>
 800242a:	bf00      	nop
 800242c:	080027cb 	.word	0x080027cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002438:	b29b      	uxth	r3, r3
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 808b 	beq.w	8002562 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800244c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8086 	beq.w	8002562 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	330c      	adds	r3, #12
 800245c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800245e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002460:	e853 3f00 	ldrex	r3, [r3]
 8002464:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002468:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800246c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	330c      	adds	r3, #12
 8002476:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800247a:	647a      	str	r2, [r7, #68]	; 0x44
 800247c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002482:	e841 2300 	strex	r3, r2, [r1]
 8002486:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1e3      	bne.n	8002456 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3314      	adds	r3, #20
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	e853 3f00 	ldrex	r3, [r3]
 800249c:	623b      	str	r3, [r7, #32]
   return(result);
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3314      	adds	r3, #20
 80024ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80024b2:	633a      	str	r2, [r7, #48]	; 0x30
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ba:	e841 2300 	strex	r3, r2, [r1]
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1e3      	bne.n	800248e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	330c      	adds	r3, #12
 80024da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	e853 3f00 	ldrex	r3, [r3]
 80024e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 0310 	bic.w	r3, r3, #16
 80024ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	330c      	adds	r3, #12
 80024f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80024f8:	61fa      	str	r2, [r7, #28]
 80024fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fc:	69b9      	ldr	r1, [r7, #24]
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	e841 2300 	strex	r3, r2, [r1]
 8002504:	617b      	str	r3, [r7, #20]
   return(result);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1e3      	bne.n	80024d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800250c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002510:	4619      	mov	r1, r3
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f83e 	bl	8002594 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002518:	e023      	b.n	8002562 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800251a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800251e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002522:	2b00      	cmp	r3, #0
 8002524:	d009      	beq.n	800253a <HAL_UART_IRQHandler+0x4ea>
 8002526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800252a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f95d 	bl	80027f2 <UART_Transmit_IT>
    return;
 8002538:	e014      	b.n	8002564 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800253a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800253e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00e      	beq.n	8002564 <HAL_UART_IRQHandler+0x514>
 8002546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800254a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f99d 	bl	8002892 <UART_EndTransmit_IT>
    return;
 8002558:	e004      	b.n	8002564 <HAL_UART_IRQHandler+0x514>
    return;
 800255a:	bf00      	nop
 800255c:	e002      	b.n	8002564 <HAL_UART_IRQHandler+0x514>
      return;
 800255e:	bf00      	nop
 8002560:	e000      	b.n	8002564 <HAL_UART_IRQHandler+0x514>
      return;
 8002562:	bf00      	nop
  }
}
 8002564:	37e8      	adds	r7, #232	; 0xe8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop

0800256c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b090      	sub	sp, #64	; 0x40
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025bc:	e050      	b.n	8002660 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c4:	d04c      	beq.n	8002660 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <UART_WaitOnFlagUntilTimeout+0x30>
 80025cc:	f7fe fc72 	bl	8000eb4 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025d8:	429a      	cmp	r2, r3
 80025da:	d241      	bcs.n	8002660 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	330c      	adds	r3, #12
 80025e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e6:	e853 3f00 	ldrex	r3, [r3]
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80025f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	330c      	adds	r3, #12
 80025fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025fc:	637a      	str	r2, [r7, #52]	; 0x34
 80025fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002600:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002604:	e841 2300 	strex	r3, r2, [r1]
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800260a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e5      	bne.n	80025dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3314      	adds	r3, #20
 8002616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	e853 3f00 	ldrex	r3, [r3]
 800261e:	613b      	str	r3, [r7, #16]
   return(result);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	63bb      	str	r3, [r7, #56]	; 0x38
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3314      	adds	r3, #20
 800262e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002630:	623a      	str	r2, [r7, #32]
 8002632:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002634:	69f9      	ldr	r1, [r7, #28]
 8002636:	6a3a      	ldr	r2, [r7, #32]
 8002638:	e841 2300 	strex	r3, r2, [r1]
 800263c:	61bb      	str	r3, [r7, #24]
   return(result);
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1e5      	bne.n	8002610 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e00f      	b.n	8002680 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	4013      	ands	r3, r2
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	429a      	cmp	r2, r3
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	429a      	cmp	r2, r3
 800267c:	d09f      	beq.n	80025be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3740      	adds	r7, #64	; 0x40
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	4613      	mov	r3, r2
 8002694:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	88fa      	ldrh	r2, [r7, #6]
 80026a0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	88fa      	ldrh	r2, [r7, #6]
 80026a6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2222      	movs	r2, #34	; 0x22
 80026b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026d4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0201 	orr.w	r2, r2, #1
 80026e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 0220 	orr.w	r2, r2, #32
 80026f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002704:	b480      	push	{r7}
 8002706:	b095      	sub	sp, #84	; 0x54
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	330c      	adds	r3, #12
 8002712:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002716:	e853 3f00 	ldrex	r3, [r3]
 800271a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800271c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	330c      	adds	r3, #12
 800272a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800272c:	643a      	str	r2, [r7, #64]	; 0x40
 800272e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002730:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002732:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002734:	e841 2300 	strex	r3, r2, [r1]
 8002738:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1e5      	bne.n	800270c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3314      	adds	r3, #20
 8002746:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	e853 3f00 	ldrex	r3, [r3]
 800274e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f023 0301 	bic.w	r3, r3, #1
 8002756:	64bb      	str	r3, [r7, #72]	; 0x48
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	3314      	adds	r3, #20
 800275e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002760:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002768:	e841 2300 	strex	r3, r2, [r1]
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e5      	bne.n	8002740 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	2b01      	cmp	r3, #1
 800277a:	d119      	bne.n	80027b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	330c      	adds	r3, #12
 8002782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	e853 3f00 	ldrex	r3, [r3]
 800278a:	60bb      	str	r3, [r7, #8]
   return(result);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f023 0310 	bic.w	r3, r3, #16
 8002792:	647b      	str	r3, [r7, #68]	; 0x44
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	330c      	adds	r3, #12
 800279a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800279c:	61ba      	str	r2, [r7, #24]
 800279e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a0:	6979      	ldr	r1, [r7, #20]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	e841 2300 	strex	r3, r2, [r1]
 80027a8:	613b      	str	r3, [r7, #16]
   return(result);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e5      	bne.n	800277c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027be:	bf00      	nop
 80027c0:	3754      	adds	r7, #84	; 0x54
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7ff fecb 	bl	8002580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b21      	cmp	r3, #33	; 0x21
 8002804:	d13e      	bne.n	8002884 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280e:	d114      	bne.n	800283a <UART_Transmit_IT+0x48>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d110      	bne.n	800283a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800282c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	1c9a      	adds	r2, r3, #2
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	621a      	str	r2, [r3, #32]
 8002838:	e008      	b.n	800284c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	1c59      	adds	r1, r3, #1
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6211      	str	r1, [r2, #32]
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29b      	uxth	r3, r3
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4619      	mov	r1, r3
 800285a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10f      	bne.n	8002880 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800286e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800287e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002884:	2302      	movs	r3, #2
  }
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff fe5a 	bl	800256c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b08c      	sub	sp, #48	; 0x30
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b22      	cmp	r3, #34	; 0x22
 80028d4:	f040 80ab 	bne.w	8002a2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e0:	d117      	bne.n	8002912 <UART_Receive_IT+0x50>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d113      	bne.n	8002912 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002900:	b29a      	uxth	r2, r3
 8002902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002904:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	1c9a      	adds	r2, r3, #2
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	; 0x28
 8002910:	e026      	b.n	8002960 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002918:	2300      	movs	r3, #0
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002924:	d007      	beq.n	8002936 <UART_Receive_IT+0x74>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10a      	bne.n	8002944 <UART_Receive_IT+0x82>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e008      	b.n	8002956 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002950:	b2da      	uxtb	r2, r3
 8002952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002954:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29b      	uxth	r3, r3
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4619      	mov	r1, r3
 800296e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002970:	2b00      	cmp	r3, #0
 8002972:	d15a      	bne.n	8002a2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0220 	bic.w	r2, r2, #32
 8002982:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002992:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d135      	bne.n	8002a20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	e853 3f00 	ldrex	r3, [r3]
 80029c8:	613b      	str	r3, [r7, #16]
   return(result);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f023 0310 	bic.w	r3, r3, #16
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	330c      	adds	r3, #12
 80029d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029da:	623a      	str	r2, [r7, #32]
 80029dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029de:	69f9      	ldr	r1, [r7, #28]
 80029e0:	6a3a      	ldr	r2, [r7, #32]
 80029e2:	e841 2300 	strex	r3, r2, [r1]
 80029e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1e5      	bne.n	80029ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d10a      	bne.n	8002a12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a16:	4619      	mov	r1, r3
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff fdbb 	bl	8002594 <HAL_UARTEx_RxEventCallback>
 8002a1e:	e002      	b.n	8002a26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7fd fe5f 	bl	80006e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e002      	b.n	8002a30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e000      	b.n	8002a30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002a2e:	2302      	movs	r3, #2
  }
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3730      	adds	r7, #48	; 0x30
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a3c:	b0c0      	sub	sp, #256	; 0x100
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a54:	68d9      	ldr	r1, [r3, #12]
 8002a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	ea40 0301 	orr.w	r3, r0, r1
 8002a60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a90:	f021 010c 	bic.w	r1, r1, #12
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a9e:	430b      	orrs	r3, r1
 8002aa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab2:	6999      	ldr	r1, [r3, #24]
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	ea40 0301 	orr.w	r3, r0, r1
 8002abe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4b8f      	ldr	r3, [pc, #572]	; (8002d04 <UART_SetConfig+0x2cc>)
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d005      	beq.n	8002ad8 <UART_SetConfig+0xa0>
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4b8d      	ldr	r3, [pc, #564]	; (8002d08 <UART_SetConfig+0x2d0>)
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d104      	bne.n	8002ae2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ad8:	f7ff f996 	bl	8001e08 <HAL_RCC_GetPCLK2Freq>
 8002adc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ae0:	e003      	b.n	8002aea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ae2:	f7ff f97d 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002ae6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002af4:	f040 810c 	bne.w	8002d10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002afc:	2200      	movs	r2, #0
 8002afe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b0a:	4622      	mov	r2, r4
 8002b0c:	462b      	mov	r3, r5
 8002b0e:	1891      	adds	r1, r2, r2
 8002b10:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b12:	415b      	adcs	r3, r3
 8002b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	eb12 0801 	adds.w	r8, r2, r1
 8002b20:	4629      	mov	r1, r5
 8002b22:	eb43 0901 	adc.w	r9, r3, r1
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b3a:	4690      	mov	r8, r2
 8002b3c:	4699      	mov	r9, r3
 8002b3e:	4623      	mov	r3, r4
 8002b40:	eb18 0303 	adds.w	r3, r8, r3
 8002b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b48:	462b      	mov	r3, r5
 8002b4a:	eb49 0303 	adc.w	r3, r9, r3
 8002b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b66:	460b      	mov	r3, r1
 8002b68:	18db      	adds	r3, r3, r3
 8002b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	eb42 0303 	adc.w	r3, r2, r3
 8002b72:	657b      	str	r3, [r7, #84]	; 0x54
 8002b74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b7c:	f7fd fb88 	bl	8000290 <__aeabi_uldivmod>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4b61      	ldr	r3, [pc, #388]	; (8002d0c <UART_SetConfig+0x2d4>)
 8002b86:	fba3 2302 	umull	r2, r3, r3, r2
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	011c      	lsls	r4, r3, #4
 8002b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b92:	2200      	movs	r2, #0
 8002b94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ba0:	4642      	mov	r2, r8
 8002ba2:	464b      	mov	r3, r9
 8002ba4:	1891      	adds	r1, r2, r2
 8002ba6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ba8:	415b      	adcs	r3, r3
 8002baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bb0:	4641      	mov	r1, r8
 8002bb2:	eb12 0a01 	adds.w	sl, r2, r1
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	eb43 0b01 	adc.w	fp, r3, r1
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bd0:	4692      	mov	sl, r2
 8002bd2:	469b      	mov	fp, r3
 8002bd4:	4643      	mov	r3, r8
 8002bd6:	eb1a 0303 	adds.w	r3, sl, r3
 8002bda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bde:	464b      	mov	r3, r9
 8002be0:	eb4b 0303 	adc.w	r3, fp, r3
 8002be4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bf4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	18db      	adds	r3, r3, r3
 8002c00:	643b      	str	r3, [r7, #64]	; 0x40
 8002c02:	4613      	mov	r3, r2
 8002c04:	eb42 0303 	adc.w	r3, r2, r3
 8002c08:	647b      	str	r3, [r7, #68]	; 0x44
 8002c0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c12:	f7fd fb3d 	bl	8000290 <__aeabi_uldivmod>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4b3b      	ldr	r3, [pc, #236]	; (8002d0c <UART_SetConfig+0x2d4>)
 8002c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	2264      	movs	r2, #100	; 0x64
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	1acb      	subs	r3, r1, r3
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c32:	4b36      	ldr	r3, [pc, #216]	; (8002d0c <UART_SetConfig+0x2d4>)
 8002c34:	fba3 2302 	umull	r2, r3, r3, r2
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c40:	441c      	add	r4, r3
 8002c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c54:	4642      	mov	r2, r8
 8002c56:	464b      	mov	r3, r9
 8002c58:	1891      	adds	r1, r2, r2
 8002c5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c5c:	415b      	adcs	r3, r3
 8002c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c64:	4641      	mov	r1, r8
 8002c66:	1851      	adds	r1, r2, r1
 8002c68:	6339      	str	r1, [r7, #48]	; 0x30
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	414b      	adcs	r3, r1
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	00cb      	lsls	r3, r1, #3
 8002c80:	4651      	mov	r1, sl
 8002c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c86:	4651      	mov	r1, sl
 8002c88:	00ca      	lsls	r2, r1, #3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4642      	mov	r2, r8
 8002c92:	189b      	adds	r3, r3, r2
 8002c94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c98:	464b      	mov	r3, r9
 8002c9a:	460a      	mov	r2, r1
 8002c9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cb8:	460b      	mov	r3, r1
 8002cba:	18db      	adds	r3, r3, r3
 8002cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	eb42 0303 	adc.w	r3, r2, r3
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002cce:	f7fd fadf 	bl	8000290 <__aeabi_uldivmod>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <UART_SetConfig+0x2d4>)
 8002cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	2164      	movs	r1, #100	; 0x64
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	3332      	adds	r3, #50	; 0x32
 8002cea:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <UART_SetConfig+0x2d4>)
 8002cec:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	f003 0207 	and.w	r2, r3, #7
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4422      	add	r2, r4
 8002cfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d00:	e105      	b.n	8002f0e <UART_SetConfig+0x4d6>
 8002d02:	bf00      	nop
 8002d04:	40011000 	.word	0x40011000
 8002d08:	40011400 	.word	0x40011400
 8002d0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d14:	2200      	movs	r2, #0
 8002d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d22:	4642      	mov	r2, r8
 8002d24:	464b      	mov	r3, r9
 8002d26:	1891      	adds	r1, r2, r2
 8002d28:	6239      	str	r1, [r7, #32]
 8002d2a:	415b      	adcs	r3, r3
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d32:	4641      	mov	r1, r8
 8002d34:	1854      	adds	r4, r2, r1
 8002d36:	4649      	mov	r1, r9
 8002d38:	eb43 0501 	adc.w	r5, r3, r1
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	00eb      	lsls	r3, r5, #3
 8002d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d4a:	00e2      	lsls	r2, r4, #3
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	461d      	mov	r5, r3
 8002d50:	4643      	mov	r3, r8
 8002d52:	18e3      	adds	r3, r4, r3
 8002d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d58:	464b      	mov	r3, r9
 8002d5a:	eb45 0303 	adc.w	r3, r5, r3
 8002d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d7e:	4629      	mov	r1, r5
 8002d80:	008b      	lsls	r3, r1, #2
 8002d82:	4621      	mov	r1, r4
 8002d84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d88:	4621      	mov	r1, r4
 8002d8a:	008a      	lsls	r2, r1, #2
 8002d8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d90:	f7fd fa7e 	bl	8000290 <__aeabi_uldivmod>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4b60      	ldr	r3, [pc, #384]	; (8002f1c <UART_SetConfig+0x4e4>)
 8002d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	011c      	lsls	r4, r3, #4
 8002da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002db0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002db4:	4642      	mov	r2, r8
 8002db6:	464b      	mov	r3, r9
 8002db8:	1891      	adds	r1, r2, r2
 8002dba:	61b9      	str	r1, [r7, #24]
 8002dbc:	415b      	adcs	r3, r3
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dc4:	4641      	mov	r1, r8
 8002dc6:	1851      	adds	r1, r2, r1
 8002dc8:	6139      	str	r1, [r7, #16]
 8002dca:	4649      	mov	r1, r9
 8002dcc:	414b      	adcs	r3, r1
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ddc:	4659      	mov	r1, fp
 8002dde:	00cb      	lsls	r3, r1, #3
 8002de0:	4651      	mov	r1, sl
 8002de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002de6:	4651      	mov	r1, sl
 8002de8:	00ca      	lsls	r2, r1, #3
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	4603      	mov	r3, r0
 8002df0:	4642      	mov	r2, r8
 8002df2:	189b      	adds	r3, r3, r2
 8002df4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002df8:	464b      	mov	r3, r9
 8002dfa:	460a      	mov	r2, r1
 8002dfc:	eb42 0303 	adc.w	r3, r2, r3
 8002e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e1c:	4649      	mov	r1, r9
 8002e1e:	008b      	lsls	r3, r1, #2
 8002e20:	4641      	mov	r1, r8
 8002e22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e26:	4641      	mov	r1, r8
 8002e28:	008a      	lsls	r2, r1, #2
 8002e2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e2e:	f7fd fa2f 	bl	8000290 <__aeabi_uldivmod>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4b39      	ldr	r3, [pc, #228]	; (8002f1c <UART_SetConfig+0x4e4>)
 8002e38:	fba3 1302 	umull	r1, r3, r3, r2
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	2164      	movs	r1, #100	; 0x64
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	3332      	adds	r3, #50	; 0x32
 8002e4a:	4a34      	ldr	r2, [pc, #208]	; (8002f1c <UART_SetConfig+0x4e4>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e56:	441c      	add	r4, r3
 8002e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e60:	677a      	str	r2, [r7, #116]	; 0x74
 8002e62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e66:	4642      	mov	r2, r8
 8002e68:	464b      	mov	r3, r9
 8002e6a:	1891      	adds	r1, r2, r2
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	415b      	adcs	r3, r3
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e76:	4641      	mov	r1, r8
 8002e78:	1851      	adds	r1, r2, r1
 8002e7a:	6039      	str	r1, [r7, #0]
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	414b      	adcs	r3, r1
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e8e:	4659      	mov	r1, fp
 8002e90:	00cb      	lsls	r3, r1, #3
 8002e92:	4651      	mov	r1, sl
 8002e94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e98:	4651      	mov	r1, sl
 8002e9a:	00ca      	lsls	r2, r1, #3
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4642      	mov	r2, r8
 8002ea4:	189b      	adds	r3, r3, r2
 8002ea6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ea8:	464b      	mov	r3, r9
 8002eaa:	460a      	mov	r2, r1
 8002eac:	eb42 0303 	adc.w	r3, r2, r3
 8002eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	663b      	str	r3, [r7, #96]	; 0x60
 8002ebc:	667a      	str	r2, [r7, #100]	; 0x64
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002eca:	4649      	mov	r1, r9
 8002ecc:	008b      	lsls	r3, r1, #2
 8002ece:	4641      	mov	r1, r8
 8002ed0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ed4:	4641      	mov	r1, r8
 8002ed6:	008a      	lsls	r2, r1, #2
 8002ed8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002edc:	f7fd f9d8 	bl	8000290 <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <UART_SetConfig+0x4e4>)
 8002ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	2164      	movs	r1, #100	; 0x64
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	3332      	adds	r3, #50	; 0x32
 8002ef8:	4a08      	ldr	r2, [pc, #32]	; (8002f1c <UART_SetConfig+0x4e4>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	f003 020f 	and.w	r2, r3, #15
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4422      	add	r2, r4
 8002f0c:	609a      	str	r2, [r3, #8]
}
 8002f0e:	bf00      	nop
 8002f10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f14:	46bd      	mov	sp, r7
 8002f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f1a:	bf00      	nop
 8002f1c:	51eb851f 	.word	0x51eb851f

08002f20 <update_crc_32>:
 *
 * The function update_crc_32() calculates a new CRC-32 value based on the
 * previous value of the CRC and the next byte of the data to be checked.
 */

uint32_t update_crc_32( uint32_t crc, unsigned char c ) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	70fb      	strb	r3, [r7, #3]

	uint32_t tmp;
	uint32_t long_c;

	long_c = 0x000000ffL & (uint32_t) c;
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	60fb      	str	r3, [r7, #12]

	if ( ! crc_tab32_init ) init_crc32_tab();
 8002f30:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <update_crc_32+0x48>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	f083 0301 	eor.w	r3, r3, #1
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <update_crc_32+0x22>
 8002f3e:	f000 f817 	bl	8002f70 <init_crc32_tab>

	tmp = crc ^ long_c;
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4053      	eors	r3, r2
 8002f48:	60bb      	str	r3, [r7, #8]
	crc = (crc >> 8) ^ crc_tab32[ tmp & 0xff ];
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	0a1a      	lsrs	r2, r3, #8
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	4906      	ldr	r1, [pc, #24]	; (8002f6c <update_crc_32+0x4c>)
 8002f54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f58:	4053      	eors	r3, r2
 8002f5a:	607b      	str	r3, [r7, #4]

	return crc & 0xffffffffL;;
 8002f5c:	687b      	ldr	r3, [r7, #4]

}  /* update_crc_32 */
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	2000023c 	.word	0x2000023c
 8002f6c:	20000240 	.word	0x20000240

08002f70 <init_crc32_tab>:
 * For optimal speed, the CRC32 calculation uses a table with pre-calculated
 * bit patterns which are used in the XOR operations in the program. This table
 * is generated once, the first time the CRC update routine is called.
 */

static void init_crc32_tab( void ) {
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0

	uint32_t i;
	uint32_t j;
	uint32_t crc;

	for (i=0; i<256; i++) {
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	e020      	b.n	8002fbe <init_crc32_tab+0x4e>

		crc = i;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	607b      	str	r3, [r7, #4]

		for (j=0; j<8; j++) {
 8002f80:	2300      	movs	r3, #0
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	e010      	b.n	8002fa8 <init_crc32_tab+0x38>

			if ( crc & 0x00000001L ) crc = ( crc >> 1 ) ^ CRC_POLY_32;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <init_crc32_tab+0x2c>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	085a      	lsrs	r2, r3, #1
 8002f94:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <init_crc32_tab+0x68>)
 8002f96:	4053      	eors	r3, r2
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	e002      	b.n	8002fa2 <init_crc32_tab+0x32>
			else                     crc =   crc >> 1;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	607b      	str	r3, [r7, #4]
		for (j=0; j<8; j++) {
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b07      	cmp	r3, #7
 8002fac:	d9eb      	bls.n	8002f86 <init_crc32_tab+0x16>
		}

		crc_tab32[i] = crc;
 8002fae:	490b      	ldr	r1, [pc, #44]	; (8002fdc <init_crc32_tab+0x6c>)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0; i<256; i++) {
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2bff      	cmp	r3, #255	; 0xff
 8002fc2:	d9db      	bls.n	8002f7c <init_crc32_tab+0xc>
	}

	crc_tab32_init = true;
 8002fc4:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <init_crc32_tab+0x70>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	701a      	strb	r2, [r3, #0]

}  /* init_crc32_tab */
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	edb88320 	.word	0xedb88320
 8002fdc:	20000240 	.word	0x20000240
 8002fe0:	2000023c 	.word	0x2000023c

08002fe4 <str2hex>:
uint8_t cl_buf[255];
uint8_t cl_pointer = 0;
uint8_t cl_flag = 0;

static uint8_t str2hex(char *str)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	uint8_t result = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 2; i++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	e047      	b.n	8003086 <str2hex+0xa2>
	{
		uint8_t temp_data;
		if(str[i] >= '0' && str[i] <= '9')
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b2f      	cmp	r3, #47	; 0x2f
 8003000:	d90c      	bls.n	800301c <str2hex+0x38>
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b39      	cmp	r3, #57	; 0x39
 800300c:	d806      	bhi.n	800301c <str2hex+0x38>
		{
			temp_data = str[i] - '0';
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	3b30      	subs	r3, #48	; 0x30
 8003018:	73fb      	strb	r3, [r7, #15]
 800301a:	e024      	b.n	8003066 <str2hex+0x82>
		}
		else if(str[i] >= 'A' && str[i] <= 'F')
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d90c      	bls.n	8003042 <str2hex+0x5e>
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b46      	cmp	r3, #70	; 0x46
 8003032:	d806      	bhi.n	8003042 <str2hex+0x5e>
		{
			temp_data = str[i] - 55;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	3b37      	subs	r3, #55	; 0x37
 800303e:	73fb      	strb	r3, [r7, #15]
 8003040:	e011      	b.n	8003066 <str2hex+0x82>
		}
		else if(str[i] >= 'a' && str[i] <= 'f')
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	4413      	add	r3, r2
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b60      	cmp	r3, #96	; 0x60
 800304c:	d90b      	bls.n	8003066 <str2hex+0x82>
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b66      	cmp	r3, #102	; 0x66
 8003058:	d805      	bhi.n	8003066 <str2hex+0x82>
		{
			temp_data = str[i] - 87;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	4413      	add	r3, r2
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	3b57      	subs	r3, #87	; 0x57
 8003064:	73fb      	strb	r3, [r7, #15]
		}
		result |= temp_data << ((1 - i) * 4);
 8003066:	7bfa      	ldrb	r2, [r7, #15]
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f1c3 0301 	rsb	r3, r3, #1
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	b25a      	sxtb	r2, r3
 8003076:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800307a:	4313      	orrs	r3, r2
 800307c:	b25b      	sxtb	r3, r3
 800307e:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 2; i++)
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	3301      	adds	r3, #1
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	2b01      	cmp	r3, #1
 800308a:	ddb4      	ble.n	8002ff6 <str2hex+0x12>
	}
	return result;
 800308c:	7dfb      	ldrb	r3, [r7, #23]
}
 800308e:	4618      	mov	r0, r3
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <COMMAND_LINE_Handle>:
void COMMAND_LINE_Init()
{

}

void COMMAND_LINE_Handle(){
 800309c:	b580      	push	{r7, lr}
 800309e:	b08e      	sub	sp, #56	; 0x38
 80030a0:	af00      	add	r7, sp, #0
	if(cl_flag)
 80030a2:	4b2f      	ldr	r3, [pc, #188]	; (8003160 <COMMAND_LINE_Handle+0xc4>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d055      	beq.n	8003156 <COMMAND_LINE_Handle+0xba>
	{
		char *arg_list[10];
		uint8_t arg_num = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		char *temp_token = strtok((char *)cl_buf, " ");
 80030b0:	492c      	ldr	r1, [pc, #176]	; (8003164 <COMMAND_LINE_Handle+0xc8>)
 80030b2:	482d      	ldr	r0, [pc, #180]	; (8003168 <COMMAND_LINE_Handle+0xcc>)
 80030b4:	f000 fdd8 	bl	8003c68 <strtok>
 80030b8:	6338      	str	r0, [r7, #48]	; 0x30
		while(temp_token != NULL)
 80030ba:	e00f      	b.n	80030dc <COMMAND_LINE_Handle+0x40>
		{
			arg_list[arg_num++] = temp_token;
 80030bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	3338      	adds	r3, #56	; 0x38
 80030ca:	443b      	add	r3, r7
 80030cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ce:	f843 2c38 	str.w	r2, [r3, #-56]
			temp_token = strtok(NULL, " ");
 80030d2:	4924      	ldr	r1, [pc, #144]	; (8003164 <COMMAND_LINE_Handle+0xc8>)
 80030d4:	2000      	movs	r0, #0
 80030d6:	f000 fdc7 	bl	8003c68 <strtok>
 80030da:	6338      	str	r0, [r7, #48]	; 0x30
		while(temp_token != NULL)
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1ec      	bne.n	80030bc <COMMAND_LINE_Handle+0x20>
		}

		if(strstr(arg_list[0], "DATA") != NULL)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	4921      	ldr	r1, [pc, #132]	; (800316c <COMMAND_LINE_Handle+0xd0>)
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fda7 	bl	8003c3a <strstr>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d02b      	beq.n	800314a <COMMAND_LINE_Handle+0xae>
		{
			tx_frame_len = arg_num - 1;
 80030f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <COMMAND_LINE_Handle+0xd4>)
 80030fc:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < arg_num - 1; i++)
 80030fe:	2300      	movs	r3, #0
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003102:	e013      	b.n	800312c <COMMAND_LINE_Handle+0x90>
			{
				tx_frame_data[i] = str2hex(arg_list[i + 1]);
 8003104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003106:	3301      	adds	r3, #1
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	3338      	adds	r3, #56	; 0x38
 800310c:	443b      	add	r3, r7
 800310e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ff66 	bl	8002fe4 <str2hex>
 8003118:	4603      	mov	r3, r0
 800311a:	4619      	mov	r1, r3
 800311c:	4a15      	ldr	r2, [pc, #84]	; (8003174 <COMMAND_LINE_Handle+0xd8>)
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	4413      	add	r3, r2
 8003122:	460a      	mov	r2, r1
 8003124:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < arg_num - 1; i++)
 8003126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003128:	3301      	adds	r3, #1
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800312c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003130:	3b01      	subs	r3, #1
 8003132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003134:	429a      	cmp	r2, r3
 8003136:	dbe5      	blt.n	8003104 <COMMAND_LINE_Handle+0x68>
			}
			uint8_t temp_str[] = "OK\n";
 8003138:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <COMMAND_LINE_Handle+0xdc>)
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28
			HAL_UART_Transmit(&huart6, temp_str, 3, 100);
 800313c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003140:	2364      	movs	r3, #100	; 0x64
 8003142:	2203      	movs	r2, #3
 8003144:	480d      	ldr	r0, [pc, #52]	; (800317c <COMMAND_LINE_Handle+0xe0>)
 8003146:	f7fe fec0 	bl	8001eca <HAL_UART_Transmit>
		}

		cl_pointer = 0;
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <COMMAND_LINE_Handle+0xe4>)
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
		cl_flag = 0;
 8003150:	4b03      	ldr	r3, [pc, #12]	; (8003160 <COMMAND_LINE_Handle+0xc4>)
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
	}
}
 8003156:	bf00      	nop
 8003158:	3738      	adds	r7, #56	; 0x38
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000740 	.word	0x20000740
 8003164:	08005168 	.word	0x08005168
 8003168:	20000640 	.word	0x20000640
 800316c:	0800516c 	.word	0x0800516c
 8003170:	20000233 	.word	0x20000233
 8003174:	20000134 	.word	0x20000134
 8003178:	000a4b4f 	.word	0x000a4b4f
 800317c:	200000d0 	.word	0x200000d0
 8003180:	2000073f 	.word	0x2000073f

08003184 <COMMAND_LINE_Receive>:

void COMMAND_LINE_Receive(uint8_t rx_data)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	71fb      	strb	r3, [r7, #7]
	if(rx_data != '\n')
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	2b0a      	cmp	r3, #10
 8003192:	d00a      	beq.n	80031aa <COMMAND_LINE_Receive+0x26>
	{
		cl_buf[cl_pointer++] = rx_data;
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <COMMAND_LINE_Receive+0x44>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	b2d1      	uxtb	r1, r2
 800319c:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <COMMAND_LINE_Receive+0x44>)
 800319e:	7011      	strb	r1, [r2, #0]
 80031a0:	4619      	mov	r1, r3
 80031a2:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <COMMAND_LINE_Receive+0x48>)
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	5453      	strb	r3, [r2, r1]
	else
	{
		cl_buf[cl_pointer] = '\0';
		cl_flag = 1;
	}
}
 80031a8:	e008      	b.n	80031bc <COMMAND_LINE_Receive+0x38>
		cl_buf[cl_pointer] = '\0';
 80031aa:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <COMMAND_LINE_Receive+0x44>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <COMMAND_LINE_Receive+0x48>)
 80031b2:	2100      	movs	r1, #0
 80031b4:	5499      	strb	r1, [r3, r2]
		cl_flag = 1;
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <COMMAND_LINE_Receive+0x4c>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	2000073f 	.word	0x2000073f
 80031cc:	20000640 	.word	0x20000640
 80031d0:	20000740 	.word	0x20000740

080031d4 <FRAME_SYNC_Byte_Transmit>:
};

FRAME_SYNC_DATA_t FS_Data = {MY_ID};

__weak void FRAME_SYNC_Byte_Transmit(uint8_t tx_data)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&FRAME_SYNC_huart, &tx_data, 1, 100);
 80031de:	1df9      	adds	r1, r7, #7
 80031e0:	2364      	movs	r3, #100	; 0x64
 80031e2:	2201      	movs	r2, #1
 80031e4:	4803      	ldr	r0, [pc, #12]	; (80031f4 <FRAME_SYNC_Byte_Transmit+0x20>)
 80031e6:	f7fe fe70 	bl	8001eca <HAL_UART_Transmit>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	2000008c 	.word	0x2000008c

080031f8 <Rx_Reset>:

static void Rx_Reset()
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
	FS_Data.rx_checksum = 0xFFFFFFFF;
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <Rx_Reset+0x34>)
 80031fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003202:	609a      	str	r2, [r3, #8]
	FS_Data.rx_state = SEARCHING_STX;
 8003204:	4b09      	ldr	r3, [pc, #36]	; (800322c <Rx_Reset+0x34>)
 8003206:	2200      	movs	r2, #0
 8003208:	731a      	strb	r2, [r3, #12]
	FS_Data.rx_num_crc_byte = 0;
 800320a:	4b08      	ldr	r3, [pc, #32]	; (800322c <Rx_Reset+0x34>)
 800320c:	2200      	movs	r2, #0
 800320e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	FS_Data.rx_packet.crc32 = 0;
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <Rx_Reset+0x34>)
 8003214:	2200      	movs	r2, #0
 8003216:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	FS_Data.rx_pointer = 0;
 800321a:	4b04      	ldr	r3, [pc, #16]	; (800322c <Rx_Reset+0x34>)
 800321c:	2200      	movs	r2, #0
 800321e:	735a      	strb	r2, [r3, #13]
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20000744 	.word	0x20000744

08003230 <CRC_Update>:

static void CRC_Update(uint32_t *crc, uint8_t data)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	70fb      	strb	r3, [r7, #3]
	*crc = update_crc_32(*crc, data);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fe6b 	bl	8002f20 <update_crc_32>
 800324a:	4602      	mov	r2, r0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	601a      	str	r2, [r3, #0]
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <validate_packet>:

static void validate_packet()
{
 8003258:	b590      	push	{r4, r7, lr}
 800325a:	b085      	sub	sp, #20
 800325c:	af02      	add	r7, sp, #8
	if(FS_Data.rx_packet.temp_des_id != FS_Data.my_id) return;
 800325e:	4b56      	ldr	r3, [pc, #344]	; (80033b8 <validate_packet+0x160>)
 8003260:	7c5a      	ldrb	r2, [r3, #17]
 8003262:	4b55      	ldr	r3, [pc, #340]	; (80033b8 <validate_packet+0x160>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	f040 80a2 	bne.w	80033b0 <validate_packet+0x158>
	uint8_t temp_data = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	71fb      	strb	r3, [r7, #7]
	FS_Data.rx_checksum = ~FS_Data.rx_checksum;
 8003270:	4b51      	ldr	r3, [pc, #324]	; (80033b8 <validate_packet+0x160>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	43db      	mvns	r3, r3
 8003276:	4a50      	ldr	r2, [pc, #320]	; (80033b8 <validate_packet+0x160>)
 8003278:	6093      	str	r3, [r2, #8]
	if(FS_Data.rx_packet.crc32 != FS_Data.rx_checksum)
 800327a:	4b4f      	ldr	r3, [pc, #316]	; (80033b8 <validate_packet+0x160>)
 800327c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8003280:	4b4d      	ldr	r3, [pc, #308]	; (80033b8 <validate_packet+0x160>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	429a      	cmp	r2, r3
 8003286:	d016      	beq.n	80032b6 <validate_packet+0x5e>
	{
		temp_data = NACK;
 8003288:	23fe      	movs	r3, #254	; 0xfe
 800328a:	71fb      	strb	r3, [r7, #7]
		FRAME_SYNC_Transmit(FS_Data.rx_packet.src_id, FS_Data.rx_packet.src_id, 1, &temp_data, 1, 0);
 800328c:	4b4a      	ldr	r3, [pc, #296]	; (80033b8 <validate_packet+0x160>)
 800328e:	7c98      	ldrb	r0, [r3, #18]
 8003290:	4b49      	ldr	r3, [pc, #292]	; (80033b8 <validate_packet+0x160>)
 8003292:	7c99      	ldrb	r1, [r3, #18]
 8003294:	1dfb      	adds	r3, r7, #7
 8003296:	2200      	movs	r2, #0
 8003298:	9201      	str	r2, [sp, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	9200      	str	r2, [sp, #0]
 800329e:	2201      	movs	r2, #1
 80032a0:	f000 f890 	bl	80033c4 <FRAME_SYNC_Transmit>
		FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
 80032a4:	4b44      	ldr	r3, [pc, #272]	; (80033b8 <validate_packet+0x160>)
 80032a6:	7d1b      	ldrb	r3, [r3, #20]
 80032a8:	4619      	mov	r1, r3
 80032aa:	4844      	ldr	r0, [pc, #272]	; (80033bc <validate_packet+0x164>)
 80032ac:	f7fd f9ee 	bl	800068c <FRAME_SYNC_RxFailCallback>
		Rx_Reset();
 80032b0:	f7ff ffa2 	bl	80031f8 <Rx_Reset>
		return;
 80032b4:	e07d      	b.n	80033b2 <validate_packet+0x15a>
	}

	switch(FS_Data.rx_packet.buffer[0])
 80032b6:	4b40      	ldr	r3, [pc, #256]	; (80033b8 <validate_packet+0x160>)
 80032b8:	7d5b      	ldrb	r3, [r3, #21]
 80032ba:	2bfe      	cmp	r3, #254	; 0xfe
 80032bc:	d011      	beq.n	80032e2 <validate_packet+0x8a>
 80032be:	2bff      	cmp	r3, #255	; 0xff
 80032c0:	d12f      	bne.n	8003322 <validate_packet+0xca>
	{
		case ACK:	// Received ACK
			if(FS_Data.device_state == FRAME_SYNC_WAITING_ACK)
 80032c2:	4b3d      	ldr	r3, [pc, #244]	; (80033b8 <validate_packet+0x160>)
 80032c4:	785b      	ldrb	r3, [r3, #1]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d164      	bne.n	8003394 <validate_packet+0x13c>
			{
				FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 80032ca:	4b3b      	ldr	r3, [pc, #236]	; (80033b8 <validate_packet+0x160>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	705a      	strb	r2, [r3, #1]
				if(FS_Data.stored_packet.is_requiring_reply == 1)
 80032d0:	4b39      	ldr	r3, [pc, #228]	; (80033b8 <validate_packet+0x160>)
 80032d2:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d15c      	bne.n	8003394 <validate_packet+0x13c>
				{
					FS_Data.device_state = FRAME_SYNC_WAITING_REPLY;
 80032da:	4b37      	ldr	r3, [pc, #220]	; (80033b8 <validate_packet+0x160>)
 80032dc:	2202      	movs	r2, #2
 80032de:	705a      	strb	r2, [r3, #1]
				}
			}
			break;
 80032e0:	e058      	b.n	8003394 <validate_packet+0x13c>
		case NACK:	// Received NACK
			// Re-transmit
			if(FS_Data.device_state == FRAME_SYNC_WAITING_ACK)
 80032e2:	4b35      	ldr	r3, [pc, #212]	; (80033b8 <validate_packet+0x160>)
 80032e4:	785b      	ldrb	r3, [r3, #1]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d156      	bne.n	8003398 <validate_packet+0x140>
			{
				FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 80032ea:	4b33      	ldr	r3, [pc, #204]	; (80033b8 <validate_packet+0x160>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	705a      	strb	r2, [r3, #1]
				FRAME_SYNC_Transmit(FS_Data.stored_packet.final_des_id, FS_Data.stored_packet.temp_des_id, FS_Data.stored_packet.time_to_live - 1,
 80032f0:	4b31      	ldr	r3, [pc, #196]	; (80033b8 <validate_packet+0x160>)
 80032f2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80032f6:	4b30      	ldr	r3, [pc, #192]	; (80033b8 <validate_packet+0x160>)
 80032f8:	f893 1129 	ldrb.w	r1, [r3, #297]	; 0x129
 80032fc:	4b2e      	ldr	r3, [pc, #184]	; (80033b8 <validate_packet+0x160>)
 80032fe:	f993 312b 	ldrsb.w	r3, [r3, #299]	; 0x12b
 8003302:	b2db      	uxtb	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b2dc      	uxtb	r4, r3
 8003308:	4b2b      	ldr	r3, [pc, #172]	; (80033b8 <validate_packet+0x160>)
 800330a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800330e:	4a2a      	ldr	r2, [pc, #168]	; (80033b8 <validate_packet+0x160>)
 8003310:	f892 2230 	ldrb.w	r2, [r2, #560]	; 0x230
 8003314:	9201      	str	r2, [sp, #4]
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <validate_packet+0x168>)
 800331a:	4622      	mov	r2, r4
 800331c:	f000 f852 	bl	80033c4 <FRAME_SYNC_Transmit>
						FS_Data.stored_packet.buffer, FS_Data.stored_packet.length, FS_Data.stored_packet.is_requiring_reply);
			}
			break;
 8003320:	e03a      	b.n	8003398 <validate_packet+0x140>
		default:	// Received normal data
			if(FS_Data.rx_packet.temp_des_id == FS_Data.my_id)
 8003322:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <validate_packet+0x160>)
 8003324:	7c5a      	ldrb	r2, [r3, #17]
 8003326:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <validate_packet+0x160>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d136      	bne.n	800339c <validate_packet+0x144>
			{
				if(FS_Data.device_state == FRAME_SYNC_WAITING_REPLY)
 800332e:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <validate_packet+0x160>)
 8003330:	785b      	ldrb	r3, [r3, #1]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d102      	bne.n	800333c <validate_packet+0xe4>
				{
					FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <validate_packet+0x160>)
 8003338:	2200      	movs	r2, #0
 800333a:	705a      	strb	r2, [r3, #1]
				}
				temp_data = ACK;
 800333c:	23ff      	movs	r3, #255	; 0xff
 800333e:	71fb      	strb	r3, [r7, #7]
				FRAME_SYNC_Transmit(FS_Data.rx_packet.src_id, FS_Data.rx_packet.src_id, 1, &temp_data, 1, 0);
 8003340:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <validate_packet+0x160>)
 8003342:	7c98      	ldrb	r0, [r3, #18]
 8003344:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <validate_packet+0x160>)
 8003346:	7c99      	ldrb	r1, [r3, #18]
 8003348:	1dfb      	adds	r3, r7, #7
 800334a:	2200      	movs	r2, #0
 800334c:	9201      	str	r2, [sp, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	9200      	str	r2, [sp, #0]
 8003352:	2201      	movs	r2, #1
 8003354:	f000 f836 	bl	80033c4 <FRAME_SYNC_Transmit>
				if(FS_Data.rx_packet.final_des_id != FS_Data.my_id)
 8003358:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <validate_packet+0x160>)
 800335a:	7c1a      	ldrb	r2, [r3, #16]
 800335c:	4b16      	ldr	r3, [pc, #88]	; (80033b8 <validate_packet+0x160>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d01b      	beq.n	800339c <validate_packet+0x144>
				{
					FRAME_SYNC_Transmit(FS_Data.rx_packet.final_des_id, FS_Data.rx_packet.temp_des_id + 1, FS_Data.rx_packet.time_to_live - 1,
 8003364:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <validate_packet+0x160>)
 8003366:	7c18      	ldrb	r0, [r3, #16]
 8003368:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <validate_packet+0x160>)
 800336a:	7c5b      	ldrb	r3, [r3, #17]
 800336c:	3301      	adds	r3, #1
 800336e:	b2d9      	uxtb	r1, r3
 8003370:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <validate_packet+0x160>)
 8003372:	f993 3013 	ldrsb.w	r3, [r3, #19]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b2dc      	uxtb	r4, r3
 800337c:	4b0e      	ldr	r3, [pc, #56]	; (80033b8 <validate_packet+0x160>)
 800337e:	7d1b      	ldrb	r3, [r3, #20]
 8003380:	4a0d      	ldr	r2, [pc, #52]	; (80033b8 <validate_packet+0x160>)
 8003382:	f892 2230 	ldrb.w	r2, [r2, #560]	; 0x230
 8003386:	9201      	str	r2, [sp, #4]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <validate_packet+0x164>)
 800338c:	4622      	mov	r2, r4
 800338e:	f000 f819 	bl	80033c4 <FRAME_SYNC_Transmit>
							FS_Data.rx_packet.buffer, FS_Data.rx_packet.length, FS_Data.stored_packet.is_requiring_reply);
				}
			}

			break;
 8003392:	e003      	b.n	800339c <validate_packet+0x144>
			break;
 8003394:	bf00      	nop
 8003396:	e002      	b.n	800339e <validate_packet+0x146>
			break;
 8003398:	bf00      	nop
 800339a:	e000      	b.n	800339e <validate_packet+0x146>
			break;
 800339c:	bf00      	nop
	}
	FRAME_SYNC_RxCpltCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <validate_packet+0x160>)
 80033a0:	7d1b      	ldrb	r3, [r3, #20]
 80033a2:	4619      	mov	r1, r3
 80033a4:	4805      	ldr	r0, [pc, #20]	; (80033bc <validate_packet+0x164>)
 80033a6:	f7fd f913 	bl	80005d0 <FRAME_SYNC_RxCpltCallback>
	Rx_Reset();
 80033aa:	f7ff ff25 	bl	80031f8 <Rx_Reset>
 80033ae:	e000      	b.n	80033b2 <validate_packet+0x15a>
	if(FS_Data.rx_packet.temp_des_id != FS_Data.my_id) return;
 80033b0:	bf00      	nop
}
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd90      	pop	{r4, r7, pc}
 80033b8:	20000744 	.word	0x20000744
 80033bc:	20000759 	.word	0x20000759
 80033c0:	20000871 	.word	0x20000871

080033c4 <FRAME_SYNC_Transmit>:
{
	FS_Data = *p_new_data;
}

void FRAME_SYNC_Transmit(uint8_t final_des_id, uint8_t temp_des_id, uint8_t time_to_live, uint8_t *tx_frame, uint8_t size, uint8_t is_requiring_reply)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	4603      	mov	r3, r0
 80033ce:	71fb      	strb	r3, [r7, #7]
 80033d0:	460b      	mov	r3, r1
 80033d2:	71bb      	strb	r3, [r7, #6]
 80033d4:	4613      	mov	r3, r2
 80033d6:	717b      	strb	r3, [r7, #5]
	if(FS_Data.device_state != FRAME_SYNC_READY_TO_TRANSMIT) return;
 80033d8:	4b66      	ldr	r3, [pc, #408]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 80033da:	785b      	ldrb	r3, [r3, #1]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f040 80c3 	bne.w	8003568 <FRAME_SYNC_Transmit+0x1a4>
	if(time_to_live <= 0) return;
 80033e2:	797b      	ldrb	r3, [r7, #5]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 80c1 	beq.w	800356c <FRAME_SYNC_Transmit+0x1a8>
	FS_Data.tx_checksum = 0xFFFFFFFF;
 80033ea:	4b62      	ldr	r3, [pc, #392]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 80033ec:	f04f 32ff 	mov.w	r2, #4294967295
 80033f0:	605a      	str	r2, [r3, #4]

	// Transmit STX
	FRAME_SYNC_Byte_Transmit(STX);
 80033f2:	2002      	movs	r0, #2
 80033f4:	f7ff feee 	bl	80031d4 <FRAME_SYNC_Byte_Transmit>

	// Transmit final destination device id
	CRC_Update(&FS_Data.tx_checksum, final_des_id);
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	4619      	mov	r1, r3
 80033fc:	485e      	ldr	r0, [pc, #376]	; (8003578 <FRAME_SYNC_Transmit+0x1b4>)
 80033fe:	f7ff ff17 	bl	8003230 <CRC_Update>
	FRAME_SYNC_Byte_Transmit(final_des_id);
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fee5 	bl	80031d4 <FRAME_SYNC_Byte_Transmit>

	// Transmit temporary destination device id
	CRC_Update(&FS_Data.tx_checksum, temp_des_id);
 800340a:	79bb      	ldrb	r3, [r7, #6]
 800340c:	4619      	mov	r1, r3
 800340e:	485a      	ldr	r0, [pc, #360]	; (8003578 <FRAME_SYNC_Transmit+0x1b4>)
 8003410:	f7ff ff0e 	bl	8003230 <CRC_Update>
	FRAME_SYNC_Byte_Transmit(temp_des_id);
 8003414:	79bb      	ldrb	r3, [r7, #6]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fedc 	bl	80031d4 <FRAME_SYNC_Byte_Transmit>

	// Transmit source device id
	CRC_Update(&FS_Data.tx_checksum, FS_Data.my_id);
 800341c:	4b55      	ldr	r3, [pc, #340]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	4619      	mov	r1, r3
 8003422:	4855      	ldr	r0, [pc, #340]	; (8003578 <FRAME_SYNC_Transmit+0x1b4>)
 8003424:	f7ff ff04 	bl	8003230 <CRC_Update>
	FRAME_SYNC_Byte_Transmit(FS_Data.my_id);
 8003428:	4b52      	ldr	r3, [pc, #328]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff fed1 	bl	80031d4 <FRAME_SYNC_Byte_Transmit>

	// Transmit time to live
	CRC_Update(&FS_Data.tx_checksum, time_to_live);
 8003432:	797b      	ldrb	r3, [r7, #5]
 8003434:	4619      	mov	r1, r3
 8003436:	4850      	ldr	r0, [pc, #320]	; (8003578 <FRAME_SYNC_Transmit+0x1b4>)
 8003438:	f7ff fefa 	bl	8003230 <CRC_Update>
	FRAME_SYNC_Byte_Transmit(time_to_live);
 800343c:	797b      	ldrb	r3, [r7, #5]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fec8 	bl	80031d4 <FRAME_SYNC_Byte_Transmit>

	// Transmit data length
	CRC_Update(&FS_Data.tx_checksum, size);
 8003444:	7e3b      	ldrb	r3, [r7, #24]
 8003446:	4619      	mov	r1, r3
 8003448:	484b      	ldr	r0, [pc, #300]	; (8003578 <FRAME_SYNC_Transmit+0x1b4>)
 800344a:	f7ff fef1 	bl	8003230 <CRC_Update>
	FRAME_SYNC_Byte_Transmit(size);
 800344e:	7e3b      	ldrb	r3, [r7, #24]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff febf 	bl	80031d4 <FRAME_SYNC_Byte_Transmit>

	// Transmit data
	for(int i = 0; i < size; i++)
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	e01c      	b.n	8003496 <FRAME_SYNC_Transmit+0xd2>
	{
		CRC_Update(&FS_Data.tx_checksum, tx_frame[i]);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	4413      	add	r3, r2
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	4619      	mov	r1, r3
 8003466:	4844      	ldr	r0, [pc, #272]	; (8003578 <FRAME_SYNC_Transmit+0x1b4>)
 8003468:	f7ff fee2 	bl	8003230 <CRC_Update>
		FRAME_SYNC_Byte_Transmit(tx_frame[i]);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	4413      	add	r3, r2
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fead 	bl	80031d4 <FRAME_SYNC_Byte_Transmit>
		FS_Data.stored_packet.buffer[i] = tx_frame[i];
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	4413      	add	r3, r2
 8003480:	7819      	ldrb	r1, [r3, #0]
 8003482:	4a3c      	ldr	r2, [pc, #240]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4413      	add	r3, r2
 8003488:	f203 132d 	addw	r3, r3, #301	; 0x12d
 800348c:	460a      	mov	r2, r1
 800348e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3301      	adds	r3, #1
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	7e3b      	ldrb	r3, [r7, #24]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	429a      	cmp	r2, r3
 800349c:	dbde      	blt.n	800345c <FRAME_SYNC_Transmit+0x98>
	}

	// Transmit crc
	FS_Data.tx_checksum = ~FS_Data.tx_checksum;
 800349e:	4b35      	ldr	r3, [pc, #212]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	4a33      	ldr	r2, [pc, #204]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 80034a6:	6053      	str	r3, [r2, #4]
	FRAME_SYNC_Byte_Transmit(*((uint8_t *)&FS_Data.tx_checksum + 0));
 80034a8:	4b33      	ldr	r3, [pc, #204]	; (8003578 <FRAME_SYNC_Transmit+0x1b4>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fe91 	bl	80031d4 <FRAME_SYNC_Byte_Transmit>
	FRAME_SYNC_Byte_Transmit(*((uint8_t *)&FS_Data.tx_checksum + 1));
 80034b2:	4b32      	ldr	r3, [pc, #200]	; (800357c <FRAME_SYNC_Transmit+0x1b8>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fe8c 	bl	80031d4 <FRAME_SYNC_Byte_Transmit>
	FRAME_SYNC_Byte_Transmit(*((uint8_t *)&FS_Data.tx_checksum + 2));
 80034bc:	4b30      	ldr	r3, [pc, #192]	; (8003580 <FRAME_SYNC_Transmit+0x1bc>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff fe87 	bl	80031d4 <FRAME_SYNC_Byte_Transmit>
	FRAME_SYNC_Byte_Transmit(*((uint8_t *)&FS_Data.tx_checksum + 3));
 80034c6:	4b2f      	ldr	r3, [pc, #188]	; (8003584 <FRAME_SYNC_Transmit+0x1c0>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fe82 	bl	80031d4 <FRAME_SYNC_Byte_Transmit>

	// Transmit ETX
	FRAME_SYNC_Byte_Transmit(ETX);
 80034d0:	2003      	movs	r0, #3
 80034d2:	f7ff fe7f 	bl	80031d4 <FRAME_SYNC_Byte_Transmit>

	if(size != 1 && *tx_frame != ACK && *tx_frame != NACK)
 80034d6:	7e3b      	ldrb	r3, [r7, #24]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d03e      	beq.n	800355a <FRAME_SYNC_Transmit+0x196>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2bff      	cmp	r3, #255	; 0xff
 80034e2:	d03a      	beq.n	800355a <FRAME_SYNC_Transmit+0x196>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2bfe      	cmp	r3, #254	; 0xfe
 80034ea:	d036      	beq.n	800355a <FRAME_SYNC_Transmit+0x196>
	{
		FS_Data.device_state = FRAME_SYNC_WAITING_ACK;
 80034ec:	4b21      	ldr	r3, [pc, #132]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	705a      	strb	r2, [r3, #1]
		FS_Data.stored_packet.final_des_id = final_des_id;
 80034f2:	4a20      	ldr	r2, [pc, #128]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
		FS_Data.stored_packet.temp_des_id = temp_des_id;
 80034fa:	4a1e      	ldr	r2, [pc, #120]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 80034fc:	79bb      	ldrb	r3, [r7, #6]
 80034fe:	f882 3129 	strb.w	r3, [r2, #297]	; 0x129
		FS_Data.stored_packet.src_id = FS_Data.my_id;
 8003502:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 8003504:	781a      	ldrb	r2, [r3, #0]
 8003506:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 8003508:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
		FS_Data.stored_packet.time_to_live = time_to_live;
 800350c:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8003510:	4b18      	ldr	r3, [pc, #96]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 8003512:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
		FS_Data.stored_packet.length = size;
 8003516:	4a17      	ldr	r2, [pc, #92]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 8003518:	7e3b      	ldrb	r3, [r7, #24]
 800351a:	f882 312c 	strb.w	r3, [r2, #300]	; 0x12c
		for(int i = 0; i < size; i++)
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	e00d      	b.n	8003540 <FRAME_SYNC_Transmit+0x17c>
		{
			FS_Data.stored_packet.buffer[i] = tx_frame[i];
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	4413      	add	r3, r2
 800352a:	7819      	ldrb	r1, [r3, #0]
 800352c:	4a11      	ldr	r2, [pc, #68]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	4413      	add	r3, r2
 8003532:	f203 132d 	addw	r3, r3, #301	; 0x12d
 8003536:	460a      	mov	r2, r1
 8003538:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < size; i++)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	3301      	adds	r3, #1
 800353e:	60bb      	str	r3, [r7, #8]
 8003540:	7e3b      	ldrb	r3, [r7, #24]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	429a      	cmp	r2, r3
 8003546:	dbed      	blt.n	8003524 <FRAME_SYNC_Transmit+0x160>
		}
		FS_Data.stored_packet.crc32 = FS_Data.tx_checksum;
 8003548:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a09      	ldr	r2, [pc, #36]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 800354e:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
		FS_Data.stored_packet.is_requiring_reply = is_requiring_reply;
 8003552:	4a08      	ldr	r2, [pc, #32]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 8003554:	7f3b      	ldrb	r3, [r7, #28]
 8003556:	f882 3230 	strb.w	r3, [r2, #560]	; 0x230
	}

	FS_Data.last_transmit_frame_timer = HAL_GetTick();
 800355a:	f7fd fcab 	bl	8000eb4 <HAL_GetTick>
 800355e:	4603      	mov	r3, r0
 8003560:	4a04      	ldr	r2, [pc, #16]	; (8003574 <FRAME_SYNC_Transmit+0x1b0>)
 8003562:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
 8003566:	e002      	b.n	800356e <FRAME_SYNC_Transmit+0x1aa>
	if(FS_Data.device_state != FRAME_SYNC_READY_TO_TRANSMIT) return;
 8003568:	bf00      	nop
 800356a:	e000      	b.n	800356e <FRAME_SYNC_Transmit+0x1aa>
	if(time_to_live <= 0) return;
 800356c:	bf00      	nop
}
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	20000744 	.word	0x20000744
 8003578:	20000748 	.word	0x20000748
 800357c:	20000749 	.word	0x20000749
 8003580:	2000074a 	.word	0x2000074a
 8003584:	2000074b 	.word	0x2000074b

08003588 <FRAME_SYNC_Receive>:

void FRAME_SYNC_Receive(uint8_t rx_data)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	71fb      	strb	r3, [r7, #7]
	switch(FS_Data.rx_state)
 8003592:	4b61      	ldr	r3, [pc, #388]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 8003594:	7b1b      	ldrb	r3, [r3, #12]
 8003596:	2b08      	cmp	r3, #8
 8003598:	f200 80af 	bhi.w	80036fa <FRAME_SYNC_Receive+0x172>
 800359c:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <FRAME_SYNC_Receive+0x1c>)
 800359e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a2:	bf00      	nop
 80035a4:	080035c9 	.word	0x080035c9
 80035a8:	080035f1 	.word	0x080035f1
 80035ac:	08003609 	.word	0x08003609
 80035b0:	08003621 	.word	0x08003621
 80035b4:	08003639 	.word	0x08003639
 80035b8:	08003653 	.word	0x08003653
 80035bc:	0800366b 	.word	0x0800366b
 80035c0:	0800369f 	.word	0x0800369f
 80035c4:	080036dd 	.word	0x080036dd
	{
		case SEARCHING_STX:
			if(rx_data == STX)
 80035c8:	79fb      	ldrb	r3, [r7, #7]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d107      	bne.n	80035de <FRAME_SYNC_Receive+0x56>
			{
				FS_Data.rx_checksum = 0xFFFFFFFF;
 80035ce:	4b52      	ldr	r3, [pc, #328]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 80035d0:	f04f 32ff 	mov.w	r2, #4294967295
 80035d4:	609a      	str	r2, [r3, #8]
				FS_Data.rx_state = RECEIVING_FINAL_DES_ID;
 80035d6:	4b50      	ldr	r3, [pc, #320]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 80035d8:	2201      	movs	r2, #1
 80035da:	731a      	strb	r2, [r3, #12]
			else
			{
				Rx_Reset();
				FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
			}
			break;
 80035dc:	e092      	b.n	8003704 <FRAME_SYNC_Receive+0x17c>
				Rx_Reset();
 80035de:	f7ff fe0b 	bl	80031f8 <Rx_Reset>
				FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
 80035e2:	4b4d      	ldr	r3, [pc, #308]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 80035e4:	7d1b      	ldrb	r3, [r3, #20]
 80035e6:	4619      	mov	r1, r3
 80035e8:	484c      	ldr	r0, [pc, #304]	; (800371c <FRAME_SYNC_Receive+0x194>)
 80035ea:	f7fd f84f 	bl	800068c <FRAME_SYNC_RxFailCallback>
			break;
 80035ee:	e089      	b.n	8003704 <FRAME_SYNC_Receive+0x17c>
		case RECEIVING_FINAL_DES_ID:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	4619      	mov	r1, r3
 80035f4:	484a      	ldr	r0, [pc, #296]	; (8003720 <FRAME_SYNC_Receive+0x198>)
 80035f6:	f7ff fe1b 	bl	8003230 <CRC_Update>
			FS_Data.rx_packet.final_des_id = rx_data;
 80035fa:	4a47      	ldr	r2, [pc, #284]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	7413      	strb	r3, [r2, #16]
			FS_Data.rx_state = RECEIVING_TEMP_DES_ID;
 8003600:	4b45      	ldr	r3, [pc, #276]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 8003602:	2202      	movs	r2, #2
 8003604:	731a      	strb	r2, [r3, #12]
			break;
 8003606:	e07d      	b.n	8003704 <FRAME_SYNC_Receive+0x17c>
		case RECEIVING_TEMP_DES_ID:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	4619      	mov	r1, r3
 800360c:	4844      	ldr	r0, [pc, #272]	; (8003720 <FRAME_SYNC_Receive+0x198>)
 800360e:	f7ff fe0f 	bl	8003230 <CRC_Update>
			FS_Data.rx_packet.temp_des_id = rx_data;
 8003612:	4a41      	ldr	r2, [pc, #260]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	7453      	strb	r3, [r2, #17]
			FS_Data.rx_state = RECEIVING_SRC_ID;
 8003618:	4b3f      	ldr	r3, [pc, #252]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 800361a:	2203      	movs	r2, #3
 800361c:	731a      	strb	r2, [r3, #12]
			break;
 800361e:	e071      	b.n	8003704 <FRAME_SYNC_Receive+0x17c>
		case RECEIVING_SRC_ID:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	4619      	mov	r1, r3
 8003624:	483e      	ldr	r0, [pc, #248]	; (8003720 <FRAME_SYNC_Receive+0x198>)
 8003626:	f7ff fe03 	bl	8003230 <CRC_Update>
			FS_Data.rx_packet.src_id = rx_data;
 800362a:	4a3b      	ldr	r2, [pc, #236]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	7493      	strb	r3, [r2, #18]
			FS_Data.rx_state = RECEIVING_TIME_TO_LIVE;
 8003630:	4b39      	ldr	r3, [pc, #228]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 8003632:	2204      	movs	r2, #4
 8003634:	731a      	strb	r2, [r3, #12]
			break;
 8003636:	e065      	b.n	8003704 <FRAME_SYNC_Receive+0x17c>
		case RECEIVING_TIME_TO_LIVE:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	4619      	mov	r1, r3
 800363c:	4838      	ldr	r0, [pc, #224]	; (8003720 <FRAME_SYNC_Receive+0x198>)
 800363e:	f7ff fdf7 	bl	8003230 <CRC_Update>
			FS_Data.rx_packet.time_to_live = rx_data;
 8003642:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003646:	4b34      	ldr	r3, [pc, #208]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 8003648:	74da      	strb	r2, [r3, #19]
			FS_Data.rx_state = RECEIVING_DATA_LEN;
 800364a:	4b33      	ldr	r3, [pc, #204]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 800364c:	2205      	movs	r2, #5
 800364e:	731a      	strb	r2, [r3, #12]
			break;
 8003650:	e058      	b.n	8003704 <FRAME_SYNC_Receive+0x17c>
		case RECEIVING_DATA_LEN:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	4619      	mov	r1, r3
 8003656:	4832      	ldr	r0, [pc, #200]	; (8003720 <FRAME_SYNC_Receive+0x198>)
 8003658:	f7ff fdea 	bl	8003230 <CRC_Update>
			FS_Data.rx_packet.length = rx_data;
 800365c:	4a2e      	ldr	r2, [pc, #184]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	7513      	strb	r3, [r2, #20]
			FS_Data.rx_state = RECEIVING_DATA;
 8003662:	4b2d      	ldr	r3, [pc, #180]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 8003664:	2206      	movs	r2, #6
 8003666:	731a      	strb	r2, [r3, #12]
			break;
 8003668:	e04c      	b.n	8003704 <FRAME_SYNC_Receive+0x17c>
		case RECEIVING_DATA:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	4619      	mov	r1, r3
 800366e:	482c      	ldr	r0, [pc, #176]	; (8003720 <FRAME_SYNC_Receive+0x198>)
 8003670:	f7ff fdde 	bl	8003230 <CRC_Update>
			FS_Data.rx_packet.buffer[FS_Data.rx_pointer++] = rx_data;
 8003674:	4b28      	ldr	r3, [pc, #160]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 8003676:	7b5b      	ldrb	r3, [r3, #13]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	b2d1      	uxtb	r1, r2
 800367c:	4a26      	ldr	r2, [pc, #152]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 800367e:	7351      	strb	r1, [r2, #13]
 8003680:	461a      	mov	r2, r3
 8003682:	4b25      	ldr	r3, [pc, #148]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 8003684:	4413      	add	r3, r2
 8003686:	79fa      	ldrb	r2, [r7, #7]
 8003688:	755a      	strb	r2, [r3, #21]
			if(FS_Data.rx_pointer == FS_Data.rx_packet.length)
 800368a:	4b23      	ldr	r3, [pc, #140]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 800368c:	7b5a      	ldrb	r2, [r3, #13]
 800368e:	4b22      	ldr	r3, [pc, #136]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 8003690:	7d1b      	ldrb	r3, [r3, #20]
 8003692:	429a      	cmp	r2, r3
 8003694:	d133      	bne.n	80036fe <FRAME_SYNC_Receive+0x176>
			{
				FS_Data.rx_state = RECEIVING_CRC;
 8003696:	4b20      	ldr	r3, [pc, #128]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 8003698:	2207      	movs	r2, #7
 800369a:	731a      	strb	r2, [r3, #12]
			}
			break;
 800369c:	e02f      	b.n	80036fe <FRAME_SYNC_Receive+0x176>
		case RECEIVING_CRC:
			FS_Data.rx_packet.crc32 |= (uint32_t)rx_data << ((FS_Data.rx_num_crc_byte) * 8);
 800369e:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 80036a0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 80036a4:	79f9      	ldrb	r1, [r7, #7]
 80036a6:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 80036a8:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	4313      	orrs	r3, r2
 80036b4:	4a18      	ldr	r2, [pc, #96]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 80036b6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
			FS_Data.rx_num_crc_byte++;
 80036ba:	4b17      	ldr	r3, [pc, #92]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 80036bc:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80036c0:	3301      	adds	r3, #1
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	4b14      	ldr	r3, [pc, #80]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 80036c6:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
			if(FS_Data.rx_num_crc_byte == 4)
 80036ca:	4b13      	ldr	r3, [pc, #76]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 80036cc:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d116      	bne.n	8003702 <FRAME_SYNC_Receive+0x17a>
			{
				FS_Data.rx_state = RECEIVING_ETX;
 80036d4:	4b10      	ldr	r3, [pc, #64]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 80036d6:	2208      	movs	r2, #8
 80036d8:	731a      	strb	r2, [r3, #12]
			}
			break;
 80036da:	e012      	b.n	8003702 <FRAME_SYNC_Receive+0x17a>
		case RECEIVING_ETX:
			if(rx_data == ETX)
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d102      	bne.n	80036e8 <FRAME_SYNC_Receive+0x160>
			{
				validate_packet();
 80036e2:	f7ff fdb9 	bl	8003258 <validate_packet>
			else
			{
				Rx_Reset();
				FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
			}
			break;
 80036e6:	e00d      	b.n	8003704 <FRAME_SYNC_Receive+0x17c>
				Rx_Reset();
 80036e8:	f7ff fd86 	bl	80031f8 <Rx_Reset>
				FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 80036ee:	7d1b      	ldrb	r3, [r3, #20]
 80036f0:	4619      	mov	r1, r3
 80036f2:	480a      	ldr	r0, [pc, #40]	; (800371c <FRAME_SYNC_Receive+0x194>)
 80036f4:	f7fc ffca 	bl	800068c <FRAME_SYNC_RxFailCallback>
			break;
 80036f8:	e004      	b.n	8003704 <FRAME_SYNC_Receive+0x17c>
		default:
			break;
 80036fa:	bf00      	nop
 80036fc:	e002      	b.n	8003704 <FRAME_SYNC_Receive+0x17c>
			break;
 80036fe:	bf00      	nop
 8003700:	e000      	b.n	8003704 <FRAME_SYNC_Receive+0x17c>
			break;
 8003702:	bf00      	nop
	}

	FS_Data.last_receive_byte_timer = HAL_GetTick();
 8003704:	f7fd fbd6 	bl	8000eb4 <HAL_GetTick>
 8003708:	4603      	mov	r3, r0
 800370a:	4a03      	ldr	r2, [pc, #12]	; (8003718 <FRAME_SYNC_Receive+0x190>)
 800370c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
}
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20000744 	.word	0x20000744
 800371c:	20000759 	.word	0x20000759
 8003720:	2000074c 	.word	0x2000074c

08003724 <FRAME_SYNC_Handle>:

void FRAME_SYNC_Handle(){
 8003724:	b590      	push	{r4, r7, lr}
 8003726:	b083      	sub	sp, #12
 8003728:	af02      	add	r7, sp, #8
	if(FS_Data.rx_state != SEARCHING_STX && (HAL_GetTick() - FS_Data.last_receive_byte_timer > WAITING_NEXT_BYTE_TIME))
 800372a:	4b30      	ldr	r3, [pc, #192]	; (80037ec <FRAME_SYNC_Handle+0xc8>)
 800372c:	7b1b      	ldrb	r3, [r3, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d012      	beq.n	8003758 <FRAME_SYNC_Handle+0x34>
 8003732:	f7fd fbbf 	bl	8000eb4 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	4b2c      	ldr	r3, [pc, #176]	; (80037ec <FRAME_SYNC_Handle+0xc8>)
 800373a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	f242 7210 	movw	r2, #10000	; 0x2710
 8003744:	4293      	cmp	r3, r2
 8003746:	d907      	bls.n	8003758 <FRAME_SYNC_Handle+0x34>
	{
		Rx_Reset();
 8003748:	f7ff fd56 	bl	80031f8 <Rx_Reset>
		FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
 800374c:	4b27      	ldr	r3, [pc, #156]	; (80037ec <FRAME_SYNC_Handle+0xc8>)
 800374e:	7d1b      	ldrb	r3, [r3, #20]
 8003750:	4619      	mov	r1, r3
 8003752:	4827      	ldr	r0, [pc, #156]	; (80037f0 <FRAME_SYNC_Handle+0xcc>)
 8003754:	f7fc ff9a 	bl	800068c <FRAME_SYNC_RxFailCallback>
	}

	if(FS_Data.device_state == FRAME_SYNC_WAITING_ACK && (HAL_GetTick() - FS_Data.last_transmit_frame_timer > WAITING_ACK_TIME))
 8003758:	4b24      	ldr	r3, [pc, #144]	; (80037ec <FRAME_SYNC_Handle+0xc8>)
 800375a:	785b      	ldrb	r3, [r3, #1]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d12e      	bne.n	80037be <FRAME_SYNC_Handle+0x9a>
 8003760:	f7fd fba8 	bl	8000eb4 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	4b21      	ldr	r3, [pc, #132]	; (80037ec <FRAME_SYNC_Handle+0xc8>)
 8003768:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003772:	4293      	cmp	r3, r2
 8003774:	d923      	bls.n	80037be <FRAME_SYNC_Handle+0x9a>
	{
		if(FS_Data.stored_packet.time_to_live - 1 != 0)
 8003776:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <FRAME_SYNC_Handle+0xc8>)
 8003778:	f993 312b 	ldrsb.w	r3, [r3, #299]	; 0x12b
 800377c:	2b01      	cmp	r3, #1
 800377e:	d01b      	beq.n	80037b8 <FRAME_SYNC_Handle+0x94>
		{
			FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 8003780:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <FRAME_SYNC_Handle+0xc8>)
 8003782:	2200      	movs	r2, #0
 8003784:	705a      	strb	r2, [r3, #1]
			FRAME_SYNC_Transmit(FS_Data.stored_packet.final_des_id, FS_Data.stored_packet.temp_des_id, FS_Data.stored_packet.time_to_live - 1,
 8003786:	4b19      	ldr	r3, [pc, #100]	; (80037ec <FRAME_SYNC_Handle+0xc8>)
 8003788:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800378c:	4b17      	ldr	r3, [pc, #92]	; (80037ec <FRAME_SYNC_Handle+0xc8>)
 800378e:	f893 1129 	ldrb.w	r1, [r3, #297]	; 0x129
 8003792:	4b16      	ldr	r3, [pc, #88]	; (80037ec <FRAME_SYNC_Handle+0xc8>)
 8003794:	f993 312b 	ldrsb.w	r3, [r3, #299]	; 0x12b
 8003798:	b2db      	uxtb	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b2dc      	uxtb	r4, r3
 800379e:	4b13      	ldr	r3, [pc, #76]	; (80037ec <FRAME_SYNC_Handle+0xc8>)
 80037a0:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80037a4:	4a11      	ldr	r2, [pc, #68]	; (80037ec <FRAME_SYNC_Handle+0xc8>)
 80037a6:	f892 2230 	ldrb.w	r2, [r2, #560]	; 0x230
 80037aa:	9201      	str	r2, [sp, #4]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <FRAME_SYNC_Handle+0xd0>)
 80037b0:	4622      	mov	r2, r4
 80037b2:	f7ff fe07 	bl	80033c4 <FRAME_SYNC_Transmit>
 80037b6:	e002      	b.n	80037be <FRAME_SYNC_Handle+0x9a>
					FS_Data.stored_packet.buffer, FS_Data.stored_packet.length, FS_Data.stored_packet.is_requiring_reply);
		}
		else
		{
			FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 80037b8:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <FRAME_SYNC_Handle+0xc8>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	705a      	strb	r2, [r3, #1]
		}
	}

	if(FS_Data.device_state == FRAME_SYNC_WAITING_REPLY && (HAL_GetTick() - FS_Data.last_transmit_frame_timer > WAITING_REPLY_TIME))
 80037be:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <FRAME_SYNC_Handle+0xc8>)
 80037c0:	785b      	ldrb	r3, [r3, #1]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d10d      	bne.n	80037e2 <FRAME_SYNC_Handle+0xbe>
 80037c6:	f7fd fb75 	bl	8000eb4 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	4b07      	ldr	r3, [pc, #28]	; (80037ec <FRAME_SYNC_Handle+0xc8>)
 80037ce:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80037d8:	4293      	cmp	r3, r2
 80037da:	d902      	bls.n	80037e2 <FRAME_SYNC_Handle+0xbe>
	{
		FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <FRAME_SYNC_Handle+0xc8>)
 80037de:	2200      	movs	r2, #0
 80037e0:	705a      	strb	r2, [r3, #1]
	}
}
 80037e2:	bf00      	nop
 80037e4:	3704      	adds	r7, #4
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd90      	pop	{r4, r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000744 	.word	0x20000744
 80037f0:	20000759 	.word	0x20000759
 80037f4:	20000871 	.word	0x20000871

080037f8 <BUTTON_Handle>:
button_callback_function_t __BUTTON_Pressing_Callback = NULL;
button_callback_function_t __BUTTON_Releasing_Callback = NULL;
button_callback_function_t __BUTTON_Short_Pressing_Callback = NULL;
button_callback_function_t __BUTTON_Long_Pressing_Callback = NULL;

void BUTTON_Handle(BUTTON_HandleTypedef *ButtonX){
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	uint8_t state = HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8b1b      	ldrh	r3, [r3, #24]
 8003808:	4619      	mov	r1, r3
 800380a:	4610      	mov	r0, r2
 800380c:	f7fd fe86 	bl	800151c <HAL_GPIO_ReadPin>
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]
	if(state != ButtonX->BTN_Filter){
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	789b      	ldrb	r3, [r3, #2]
 8003818:	7bfa      	ldrb	r2, [r7, #15]
 800381a:	429a      	cmp	r2, r3
 800381c:	d00a      	beq.n	8003834 <BUTTON_Handle+0x3c>
		ButtonX->BTN_Filter = state;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7bfa      	ldrb	r2, [r7, #15]
 8003822:	709a      	strb	r2, [r3, #2]
		ButtonX->is_debouncing = 1;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	70da      	strb	r2, [r3, #3]
		ButtonX->time_debounce = HAL_GetTick();
 800382a:	f7fd fb43 	bl	8000eb4 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	609a      	str	r2, [r3, #8]
	}

	if(ButtonX->is_debouncing && (HAL_GetTick() - ButtonX->time_debounce >= 15)){
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	78db      	ldrb	r3, [r3, #3]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00e      	beq.n	800385a <BUTTON_Handle+0x62>
 800383c:	f7fd fb3a 	bl	8000eb4 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b0e      	cmp	r3, #14
 800384a:	d906      	bls.n	800385a <BUTTON_Handle+0x62>
		ButtonX->BTN_Current = ButtonX->BTN_Filter;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	789a      	ldrb	r2, [r3, #2]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	701a      	strb	r2, [r3, #0]
		ButtonX->is_debouncing = 0;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	70da      	strb	r2, [r3, #3]
	}

	if(ButtonX->BTN_Current != ButtonX->BTN_Last){
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	781a      	ldrb	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	785b      	ldrb	r3, [r3, #1]
 8003862:	429a      	cmp	r2, r3
 8003864:	d03c      	beq.n	80038e0 <BUTTON_Handle+0xe8>
		if(ButtonX->BTN_Current == !ButtonX->releasing_state){
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	7c1b      	ldrb	r3, [r3, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	bf0c      	ite	eq
 8003874:	2301      	moveq	r3, #1
 8003876:	2300      	movne	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	429a      	cmp	r2, r3
 800387c:	d110      	bne.n	80038a0 <BUTTON_Handle+0xa8>
			if(__BUTTON_Pressing_Callback != NULL){
 800387e:	4b26      	ldr	r3, [pc, #152]	; (8003918 <BUTTON_Handle+0x120>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <BUTTON_Handle+0x96>
				__BUTTON_Pressing_Callback(ButtonX);
 8003886:	4b24      	ldr	r3, [pc, #144]	; (8003918 <BUTTON_Handle+0x120>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	4798      	blx	r3
			}
			ButtonX->is_press = 1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	711a      	strb	r2, [r3, #4]
			ButtonX->time_start_press = HAL_GetTick();
 8003894:	f7fd fb0e 	bl	8000eb4 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	60da      	str	r2, [r3, #12]
 800389e:	e01b      	b.n	80038d8 <BUTTON_Handle+0xe0>
		}
		else{
			ButtonX->is_press = 0;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	711a      	strb	r2, [r3, #4]
			if(HAL_GetTick() - ButtonX->time_start_press <= 1000){
 80038a6:	f7fd fb05 	bl	8000eb4 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038b6:	d807      	bhi.n	80038c8 <BUTTON_Handle+0xd0>
				if(__BUTTON_Short_Pressing_Callback != NULL){
 80038b8:	4b18      	ldr	r3, [pc, #96]	; (800391c <BUTTON_Handle+0x124>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <BUTTON_Handle+0xd0>
					__BUTTON_Short_Pressing_Callback(ButtonX);
 80038c0:	4b16      	ldr	r3, [pc, #88]	; (800391c <BUTTON_Handle+0x124>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4798      	blx	r3
				}
			}
			if(__BUTTON_Releasing_Callback != NULL){
 80038c8:	4b15      	ldr	r3, [pc, #84]	; (8003920 <BUTTON_Handle+0x128>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <BUTTON_Handle+0xe0>
				__BUTTON_Releasing_Callback(ButtonX);
 80038d0:	4b13      	ldr	r3, [pc, #76]	; (8003920 <BUTTON_Handle+0x128>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
			}
		}
		ButtonX->BTN_Last = ButtonX->BTN_Current;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	705a      	strb	r2, [r3, #1]
	}

	if(ButtonX->is_press && (HAL_GetTick() - ButtonX->time_start_press >= TIME_FOR_LONG_PRESSING)){
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	791b      	ldrb	r3, [r3, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d013      	beq.n	8003910 <BUTTON_Handle+0x118>
 80038e8:	f7fd fae4 	bl	8000eb4 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80038f8:	d30a      	bcc.n	8003910 <BUTTON_Handle+0x118>
		if(__BUTTON_Long_Pressing_Callback != NULL){
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <BUTTON_Handle+0x12c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <BUTTON_Handle+0x112>
			__BUTTON_Long_Pressing_Callback(ButtonX);
 8003902:	4b08      	ldr	r3, [pc, #32]	; (8003924 <BUTTON_Handle+0x12c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
		}
		ButtonX->is_press = 0;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	711a      	strb	r2, [r3, #4]
	}
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	2000097c 	.word	0x2000097c
 800391c:	20000984 	.word	0x20000984
 8003920:	20000980 	.word	0x20000980
 8003924:	20000988 	.word	0x20000988

08003928 <BUTTON_Init>:

void BUTTON_Init(BUTTON_HandleTypedef *ButtonX, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t releasing_state){
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	4611      	mov	r1, r2
 8003934:	461a      	mov	r2, r3
 8003936:	460b      	mov	r3, r1
 8003938:	80fb      	strh	r3, [r7, #6]
 800393a:	4613      	mov	r3, r2
 800393c:	717b      	strb	r3, [r7, #5]
	ButtonX->GPIOx = GPIOx;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	615a      	str	r2, [r3, #20]
	ButtonX->GPIO_Pin = GPIO_Pin;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	88fa      	ldrh	r2, [r7, #6]
 8003948:	831a      	strh	r2, [r3, #24]
	ButtonX->releasing_state = releasing_state;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	797a      	ldrb	r2, [r7, #5]
 800394e:	741a      	strb	r2, [r3, #16]
	ButtonX->BTN_Current = releasing_state;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	797a      	ldrb	r2, [r7, #5]
 8003954:	701a      	strb	r2, [r3, #0]
	ButtonX->BTN_Last = releasing_state;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	797a      	ldrb	r2, [r7, #5]
 800395a:	705a      	strb	r2, [r3, #1]
	ButtonX->BTN_Filter = releasing_state;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	797a      	ldrb	r2, [r7, #5]
 8003960:	709a      	strb	r2, [r3, #2]
	ButtonX->is_debouncing = 0;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	70da      	strb	r2, [r3, #3]
	ButtonX->is_press = 0;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	711a      	strb	r2, [r3, #4]
}
 800396e:	bf00      	nop
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
	...

0800397c <BUTTON_Set_Callback_Function>:

void BUTTON_Set_Callback_Function(button_callback_function_t p_pressing_callback_function,
								button_callback_function_t p_releasing_callback_function,
								button_callback_function_t p_short_pressing_callback_function,
								button_callback_function_t p_long_pressing_callback_function){
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
	__BUTTON_Pressing_Callback = p_pressing_callback_function;
 800398a:	4a09      	ldr	r2, [pc, #36]	; (80039b0 <BUTTON_Set_Callback_Function+0x34>)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6013      	str	r3, [r2, #0]
	__BUTTON_Releasing_Callback = p_releasing_callback_function;
 8003990:	4a08      	ldr	r2, [pc, #32]	; (80039b4 <BUTTON_Set_Callback_Function+0x38>)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	6013      	str	r3, [r2, #0]
	__BUTTON_Short_Pressing_Callback = p_short_pressing_callback_function;
 8003996:	4a08      	ldr	r2, [pc, #32]	; (80039b8 <BUTTON_Set_Callback_Function+0x3c>)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6013      	str	r3, [r2, #0]
	__BUTTON_Long_Pressing_Callback = p_long_pressing_callback_function;
 800399c:	4a07      	ldr	r2, [pc, #28]	; (80039bc <BUTTON_Set_Callback_Function+0x40>)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6013      	str	r3, [r2, #0]
}
 80039a2:	bf00      	nop
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	2000097c 	.word	0x2000097c
 80039b4:	20000980 	.word	0x20000980
 80039b8:	20000984 	.word	0x20000984
 80039bc:	20000988 	.word	0x20000988

080039c0 <RING_BUFFER_Init>:
#include "ring_buffer.h"

void RING_BUFFER_Init(RING_BUFFER_HandleTypeDef *p_ring_buffer, uint8_t * p_buffer, uint16_t p_max_length){
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	4613      	mov	r3, r2
 80039cc:	80fb      	strh	r3, [r7, #6]
	p_ring_buffer->buffer = p_buffer;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	601a      	str	r2, [r3, #0]
	p_ring_buffer->head = 0;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	809a      	strh	r2, [r3, #4]
	p_ring_buffer->tail = 0;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	80da      	strh	r2, [r3, #6]
	p_ring_buffer->max_length = p_max_length;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	88fa      	ldrh	r2, [r7, #6]
 80039e4:	811a      	strh	r2, [r3, #8]
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <RING_BUFFER_Push>:

int8_t RING_BUFFER_Push(RING_BUFFER_HandleTypeDef *p_ring_buffer, uint8_t p_data){
 80039f2:	b480      	push	{r7}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	460b      	mov	r3, r1
 80039fc:	70fb      	strb	r3, [r7, #3]
	uint16_t t_next;

	t_next = p_ring_buffer->head + 1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	889b      	ldrh	r3, [r3, #4]
 8003a02:	3301      	adds	r3, #1
 8003a04:	81fb      	strh	r3, [r7, #14]
	if(t_next >= p_ring_buffer->max_length)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	891b      	ldrh	r3, [r3, #8]
 8003a0a:	89fa      	ldrh	r2, [r7, #14]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d301      	bcc.n	8003a14 <RING_BUFFER_Push+0x22>
		t_next = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	81fb      	strh	r3, [r7, #14]

	if(t_next == p_ring_buffer->tail)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	88db      	ldrh	r3, [r3, #6]
 8003a18:	89fa      	ldrh	r2, [r7, #14]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d102      	bne.n	8003a24 <RING_BUFFER_Push+0x32>
		return -1;
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a22:	e00a      	b.n	8003a3a <RING_BUFFER_Push+0x48>

	p_ring_buffer->buffer[p_ring_buffer->head] = p_data;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	8892      	ldrh	r2, [r2, #4]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	701a      	strb	r2, [r3, #0]
	p_ring_buffer->head = t_next;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	89fa      	ldrh	r2, [r7, #14]
 8003a36:	809a      	strh	r2, [r3, #4]

	return 0;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <RING_BUFFER_Pop>:

int8_t RING_BUFFER_Pop(RING_BUFFER_HandleTypeDef *p_ring_buffer, uint8_t * p_data){
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]
	uint16_t t_next;

	if(p_ring_buffer->tail == p_ring_buffer->head)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	88da      	ldrh	r2, [r3, #6]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	889b      	ldrh	r3, [r3, #4]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d102      	bne.n	8003a62 <RING_BUFFER_Pop+0x1c>
		return -1;
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a60:	e016      	b.n	8003a90 <RING_BUFFER_Pop+0x4a>

	t_next = p_ring_buffer->tail + 1;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	88db      	ldrh	r3, [r3, #6]
 8003a66:	3301      	adds	r3, #1
 8003a68:	81fb      	strh	r3, [r7, #14]
	if(t_next >= p_ring_buffer->max_length)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	891b      	ldrh	r3, [r3, #8]
 8003a6e:	89fa      	ldrh	r2, [r7, #14]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d301      	bcc.n	8003a78 <RING_BUFFER_Pop+0x32>
		t_next = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	81fb      	strh	r3, [r7, #14]

	*p_data = p_ring_buffer->buffer[p_ring_buffer->tail];
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	88d2      	ldrh	r2, [r2, #6]
 8003a80:	4413      	add	r3, r2
 8003a82:	781a      	ldrb	r2, [r3, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	701a      	strb	r2, [r3, #0]
	p_ring_buffer->tail = t_next;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	89fa      	ldrh	r2, [r7, #14]
 8003a8c:	80da      	strh	r2, [r3, #6]

	return 0;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <RING_BUFFER_Available>:

uint16_t RING_BUFFER_Available(RING_BUFFER_HandleTypeDef *p_ring_buffer){
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
//	} else if(p_ring_buffer->head < p_ring_buffer->tail){
//		return p_ring_buffer->max_length - (p_ring_buffer->head - p_ring_buffer->tail);
//	} else if(p_ring_buffer->head == p_ring_buffer->tail){
//		return 0;
//	}
	return (p_ring_buffer->head == p_ring_buffer->tail) ? 0 : 1;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	889a      	ldrh	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	88db      	ldrh	r3, [r3, #6]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	bf14      	ite	ne
 8003ab0:	2301      	movne	r3, #1
 8003ab2:	2300      	moveq	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	b29b      	uxth	r3, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <UART_Init>:
static uint8_t uart_buffer[UART_MAX_LEN];
RING_BUFFER_HandleTypeDef uart_ring_buffer;

extern UART_HandleTypeDef huart2;

void UART_Init(){
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
	RING_BUFFER_Init(&uart_ring_buffer, uart_buffer, UART_MAX_LEN);
 8003ac8:	22ff      	movs	r2, #255	; 0xff
 8003aca:	4903      	ldr	r1, [pc, #12]	; (8003ad8 <UART_Init+0x14>)
 8003acc:	4803      	ldr	r0, [pc, #12]	; (8003adc <UART_Init+0x18>)
 8003ace:	f7ff ff77 	bl	80039c0 <RING_BUFFER_Init>
}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	2000098c 	.word	0x2000098c
 8003adc:	20000a8c 	.word	0x20000a8c

08003ae0 <UART_Receive>:

void UART_Receive(uint8_t Rx_Buffer){
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]
	RING_BUFFER_Push(&uart_ring_buffer, Rx_Buffer);
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	4619      	mov	r1, r3
 8003aee:	4803      	ldr	r0, [pc, #12]	; (8003afc <UART_Receive+0x1c>)
 8003af0:	f7ff ff7f 	bl	80039f2 <RING_BUFFER_Push>
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	20000a8c 	.word	0x20000a8c

08003b00 <UART_Handle>:

__weak void UART_Handle(){
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
	if(UART_Available() != 0){
 8003b06:	f000 f81f 	bl	8003b48 <UART_Available>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d007      	beq.n	8003b20 <UART_Handle+0x20>
		uint8_t t_data = UART_Read();
 8003b10:	f000 f80a 	bl	8003b28 <UART_Read>
 8003b14:	4603      	mov	r3, r0
 8003b16:	71fb      	strb	r3, [r7, #7]
		FRAME_SYNC_Receive(t_data);
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff fd34 	bl	8003588 <FRAME_SYNC_Receive>
	}
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <UART_Read>:

uint8_t UART_Read(){
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
	uint8_t t_data;
	RING_BUFFER_Pop(&uart_ring_buffer, &t_data);
 8003b2e:	1dfb      	adds	r3, r7, #7
 8003b30:	4619      	mov	r1, r3
 8003b32:	4804      	ldr	r0, [pc, #16]	; (8003b44 <UART_Read+0x1c>)
 8003b34:	f7ff ff87 	bl	8003a46 <RING_BUFFER_Pop>
	return t_data;
 8003b38:	79fb      	ldrb	r3, [r7, #7]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000a8c 	.word	0x20000a8c

08003b48 <UART_Available>:

uint16_t UART_Available(){
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
	return RING_BUFFER_Available(&uart_ring_buffer);
 8003b4c:	4802      	ldr	r0, [pc, #8]	; (8003b58 <UART_Available+0x10>)
 8003b4e:	f7ff ffa5 	bl	8003a9c <RING_BUFFER_Available>
 8003b52:	4603      	mov	r3, r0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	20000a8c 	.word	0x20000a8c

08003b5c <__errno>:
 8003b5c:	4b01      	ldr	r3, [pc, #4]	; (8003b64 <__errno+0x8>)
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	2000000c 	.word	0x2000000c

08003b68 <__libc_init_array>:
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	4d0d      	ldr	r5, [pc, #52]	; (8003ba0 <__libc_init_array+0x38>)
 8003b6c:	4c0d      	ldr	r4, [pc, #52]	; (8003ba4 <__libc_init_array+0x3c>)
 8003b6e:	1b64      	subs	r4, r4, r5
 8003b70:	10a4      	asrs	r4, r4, #2
 8003b72:	2600      	movs	r6, #0
 8003b74:	42a6      	cmp	r6, r4
 8003b76:	d109      	bne.n	8003b8c <__libc_init_array+0x24>
 8003b78:	4d0b      	ldr	r5, [pc, #44]	; (8003ba8 <__libc_init_array+0x40>)
 8003b7a:	4c0c      	ldr	r4, [pc, #48]	; (8003bac <__libc_init_array+0x44>)
 8003b7c:	f001 fa78 	bl	8005070 <_init>
 8003b80:	1b64      	subs	r4, r4, r5
 8003b82:	10a4      	asrs	r4, r4, #2
 8003b84:	2600      	movs	r6, #0
 8003b86:	42a6      	cmp	r6, r4
 8003b88:	d105      	bne.n	8003b96 <__libc_init_array+0x2e>
 8003b8a:	bd70      	pop	{r4, r5, r6, pc}
 8003b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b90:	4798      	blx	r3
 8003b92:	3601      	adds	r6, #1
 8003b94:	e7ee      	b.n	8003b74 <__libc_init_array+0xc>
 8003b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b9a:	4798      	blx	r3
 8003b9c:	3601      	adds	r6, #1
 8003b9e:	e7f2      	b.n	8003b86 <__libc_init_array+0x1e>
 8003ba0:	080052dc 	.word	0x080052dc
 8003ba4:	080052dc 	.word	0x080052dc
 8003ba8:	080052dc 	.word	0x080052dc
 8003bac:	080052e0 	.word	0x080052e0

08003bb0 <memcpy>:
 8003bb0:	440a      	add	r2, r1
 8003bb2:	4291      	cmp	r1, r2
 8003bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bb8:	d100      	bne.n	8003bbc <memcpy+0xc>
 8003bba:	4770      	bx	lr
 8003bbc:	b510      	push	{r4, lr}
 8003bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bc6:	4291      	cmp	r1, r2
 8003bc8:	d1f9      	bne.n	8003bbe <memcpy+0xe>
 8003bca:	bd10      	pop	{r4, pc}

08003bcc <memset>:
 8003bcc:	4402      	add	r2, r0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d100      	bne.n	8003bd6 <memset+0xa>
 8003bd4:	4770      	bx	lr
 8003bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bda:	e7f9      	b.n	8003bd0 <memset+0x4>

08003bdc <siprintf>:
 8003bdc:	b40e      	push	{r1, r2, r3}
 8003bde:	b500      	push	{lr}
 8003be0:	b09c      	sub	sp, #112	; 0x70
 8003be2:	ab1d      	add	r3, sp, #116	; 0x74
 8003be4:	9002      	str	r0, [sp, #8]
 8003be6:	9006      	str	r0, [sp, #24]
 8003be8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bec:	4809      	ldr	r0, [pc, #36]	; (8003c14 <siprintf+0x38>)
 8003bee:	9107      	str	r1, [sp, #28]
 8003bf0:	9104      	str	r1, [sp, #16]
 8003bf2:	4909      	ldr	r1, [pc, #36]	; (8003c18 <siprintf+0x3c>)
 8003bf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bf8:	9105      	str	r1, [sp, #20]
 8003bfa:	6800      	ldr	r0, [r0, #0]
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	a902      	add	r1, sp, #8
 8003c00:	f000 fa02 	bl	8004008 <_svfiprintf_r>
 8003c04:	9b02      	ldr	r3, [sp, #8]
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	b01c      	add	sp, #112	; 0x70
 8003c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c10:	b003      	add	sp, #12
 8003c12:	4770      	bx	lr
 8003c14:	2000000c 	.word	0x2000000c
 8003c18:	ffff0208 	.word	0xffff0208

08003c1c <strcat>:
 8003c1c:	b510      	push	{r4, lr}
 8003c1e:	4602      	mov	r2, r0
 8003c20:	7814      	ldrb	r4, [r2, #0]
 8003c22:	4613      	mov	r3, r2
 8003c24:	3201      	adds	r2, #1
 8003c26:	2c00      	cmp	r4, #0
 8003c28:	d1fa      	bne.n	8003c20 <strcat+0x4>
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c30:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c34:	2a00      	cmp	r2, #0
 8003c36:	d1f9      	bne.n	8003c2c <strcat+0x10>
 8003c38:	bd10      	pop	{r4, pc}

08003c3a <strstr>:
 8003c3a:	780a      	ldrb	r2, [r1, #0]
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	b96a      	cbnz	r2, 8003c5c <strstr+0x22>
 8003c40:	bd70      	pop	{r4, r5, r6, pc}
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d109      	bne.n	8003c5a <strstr+0x20>
 8003c46:	460c      	mov	r4, r1
 8003c48:	4605      	mov	r5, r0
 8003c4a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f6      	beq.n	8003c40 <strstr+0x6>
 8003c52:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003c56:	429e      	cmp	r6, r3
 8003c58:	d0f7      	beq.n	8003c4a <strstr+0x10>
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	7803      	ldrb	r3, [r0, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1ef      	bne.n	8003c42 <strstr+0x8>
 8003c62:	4618      	mov	r0, r3
 8003c64:	e7ec      	b.n	8003c40 <strstr+0x6>
	...

08003c68 <strtok>:
 8003c68:	4b16      	ldr	r3, [pc, #88]	; (8003cc4 <strtok+0x5c>)
 8003c6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c6c:	681e      	ldr	r6, [r3, #0]
 8003c6e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003c70:	4605      	mov	r5, r0
 8003c72:	b9fc      	cbnz	r4, 8003cb4 <strtok+0x4c>
 8003c74:	2050      	movs	r0, #80	; 0x50
 8003c76:	9101      	str	r1, [sp, #4]
 8003c78:	f000 f882 	bl	8003d80 <malloc>
 8003c7c:	9901      	ldr	r1, [sp, #4]
 8003c7e:	65b0      	str	r0, [r6, #88]	; 0x58
 8003c80:	4602      	mov	r2, r0
 8003c82:	b920      	cbnz	r0, 8003c8e <strtok+0x26>
 8003c84:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <strtok+0x60>)
 8003c86:	4811      	ldr	r0, [pc, #68]	; (8003ccc <strtok+0x64>)
 8003c88:	2157      	movs	r1, #87	; 0x57
 8003c8a:	f000 f849 	bl	8003d20 <__assert_func>
 8003c8e:	e9c0 4400 	strd	r4, r4, [r0]
 8003c92:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003c96:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003c9a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003c9e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003ca2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003ca6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003caa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003cae:	6184      	str	r4, [r0, #24]
 8003cb0:	7704      	strb	r4, [r0, #28]
 8003cb2:	6244      	str	r4, [r0, #36]	; 0x24
 8003cb4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	4628      	mov	r0, r5
 8003cba:	b002      	add	sp, #8
 8003cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003cc0:	f000 b806 	b.w	8003cd0 <__strtok_r>
 8003cc4:	2000000c 	.word	0x2000000c
 8003cc8:	08005190 	.word	0x08005190
 8003ccc:	080051a7 	.word	0x080051a7

08003cd0 <__strtok_r>:
 8003cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cd2:	b908      	cbnz	r0, 8003cd8 <__strtok_r+0x8>
 8003cd4:	6810      	ldr	r0, [r2, #0]
 8003cd6:	b188      	cbz	r0, 8003cfc <__strtok_r+0x2c>
 8003cd8:	4604      	mov	r4, r0
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003ce0:	460f      	mov	r7, r1
 8003ce2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003ce6:	b91e      	cbnz	r6, 8003cf0 <__strtok_r+0x20>
 8003ce8:	b965      	cbnz	r5, 8003d04 <__strtok_r+0x34>
 8003cea:	6015      	str	r5, [r2, #0]
 8003cec:	4628      	mov	r0, r5
 8003cee:	e005      	b.n	8003cfc <__strtok_r+0x2c>
 8003cf0:	42b5      	cmp	r5, r6
 8003cf2:	d1f6      	bne.n	8003ce2 <__strtok_r+0x12>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f0      	bne.n	8003cda <__strtok_r+0xa>
 8003cf8:	6014      	str	r4, [r2, #0]
 8003cfa:	7003      	strb	r3, [r0, #0]
 8003cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cfe:	461c      	mov	r4, r3
 8003d00:	e00c      	b.n	8003d1c <__strtok_r+0x4c>
 8003d02:	b915      	cbnz	r5, 8003d0a <__strtok_r+0x3a>
 8003d04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003d08:	460e      	mov	r6, r1
 8003d0a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003d0e:	42ab      	cmp	r3, r5
 8003d10:	d1f7      	bne.n	8003d02 <__strtok_r+0x32>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f3      	beq.n	8003cfe <__strtok_r+0x2e>
 8003d16:	2300      	movs	r3, #0
 8003d18:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003d1c:	6014      	str	r4, [r2, #0]
 8003d1e:	e7ed      	b.n	8003cfc <__strtok_r+0x2c>

08003d20 <__assert_func>:
 8003d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d22:	4614      	mov	r4, r2
 8003d24:	461a      	mov	r2, r3
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <__assert_func+0x2c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4605      	mov	r5, r0
 8003d2c:	68d8      	ldr	r0, [r3, #12]
 8003d2e:	b14c      	cbz	r4, 8003d44 <__assert_func+0x24>
 8003d30:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <__assert_func+0x30>)
 8003d32:	9100      	str	r1, [sp, #0]
 8003d34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003d38:	4906      	ldr	r1, [pc, #24]	; (8003d54 <__assert_func+0x34>)
 8003d3a:	462b      	mov	r3, r5
 8003d3c:	f000 f80e 	bl	8003d5c <fiprintf>
 8003d40:	f000 fe20 	bl	8004984 <abort>
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <__assert_func+0x38>)
 8003d46:	461c      	mov	r4, r3
 8003d48:	e7f3      	b.n	8003d32 <__assert_func+0x12>
 8003d4a:	bf00      	nop
 8003d4c:	2000000c 	.word	0x2000000c
 8003d50:	08005204 	.word	0x08005204
 8003d54:	08005211 	.word	0x08005211
 8003d58:	0800523f 	.word	0x0800523f

08003d5c <fiprintf>:
 8003d5c:	b40e      	push	{r1, r2, r3}
 8003d5e:	b503      	push	{r0, r1, lr}
 8003d60:	4601      	mov	r1, r0
 8003d62:	ab03      	add	r3, sp, #12
 8003d64:	4805      	ldr	r0, [pc, #20]	; (8003d7c <fiprintf+0x20>)
 8003d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d6a:	6800      	ldr	r0, [r0, #0]
 8003d6c:	9301      	str	r3, [sp, #4]
 8003d6e:	f000 fa75 	bl	800425c <_vfiprintf_r>
 8003d72:	b002      	add	sp, #8
 8003d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d78:	b003      	add	sp, #12
 8003d7a:	4770      	bx	lr
 8003d7c:	2000000c 	.word	0x2000000c

08003d80 <malloc>:
 8003d80:	4b02      	ldr	r3, [pc, #8]	; (8003d8c <malloc+0xc>)
 8003d82:	4601      	mov	r1, r0
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	f000 b86f 	b.w	8003e68 <_malloc_r>
 8003d8a:	bf00      	nop
 8003d8c:	2000000c 	.word	0x2000000c

08003d90 <_free_r>:
 8003d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d92:	2900      	cmp	r1, #0
 8003d94:	d044      	beq.n	8003e20 <_free_r+0x90>
 8003d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d9a:	9001      	str	r0, [sp, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f1a1 0404 	sub.w	r4, r1, #4
 8003da2:	bfb8      	it	lt
 8003da4:	18e4      	addlt	r4, r4, r3
 8003da6:	f001 f82f 	bl	8004e08 <__malloc_lock>
 8003daa:	4a1e      	ldr	r2, [pc, #120]	; (8003e24 <_free_r+0x94>)
 8003dac:	9801      	ldr	r0, [sp, #4]
 8003dae:	6813      	ldr	r3, [r2, #0]
 8003db0:	b933      	cbnz	r3, 8003dc0 <_free_r+0x30>
 8003db2:	6063      	str	r3, [r4, #4]
 8003db4:	6014      	str	r4, [r2, #0]
 8003db6:	b003      	add	sp, #12
 8003db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003dbc:	f001 b82a 	b.w	8004e14 <__malloc_unlock>
 8003dc0:	42a3      	cmp	r3, r4
 8003dc2:	d908      	bls.n	8003dd6 <_free_r+0x46>
 8003dc4:	6825      	ldr	r5, [r4, #0]
 8003dc6:	1961      	adds	r1, r4, r5
 8003dc8:	428b      	cmp	r3, r1
 8003dca:	bf01      	itttt	eq
 8003dcc:	6819      	ldreq	r1, [r3, #0]
 8003dce:	685b      	ldreq	r3, [r3, #4]
 8003dd0:	1949      	addeq	r1, r1, r5
 8003dd2:	6021      	streq	r1, [r4, #0]
 8003dd4:	e7ed      	b.n	8003db2 <_free_r+0x22>
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	b10b      	cbz	r3, 8003de0 <_free_r+0x50>
 8003ddc:	42a3      	cmp	r3, r4
 8003dde:	d9fa      	bls.n	8003dd6 <_free_r+0x46>
 8003de0:	6811      	ldr	r1, [r2, #0]
 8003de2:	1855      	adds	r5, r2, r1
 8003de4:	42a5      	cmp	r5, r4
 8003de6:	d10b      	bne.n	8003e00 <_free_r+0x70>
 8003de8:	6824      	ldr	r4, [r4, #0]
 8003dea:	4421      	add	r1, r4
 8003dec:	1854      	adds	r4, r2, r1
 8003dee:	42a3      	cmp	r3, r4
 8003df0:	6011      	str	r1, [r2, #0]
 8003df2:	d1e0      	bne.n	8003db6 <_free_r+0x26>
 8003df4:	681c      	ldr	r4, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	6053      	str	r3, [r2, #4]
 8003dfa:	4421      	add	r1, r4
 8003dfc:	6011      	str	r1, [r2, #0]
 8003dfe:	e7da      	b.n	8003db6 <_free_r+0x26>
 8003e00:	d902      	bls.n	8003e08 <_free_r+0x78>
 8003e02:	230c      	movs	r3, #12
 8003e04:	6003      	str	r3, [r0, #0]
 8003e06:	e7d6      	b.n	8003db6 <_free_r+0x26>
 8003e08:	6825      	ldr	r5, [r4, #0]
 8003e0a:	1961      	adds	r1, r4, r5
 8003e0c:	428b      	cmp	r3, r1
 8003e0e:	bf04      	itt	eq
 8003e10:	6819      	ldreq	r1, [r3, #0]
 8003e12:	685b      	ldreq	r3, [r3, #4]
 8003e14:	6063      	str	r3, [r4, #4]
 8003e16:	bf04      	itt	eq
 8003e18:	1949      	addeq	r1, r1, r5
 8003e1a:	6021      	streq	r1, [r4, #0]
 8003e1c:	6054      	str	r4, [r2, #4]
 8003e1e:	e7ca      	b.n	8003db6 <_free_r+0x26>
 8003e20:	b003      	add	sp, #12
 8003e22:	bd30      	pop	{r4, r5, pc}
 8003e24:	20000a98 	.word	0x20000a98

08003e28 <sbrk_aligned>:
 8003e28:	b570      	push	{r4, r5, r6, lr}
 8003e2a:	4e0e      	ldr	r6, [pc, #56]	; (8003e64 <sbrk_aligned+0x3c>)
 8003e2c:	460c      	mov	r4, r1
 8003e2e:	6831      	ldr	r1, [r6, #0]
 8003e30:	4605      	mov	r5, r0
 8003e32:	b911      	cbnz	r1, 8003e3a <sbrk_aligned+0x12>
 8003e34:	f000 fcd6 	bl	80047e4 <_sbrk_r>
 8003e38:	6030      	str	r0, [r6, #0]
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	f000 fcd1 	bl	80047e4 <_sbrk_r>
 8003e42:	1c43      	adds	r3, r0, #1
 8003e44:	d00a      	beq.n	8003e5c <sbrk_aligned+0x34>
 8003e46:	1cc4      	adds	r4, r0, #3
 8003e48:	f024 0403 	bic.w	r4, r4, #3
 8003e4c:	42a0      	cmp	r0, r4
 8003e4e:	d007      	beq.n	8003e60 <sbrk_aligned+0x38>
 8003e50:	1a21      	subs	r1, r4, r0
 8003e52:	4628      	mov	r0, r5
 8003e54:	f000 fcc6 	bl	80047e4 <_sbrk_r>
 8003e58:	3001      	adds	r0, #1
 8003e5a:	d101      	bne.n	8003e60 <sbrk_aligned+0x38>
 8003e5c:	f04f 34ff 	mov.w	r4, #4294967295
 8003e60:	4620      	mov	r0, r4
 8003e62:	bd70      	pop	{r4, r5, r6, pc}
 8003e64:	20000a9c 	.word	0x20000a9c

08003e68 <_malloc_r>:
 8003e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e6c:	1ccd      	adds	r5, r1, #3
 8003e6e:	f025 0503 	bic.w	r5, r5, #3
 8003e72:	3508      	adds	r5, #8
 8003e74:	2d0c      	cmp	r5, #12
 8003e76:	bf38      	it	cc
 8003e78:	250c      	movcc	r5, #12
 8003e7a:	2d00      	cmp	r5, #0
 8003e7c:	4607      	mov	r7, r0
 8003e7e:	db01      	blt.n	8003e84 <_malloc_r+0x1c>
 8003e80:	42a9      	cmp	r1, r5
 8003e82:	d905      	bls.n	8003e90 <_malloc_r+0x28>
 8003e84:	230c      	movs	r3, #12
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	2600      	movs	r6, #0
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e90:	4e2e      	ldr	r6, [pc, #184]	; (8003f4c <_malloc_r+0xe4>)
 8003e92:	f000 ffb9 	bl	8004e08 <__malloc_lock>
 8003e96:	6833      	ldr	r3, [r6, #0]
 8003e98:	461c      	mov	r4, r3
 8003e9a:	bb34      	cbnz	r4, 8003eea <_malloc_r+0x82>
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	4638      	mov	r0, r7
 8003ea0:	f7ff ffc2 	bl	8003e28 <sbrk_aligned>
 8003ea4:	1c43      	adds	r3, r0, #1
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	d14d      	bne.n	8003f46 <_malloc_r+0xde>
 8003eaa:	6834      	ldr	r4, [r6, #0]
 8003eac:	4626      	mov	r6, r4
 8003eae:	2e00      	cmp	r6, #0
 8003eb0:	d140      	bne.n	8003f34 <_malloc_r+0xcc>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	4631      	mov	r1, r6
 8003eb6:	4638      	mov	r0, r7
 8003eb8:	eb04 0803 	add.w	r8, r4, r3
 8003ebc:	f000 fc92 	bl	80047e4 <_sbrk_r>
 8003ec0:	4580      	cmp	r8, r0
 8003ec2:	d13a      	bne.n	8003f3a <_malloc_r+0xd2>
 8003ec4:	6821      	ldr	r1, [r4, #0]
 8003ec6:	3503      	adds	r5, #3
 8003ec8:	1a6d      	subs	r5, r5, r1
 8003eca:	f025 0503 	bic.w	r5, r5, #3
 8003ece:	3508      	adds	r5, #8
 8003ed0:	2d0c      	cmp	r5, #12
 8003ed2:	bf38      	it	cc
 8003ed4:	250c      	movcc	r5, #12
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	4638      	mov	r0, r7
 8003eda:	f7ff ffa5 	bl	8003e28 <sbrk_aligned>
 8003ede:	3001      	adds	r0, #1
 8003ee0:	d02b      	beq.n	8003f3a <_malloc_r+0xd2>
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	442b      	add	r3, r5
 8003ee6:	6023      	str	r3, [r4, #0]
 8003ee8:	e00e      	b.n	8003f08 <_malloc_r+0xa0>
 8003eea:	6822      	ldr	r2, [r4, #0]
 8003eec:	1b52      	subs	r2, r2, r5
 8003eee:	d41e      	bmi.n	8003f2e <_malloc_r+0xc6>
 8003ef0:	2a0b      	cmp	r2, #11
 8003ef2:	d916      	bls.n	8003f22 <_malloc_r+0xba>
 8003ef4:	1961      	adds	r1, r4, r5
 8003ef6:	42a3      	cmp	r3, r4
 8003ef8:	6025      	str	r5, [r4, #0]
 8003efa:	bf18      	it	ne
 8003efc:	6059      	strne	r1, [r3, #4]
 8003efe:	6863      	ldr	r3, [r4, #4]
 8003f00:	bf08      	it	eq
 8003f02:	6031      	streq	r1, [r6, #0]
 8003f04:	5162      	str	r2, [r4, r5]
 8003f06:	604b      	str	r3, [r1, #4]
 8003f08:	4638      	mov	r0, r7
 8003f0a:	f104 060b 	add.w	r6, r4, #11
 8003f0e:	f000 ff81 	bl	8004e14 <__malloc_unlock>
 8003f12:	f026 0607 	bic.w	r6, r6, #7
 8003f16:	1d23      	adds	r3, r4, #4
 8003f18:	1af2      	subs	r2, r6, r3
 8003f1a:	d0b6      	beq.n	8003e8a <_malloc_r+0x22>
 8003f1c:	1b9b      	subs	r3, r3, r6
 8003f1e:	50a3      	str	r3, [r4, r2]
 8003f20:	e7b3      	b.n	8003e8a <_malloc_r+0x22>
 8003f22:	6862      	ldr	r2, [r4, #4]
 8003f24:	42a3      	cmp	r3, r4
 8003f26:	bf0c      	ite	eq
 8003f28:	6032      	streq	r2, [r6, #0]
 8003f2a:	605a      	strne	r2, [r3, #4]
 8003f2c:	e7ec      	b.n	8003f08 <_malloc_r+0xa0>
 8003f2e:	4623      	mov	r3, r4
 8003f30:	6864      	ldr	r4, [r4, #4]
 8003f32:	e7b2      	b.n	8003e9a <_malloc_r+0x32>
 8003f34:	4634      	mov	r4, r6
 8003f36:	6876      	ldr	r6, [r6, #4]
 8003f38:	e7b9      	b.n	8003eae <_malloc_r+0x46>
 8003f3a:	230c      	movs	r3, #12
 8003f3c:	603b      	str	r3, [r7, #0]
 8003f3e:	4638      	mov	r0, r7
 8003f40:	f000 ff68 	bl	8004e14 <__malloc_unlock>
 8003f44:	e7a1      	b.n	8003e8a <_malloc_r+0x22>
 8003f46:	6025      	str	r5, [r4, #0]
 8003f48:	e7de      	b.n	8003f08 <_malloc_r+0xa0>
 8003f4a:	bf00      	nop
 8003f4c:	20000a98 	.word	0x20000a98

08003f50 <__ssputs_r>:
 8003f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f54:	688e      	ldr	r6, [r1, #8]
 8003f56:	429e      	cmp	r6, r3
 8003f58:	4682      	mov	sl, r0
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	4690      	mov	r8, r2
 8003f5e:	461f      	mov	r7, r3
 8003f60:	d838      	bhi.n	8003fd4 <__ssputs_r+0x84>
 8003f62:	898a      	ldrh	r2, [r1, #12]
 8003f64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f68:	d032      	beq.n	8003fd0 <__ssputs_r+0x80>
 8003f6a:	6825      	ldr	r5, [r4, #0]
 8003f6c:	6909      	ldr	r1, [r1, #16]
 8003f6e:	eba5 0901 	sub.w	r9, r5, r1
 8003f72:	6965      	ldr	r5, [r4, #20]
 8003f74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	444b      	add	r3, r9
 8003f80:	106d      	asrs	r5, r5, #1
 8003f82:	429d      	cmp	r5, r3
 8003f84:	bf38      	it	cc
 8003f86:	461d      	movcc	r5, r3
 8003f88:	0553      	lsls	r3, r2, #21
 8003f8a:	d531      	bpl.n	8003ff0 <__ssputs_r+0xa0>
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	f7ff ff6b 	bl	8003e68 <_malloc_r>
 8003f92:	4606      	mov	r6, r0
 8003f94:	b950      	cbnz	r0, 8003fac <__ssputs_r+0x5c>
 8003f96:	230c      	movs	r3, #12
 8003f98:	f8ca 3000 	str.w	r3, [sl]
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fa2:	81a3      	strh	r3, [r4, #12]
 8003fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fac:	6921      	ldr	r1, [r4, #16]
 8003fae:	464a      	mov	r2, r9
 8003fb0:	f7ff fdfe 	bl	8003bb0 <memcpy>
 8003fb4:	89a3      	ldrh	r3, [r4, #12]
 8003fb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fbe:	81a3      	strh	r3, [r4, #12]
 8003fc0:	6126      	str	r6, [r4, #16]
 8003fc2:	6165      	str	r5, [r4, #20]
 8003fc4:	444e      	add	r6, r9
 8003fc6:	eba5 0509 	sub.w	r5, r5, r9
 8003fca:	6026      	str	r6, [r4, #0]
 8003fcc:	60a5      	str	r5, [r4, #8]
 8003fce:	463e      	mov	r6, r7
 8003fd0:	42be      	cmp	r6, r7
 8003fd2:	d900      	bls.n	8003fd6 <__ssputs_r+0x86>
 8003fd4:	463e      	mov	r6, r7
 8003fd6:	6820      	ldr	r0, [r4, #0]
 8003fd8:	4632      	mov	r2, r6
 8003fda:	4641      	mov	r1, r8
 8003fdc:	f000 fefa 	bl	8004dd4 <memmove>
 8003fe0:	68a3      	ldr	r3, [r4, #8]
 8003fe2:	1b9b      	subs	r3, r3, r6
 8003fe4:	60a3      	str	r3, [r4, #8]
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	4433      	add	r3, r6
 8003fea:	6023      	str	r3, [r4, #0]
 8003fec:	2000      	movs	r0, #0
 8003fee:	e7db      	b.n	8003fa8 <__ssputs_r+0x58>
 8003ff0:	462a      	mov	r2, r5
 8003ff2:	f000 ff15 	bl	8004e20 <_realloc_r>
 8003ff6:	4606      	mov	r6, r0
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d1e1      	bne.n	8003fc0 <__ssputs_r+0x70>
 8003ffc:	6921      	ldr	r1, [r4, #16]
 8003ffe:	4650      	mov	r0, sl
 8004000:	f7ff fec6 	bl	8003d90 <_free_r>
 8004004:	e7c7      	b.n	8003f96 <__ssputs_r+0x46>
	...

08004008 <_svfiprintf_r>:
 8004008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400c:	4698      	mov	r8, r3
 800400e:	898b      	ldrh	r3, [r1, #12]
 8004010:	061b      	lsls	r3, r3, #24
 8004012:	b09d      	sub	sp, #116	; 0x74
 8004014:	4607      	mov	r7, r0
 8004016:	460d      	mov	r5, r1
 8004018:	4614      	mov	r4, r2
 800401a:	d50e      	bpl.n	800403a <_svfiprintf_r+0x32>
 800401c:	690b      	ldr	r3, [r1, #16]
 800401e:	b963      	cbnz	r3, 800403a <_svfiprintf_r+0x32>
 8004020:	2140      	movs	r1, #64	; 0x40
 8004022:	f7ff ff21 	bl	8003e68 <_malloc_r>
 8004026:	6028      	str	r0, [r5, #0]
 8004028:	6128      	str	r0, [r5, #16]
 800402a:	b920      	cbnz	r0, 8004036 <_svfiprintf_r+0x2e>
 800402c:	230c      	movs	r3, #12
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	f04f 30ff 	mov.w	r0, #4294967295
 8004034:	e0d1      	b.n	80041da <_svfiprintf_r+0x1d2>
 8004036:	2340      	movs	r3, #64	; 0x40
 8004038:	616b      	str	r3, [r5, #20]
 800403a:	2300      	movs	r3, #0
 800403c:	9309      	str	r3, [sp, #36]	; 0x24
 800403e:	2320      	movs	r3, #32
 8004040:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004044:	f8cd 800c 	str.w	r8, [sp, #12]
 8004048:	2330      	movs	r3, #48	; 0x30
 800404a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80041f4 <_svfiprintf_r+0x1ec>
 800404e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004052:	f04f 0901 	mov.w	r9, #1
 8004056:	4623      	mov	r3, r4
 8004058:	469a      	mov	sl, r3
 800405a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800405e:	b10a      	cbz	r2, 8004064 <_svfiprintf_r+0x5c>
 8004060:	2a25      	cmp	r2, #37	; 0x25
 8004062:	d1f9      	bne.n	8004058 <_svfiprintf_r+0x50>
 8004064:	ebba 0b04 	subs.w	fp, sl, r4
 8004068:	d00b      	beq.n	8004082 <_svfiprintf_r+0x7a>
 800406a:	465b      	mov	r3, fp
 800406c:	4622      	mov	r2, r4
 800406e:	4629      	mov	r1, r5
 8004070:	4638      	mov	r0, r7
 8004072:	f7ff ff6d 	bl	8003f50 <__ssputs_r>
 8004076:	3001      	adds	r0, #1
 8004078:	f000 80aa 	beq.w	80041d0 <_svfiprintf_r+0x1c8>
 800407c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800407e:	445a      	add	r2, fp
 8004080:	9209      	str	r2, [sp, #36]	; 0x24
 8004082:	f89a 3000 	ldrb.w	r3, [sl]
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 80a2 	beq.w	80041d0 <_svfiprintf_r+0x1c8>
 800408c:	2300      	movs	r3, #0
 800408e:	f04f 32ff 	mov.w	r2, #4294967295
 8004092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004096:	f10a 0a01 	add.w	sl, sl, #1
 800409a:	9304      	str	r3, [sp, #16]
 800409c:	9307      	str	r3, [sp, #28]
 800409e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040a2:	931a      	str	r3, [sp, #104]	; 0x68
 80040a4:	4654      	mov	r4, sl
 80040a6:	2205      	movs	r2, #5
 80040a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ac:	4851      	ldr	r0, [pc, #324]	; (80041f4 <_svfiprintf_r+0x1ec>)
 80040ae:	f7fc f89f 	bl	80001f0 <memchr>
 80040b2:	9a04      	ldr	r2, [sp, #16]
 80040b4:	b9d8      	cbnz	r0, 80040ee <_svfiprintf_r+0xe6>
 80040b6:	06d0      	lsls	r0, r2, #27
 80040b8:	bf44      	itt	mi
 80040ba:	2320      	movmi	r3, #32
 80040bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040c0:	0711      	lsls	r1, r2, #28
 80040c2:	bf44      	itt	mi
 80040c4:	232b      	movmi	r3, #43	; 0x2b
 80040c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040ca:	f89a 3000 	ldrb.w	r3, [sl]
 80040ce:	2b2a      	cmp	r3, #42	; 0x2a
 80040d0:	d015      	beq.n	80040fe <_svfiprintf_r+0xf6>
 80040d2:	9a07      	ldr	r2, [sp, #28]
 80040d4:	4654      	mov	r4, sl
 80040d6:	2000      	movs	r0, #0
 80040d8:	f04f 0c0a 	mov.w	ip, #10
 80040dc:	4621      	mov	r1, r4
 80040de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040e2:	3b30      	subs	r3, #48	; 0x30
 80040e4:	2b09      	cmp	r3, #9
 80040e6:	d94e      	bls.n	8004186 <_svfiprintf_r+0x17e>
 80040e8:	b1b0      	cbz	r0, 8004118 <_svfiprintf_r+0x110>
 80040ea:	9207      	str	r2, [sp, #28]
 80040ec:	e014      	b.n	8004118 <_svfiprintf_r+0x110>
 80040ee:	eba0 0308 	sub.w	r3, r0, r8
 80040f2:	fa09 f303 	lsl.w	r3, r9, r3
 80040f6:	4313      	orrs	r3, r2
 80040f8:	9304      	str	r3, [sp, #16]
 80040fa:	46a2      	mov	sl, r4
 80040fc:	e7d2      	b.n	80040a4 <_svfiprintf_r+0x9c>
 80040fe:	9b03      	ldr	r3, [sp, #12]
 8004100:	1d19      	adds	r1, r3, #4
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	9103      	str	r1, [sp, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	bfbb      	ittet	lt
 800410a:	425b      	neglt	r3, r3
 800410c:	f042 0202 	orrlt.w	r2, r2, #2
 8004110:	9307      	strge	r3, [sp, #28]
 8004112:	9307      	strlt	r3, [sp, #28]
 8004114:	bfb8      	it	lt
 8004116:	9204      	strlt	r2, [sp, #16]
 8004118:	7823      	ldrb	r3, [r4, #0]
 800411a:	2b2e      	cmp	r3, #46	; 0x2e
 800411c:	d10c      	bne.n	8004138 <_svfiprintf_r+0x130>
 800411e:	7863      	ldrb	r3, [r4, #1]
 8004120:	2b2a      	cmp	r3, #42	; 0x2a
 8004122:	d135      	bne.n	8004190 <_svfiprintf_r+0x188>
 8004124:	9b03      	ldr	r3, [sp, #12]
 8004126:	1d1a      	adds	r2, r3, #4
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	9203      	str	r2, [sp, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	bfb8      	it	lt
 8004130:	f04f 33ff 	movlt.w	r3, #4294967295
 8004134:	3402      	adds	r4, #2
 8004136:	9305      	str	r3, [sp, #20]
 8004138:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004204 <_svfiprintf_r+0x1fc>
 800413c:	7821      	ldrb	r1, [r4, #0]
 800413e:	2203      	movs	r2, #3
 8004140:	4650      	mov	r0, sl
 8004142:	f7fc f855 	bl	80001f0 <memchr>
 8004146:	b140      	cbz	r0, 800415a <_svfiprintf_r+0x152>
 8004148:	2340      	movs	r3, #64	; 0x40
 800414a:	eba0 000a 	sub.w	r0, r0, sl
 800414e:	fa03 f000 	lsl.w	r0, r3, r0
 8004152:	9b04      	ldr	r3, [sp, #16]
 8004154:	4303      	orrs	r3, r0
 8004156:	3401      	adds	r4, #1
 8004158:	9304      	str	r3, [sp, #16]
 800415a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800415e:	4826      	ldr	r0, [pc, #152]	; (80041f8 <_svfiprintf_r+0x1f0>)
 8004160:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004164:	2206      	movs	r2, #6
 8004166:	f7fc f843 	bl	80001f0 <memchr>
 800416a:	2800      	cmp	r0, #0
 800416c:	d038      	beq.n	80041e0 <_svfiprintf_r+0x1d8>
 800416e:	4b23      	ldr	r3, [pc, #140]	; (80041fc <_svfiprintf_r+0x1f4>)
 8004170:	bb1b      	cbnz	r3, 80041ba <_svfiprintf_r+0x1b2>
 8004172:	9b03      	ldr	r3, [sp, #12]
 8004174:	3307      	adds	r3, #7
 8004176:	f023 0307 	bic.w	r3, r3, #7
 800417a:	3308      	adds	r3, #8
 800417c:	9303      	str	r3, [sp, #12]
 800417e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004180:	4433      	add	r3, r6
 8004182:	9309      	str	r3, [sp, #36]	; 0x24
 8004184:	e767      	b.n	8004056 <_svfiprintf_r+0x4e>
 8004186:	fb0c 3202 	mla	r2, ip, r2, r3
 800418a:	460c      	mov	r4, r1
 800418c:	2001      	movs	r0, #1
 800418e:	e7a5      	b.n	80040dc <_svfiprintf_r+0xd4>
 8004190:	2300      	movs	r3, #0
 8004192:	3401      	adds	r4, #1
 8004194:	9305      	str	r3, [sp, #20]
 8004196:	4619      	mov	r1, r3
 8004198:	f04f 0c0a 	mov.w	ip, #10
 800419c:	4620      	mov	r0, r4
 800419e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041a2:	3a30      	subs	r2, #48	; 0x30
 80041a4:	2a09      	cmp	r2, #9
 80041a6:	d903      	bls.n	80041b0 <_svfiprintf_r+0x1a8>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0c5      	beq.n	8004138 <_svfiprintf_r+0x130>
 80041ac:	9105      	str	r1, [sp, #20]
 80041ae:	e7c3      	b.n	8004138 <_svfiprintf_r+0x130>
 80041b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80041b4:	4604      	mov	r4, r0
 80041b6:	2301      	movs	r3, #1
 80041b8:	e7f0      	b.n	800419c <_svfiprintf_r+0x194>
 80041ba:	ab03      	add	r3, sp, #12
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	462a      	mov	r2, r5
 80041c0:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <_svfiprintf_r+0x1f8>)
 80041c2:	a904      	add	r1, sp, #16
 80041c4:	4638      	mov	r0, r7
 80041c6:	f3af 8000 	nop.w
 80041ca:	1c42      	adds	r2, r0, #1
 80041cc:	4606      	mov	r6, r0
 80041ce:	d1d6      	bne.n	800417e <_svfiprintf_r+0x176>
 80041d0:	89ab      	ldrh	r3, [r5, #12]
 80041d2:	065b      	lsls	r3, r3, #25
 80041d4:	f53f af2c 	bmi.w	8004030 <_svfiprintf_r+0x28>
 80041d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041da:	b01d      	add	sp, #116	; 0x74
 80041dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e0:	ab03      	add	r3, sp, #12
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	462a      	mov	r2, r5
 80041e6:	4b06      	ldr	r3, [pc, #24]	; (8004200 <_svfiprintf_r+0x1f8>)
 80041e8:	a904      	add	r1, sp, #16
 80041ea:	4638      	mov	r0, r7
 80041ec:	f000 f9d4 	bl	8004598 <_printf_i>
 80041f0:	e7eb      	b.n	80041ca <_svfiprintf_r+0x1c2>
 80041f2:	bf00      	nop
 80041f4:	08005240 	.word	0x08005240
 80041f8:	0800524a 	.word	0x0800524a
 80041fc:	00000000 	.word	0x00000000
 8004200:	08003f51 	.word	0x08003f51
 8004204:	08005246 	.word	0x08005246

08004208 <__sfputc_r>:
 8004208:	6893      	ldr	r3, [r2, #8]
 800420a:	3b01      	subs	r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	b410      	push	{r4}
 8004210:	6093      	str	r3, [r2, #8]
 8004212:	da08      	bge.n	8004226 <__sfputc_r+0x1e>
 8004214:	6994      	ldr	r4, [r2, #24]
 8004216:	42a3      	cmp	r3, r4
 8004218:	db01      	blt.n	800421e <__sfputc_r+0x16>
 800421a:	290a      	cmp	r1, #10
 800421c:	d103      	bne.n	8004226 <__sfputc_r+0x1e>
 800421e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004222:	f000 baef 	b.w	8004804 <__swbuf_r>
 8004226:	6813      	ldr	r3, [r2, #0]
 8004228:	1c58      	adds	r0, r3, #1
 800422a:	6010      	str	r0, [r2, #0]
 800422c:	7019      	strb	r1, [r3, #0]
 800422e:	4608      	mov	r0, r1
 8004230:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004234:	4770      	bx	lr

08004236 <__sfputs_r>:
 8004236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004238:	4606      	mov	r6, r0
 800423a:	460f      	mov	r7, r1
 800423c:	4614      	mov	r4, r2
 800423e:	18d5      	adds	r5, r2, r3
 8004240:	42ac      	cmp	r4, r5
 8004242:	d101      	bne.n	8004248 <__sfputs_r+0x12>
 8004244:	2000      	movs	r0, #0
 8004246:	e007      	b.n	8004258 <__sfputs_r+0x22>
 8004248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800424c:	463a      	mov	r2, r7
 800424e:	4630      	mov	r0, r6
 8004250:	f7ff ffda 	bl	8004208 <__sfputc_r>
 8004254:	1c43      	adds	r3, r0, #1
 8004256:	d1f3      	bne.n	8004240 <__sfputs_r+0xa>
 8004258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800425c <_vfiprintf_r>:
 800425c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004260:	460d      	mov	r5, r1
 8004262:	b09d      	sub	sp, #116	; 0x74
 8004264:	4614      	mov	r4, r2
 8004266:	4698      	mov	r8, r3
 8004268:	4606      	mov	r6, r0
 800426a:	b118      	cbz	r0, 8004274 <_vfiprintf_r+0x18>
 800426c:	6983      	ldr	r3, [r0, #24]
 800426e:	b90b      	cbnz	r3, 8004274 <_vfiprintf_r+0x18>
 8004270:	f000 fcaa 	bl	8004bc8 <__sinit>
 8004274:	4b89      	ldr	r3, [pc, #548]	; (800449c <_vfiprintf_r+0x240>)
 8004276:	429d      	cmp	r5, r3
 8004278:	d11b      	bne.n	80042b2 <_vfiprintf_r+0x56>
 800427a:	6875      	ldr	r5, [r6, #4]
 800427c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800427e:	07d9      	lsls	r1, r3, #31
 8004280:	d405      	bmi.n	800428e <_vfiprintf_r+0x32>
 8004282:	89ab      	ldrh	r3, [r5, #12]
 8004284:	059a      	lsls	r2, r3, #22
 8004286:	d402      	bmi.n	800428e <_vfiprintf_r+0x32>
 8004288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800428a:	f000 fd3b 	bl	8004d04 <__retarget_lock_acquire_recursive>
 800428e:	89ab      	ldrh	r3, [r5, #12]
 8004290:	071b      	lsls	r3, r3, #28
 8004292:	d501      	bpl.n	8004298 <_vfiprintf_r+0x3c>
 8004294:	692b      	ldr	r3, [r5, #16]
 8004296:	b9eb      	cbnz	r3, 80042d4 <_vfiprintf_r+0x78>
 8004298:	4629      	mov	r1, r5
 800429a:	4630      	mov	r0, r6
 800429c:	f000 fb04 	bl	80048a8 <__swsetup_r>
 80042a0:	b1c0      	cbz	r0, 80042d4 <_vfiprintf_r+0x78>
 80042a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042a4:	07dc      	lsls	r4, r3, #31
 80042a6:	d50e      	bpl.n	80042c6 <_vfiprintf_r+0x6a>
 80042a8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ac:	b01d      	add	sp, #116	; 0x74
 80042ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b2:	4b7b      	ldr	r3, [pc, #492]	; (80044a0 <_vfiprintf_r+0x244>)
 80042b4:	429d      	cmp	r5, r3
 80042b6:	d101      	bne.n	80042bc <_vfiprintf_r+0x60>
 80042b8:	68b5      	ldr	r5, [r6, #8]
 80042ba:	e7df      	b.n	800427c <_vfiprintf_r+0x20>
 80042bc:	4b79      	ldr	r3, [pc, #484]	; (80044a4 <_vfiprintf_r+0x248>)
 80042be:	429d      	cmp	r5, r3
 80042c0:	bf08      	it	eq
 80042c2:	68f5      	ldreq	r5, [r6, #12]
 80042c4:	e7da      	b.n	800427c <_vfiprintf_r+0x20>
 80042c6:	89ab      	ldrh	r3, [r5, #12]
 80042c8:	0598      	lsls	r0, r3, #22
 80042ca:	d4ed      	bmi.n	80042a8 <_vfiprintf_r+0x4c>
 80042cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042ce:	f000 fd1a 	bl	8004d06 <__retarget_lock_release_recursive>
 80042d2:	e7e9      	b.n	80042a8 <_vfiprintf_r+0x4c>
 80042d4:	2300      	movs	r3, #0
 80042d6:	9309      	str	r3, [sp, #36]	; 0x24
 80042d8:	2320      	movs	r3, #32
 80042da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042de:	f8cd 800c 	str.w	r8, [sp, #12]
 80042e2:	2330      	movs	r3, #48	; 0x30
 80042e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80044a8 <_vfiprintf_r+0x24c>
 80042e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042ec:	f04f 0901 	mov.w	r9, #1
 80042f0:	4623      	mov	r3, r4
 80042f2:	469a      	mov	sl, r3
 80042f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042f8:	b10a      	cbz	r2, 80042fe <_vfiprintf_r+0xa2>
 80042fa:	2a25      	cmp	r2, #37	; 0x25
 80042fc:	d1f9      	bne.n	80042f2 <_vfiprintf_r+0x96>
 80042fe:	ebba 0b04 	subs.w	fp, sl, r4
 8004302:	d00b      	beq.n	800431c <_vfiprintf_r+0xc0>
 8004304:	465b      	mov	r3, fp
 8004306:	4622      	mov	r2, r4
 8004308:	4629      	mov	r1, r5
 800430a:	4630      	mov	r0, r6
 800430c:	f7ff ff93 	bl	8004236 <__sfputs_r>
 8004310:	3001      	adds	r0, #1
 8004312:	f000 80aa 	beq.w	800446a <_vfiprintf_r+0x20e>
 8004316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004318:	445a      	add	r2, fp
 800431a:	9209      	str	r2, [sp, #36]	; 0x24
 800431c:	f89a 3000 	ldrb.w	r3, [sl]
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80a2 	beq.w	800446a <_vfiprintf_r+0x20e>
 8004326:	2300      	movs	r3, #0
 8004328:	f04f 32ff 	mov.w	r2, #4294967295
 800432c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004330:	f10a 0a01 	add.w	sl, sl, #1
 8004334:	9304      	str	r3, [sp, #16]
 8004336:	9307      	str	r3, [sp, #28]
 8004338:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800433c:	931a      	str	r3, [sp, #104]	; 0x68
 800433e:	4654      	mov	r4, sl
 8004340:	2205      	movs	r2, #5
 8004342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004346:	4858      	ldr	r0, [pc, #352]	; (80044a8 <_vfiprintf_r+0x24c>)
 8004348:	f7fb ff52 	bl	80001f0 <memchr>
 800434c:	9a04      	ldr	r2, [sp, #16]
 800434e:	b9d8      	cbnz	r0, 8004388 <_vfiprintf_r+0x12c>
 8004350:	06d1      	lsls	r1, r2, #27
 8004352:	bf44      	itt	mi
 8004354:	2320      	movmi	r3, #32
 8004356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800435a:	0713      	lsls	r3, r2, #28
 800435c:	bf44      	itt	mi
 800435e:	232b      	movmi	r3, #43	; 0x2b
 8004360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004364:	f89a 3000 	ldrb.w	r3, [sl]
 8004368:	2b2a      	cmp	r3, #42	; 0x2a
 800436a:	d015      	beq.n	8004398 <_vfiprintf_r+0x13c>
 800436c:	9a07      	ldr	r2, [sp, #28]
 800436e:	4654      	mov	r4, sl
 8004370:	2000      	movs	r0, #0
 8004372:	f04f 0c0a 	mov.w	ip, #10
 8004376:	4621      	mov	r1, r4
 8004378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800437c:	3b30      	subs	r3, #48	; 0x30
 800437e:	2b09      	cmp	r3, #9
 8004380:	d94e      	bls.n	8004420 <_vfiprintf_r+0x1c4>
 8004382:	b1b0      	cbz	r0, 80043b2 <_vfiprintf_r+0x156>
 8004384:	9207      	str	r2, [sp, #28]
 8004386:	e014      	b.n	80043b2 <_vfiprintf_r+0x156>
 8004388:	eba0 0308 	sub.w	r3, r0, r8
 800438c:	fa09 f303 	lsl.w	r3, r9, r3
 8004390:	4313      	orrs	r3, r2
 8004392:	9304      	str	r3, [sp, #16]
 8004394:	46a2      	mov	sl, r4
 8004396:	e7d2      	b.n	800433e <_vfiprintf_r+0xe2>
 8004398:	9b03      	ldr	r3, [sp, #12]
 800439a:	1d19      	adds	r1, r3, #4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	9103      	str	r1, [sp, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	bfbb      	ittet	lt
 80043a4:	425b      	neglt	r3, r3
 80043a6:	f042 0202 	orrlt.w	r2, r2, #2
 80043aa:	9307      	strge	r3, [sp, #28]
 80043ac:	9307      	strlt	r3, [sp, #28]
 80043ae:	bfb8      	it	lt
 80043b0:	9204      	strlt	r2, [sp, #16]
 80043b2:	7823      	ldrb	r3, [r4, #0]
 80043b4:	2b2e      	cmp	r3, #46	; 0x2e
 80043b6:	d10c      	bne.n	80043d2 <_vfiprintf_r+0x176>
 80043b8:	7863      	ldrb	r3, [r4, #1]
 80043ba:	2b2a      	cmp	r3, #42	; 0x2a
 80043bc:	d135      	bne.n	800442a <_vfiprintf_r+0x1ce>
 80043be:	9b03      	ldr	r3, [sp, #12]
 80043c0:	1d1a      	adds	r2, r3, #4
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	9203      	str	r2, [sp, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	bfb8      	it	lt
 80043ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80043ce:	3402      	adds	r4, #2
 80043d0:	9305      	str	r3, [sp, #20]
 80043d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80044b8 <_vfiprintf_r+0x25c>
 80043d6:	7821      	ldrb	r1, [r4, #0]
 80043d8:	2203      	movs	r2, #3
 80043da:	4650      	mov	r0, sl
 80043dc:	f7fb ff08 	bl	80001f0 <memchr>
 80043e0:	b140      	cbz	r0, 80043f4 <_vfiprintf_r+0x198>
 80043e2:	2340      	movs	r3, #64	; 0x40
 80043e4:	eba0 000a 	sub.w	r0, r0, sl
 80043e8:	fa03 f000 	lsl.w	r0, r3, r0
 80043ec:	9b04      	ldr	r3, [sp, #16]
 80043ee:	4303      	orrs	r3, r0
 80043f0:	3401      	adds	r4, #1
 80043f2:	9304      	str	r3, [sp, #16]
 80043f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f8:	482c      	ldr	r0, [pc, #176]	; (80044ac <_vfiprintf_r+0x250>)
 80043fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043fe:	2206      	movs	r2, #6
 8004400:	f7fb fef6 	bl	80001f0 <memchr>
 8004404:	2800      	cmp	r0, #0
 8004406:	d03f      	beq.n	8004488 <_vfiprintf_r+0x22c>
 8004408:	4b29      	ldr	r3, [pc, #164]	; (80044b0 <_vfiprintf_r+0x254>)
 800440a:	bb1b      	cbnz	r3, 8004454 <_vfiprintf_r+0x1f8>
 800440c:	9b03      	ldr	r3, [sp, #12]
 800440e:	3307      	adds	r3, #7
 8004410:	f023 0307 	bic.w	r3, r3, #7
 8004414:	3308      	adds	r3, #8
 8004416:	9303      	str	r3, [sp, #12]
 8004418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800441a:	443b      	add	r3, r7
 800441c:	9309      	str	r3, [sp, #36]	; 0x24
 800441e:	e767      	b.n	80042f0 <_vfiprintf_r+0x94>
 8004420:	fb0c 3202 	mla	r2, ip, r2, r3
 8004424:	460c      	mov	r4, r1
 8004426:	2001      	movs	r0, #1
 8004428:	e7a5      	b.n	8004376 <_vfiprintf_r+0x11a>
 800442a:	2300      	movs	r3, #0
 800442c:	3401      	adds	r4, #1
 800442e:	9305      	str	r3, [sp, #20]
 8004430:	4619      	mov	r1, r3
 8004432:	f04f 0c0a 	mov.w	ip, #10
 8004436:	4620      	mov	r0, r4
 8004438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800443c:	3a30      	subs	r2, #48	; 0x30
 800443e:	2a09      	cmp	r2, #9
 8004440:	d903      	bls.n	800444a <_vfiprintf_r+0x1ee>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0c5      	beq.n	80043d2 <_vfiprintf_r+0x176>
 8004446:	9105      	str	r1, [sp, #20]
 8004448:	e7c3      	b.n	80043d2 <_vfiprintf_r+0x176>
 800444a:	fb0c 2101 	mla	r1, ip, r1, r2
 800444e:	4604      	mov	r4, r0
 8004450:	2301      	movs	r3, #1
 8004452:	e7f0      	b.n	8004436 <_vfiprintf_r+0x1da>
 8004454:	ab03      	add	r3, sp, #12
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	462a      	mov	r2, r5
 800445a:	4b16      	ldr	r3, [pc, #88]	; (80044b4 <_vfiprintf_r+0x258>)
 800445c:	a904      	add	r1, sp, #16
 800445e:	4630      	mov	r0, r6
 8004460:	f3af 8000 	nop.w
 8004464:	4607      	mov	r7, r0
 8004466:	1c78      	adds	r0, r7, #1
 8004468:	d1d6      	bne.n	8004418 <_vfiprintf_r+0x1bc>
 800446a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800446c:	07d9      	lsls	r1, r3, #31
 800446e:	d405      	bmi.n	800447c <_vfiprintf_r+0x220>
 8004470:	89ab      	ldrh	r3, [r5, #12]
 8004472:	059a      	lsls	r2, r3, #22
 8004474:	d402      	bmi.n	800447c <_vfiprintf_r+0x220>
 8004476:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004478:	f000 fc45 	bl	8004d06 <__retarget_lock_release_recursive>
 800447c:	89ab      	ldrh	r3, [r5, #12]
 800447e:	065b      	lsls	r3, r3, #25
 8004480:	f53f af12 	bmi.w	80042a8 <_vfiprintf_r+0x4c>
 8004484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004486:	e711      	b.n	80042ac <_vfiprintf_r+0x50>
 8004488:	ab03      	add	r3, sp, #12
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	462a      	mov	r2, r5
 800448e:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <_vfiprintf_r+0x258>)
 8004490:	a904      	add	r1, sp, #16
 8004492:	4630      	mov	r0, r6
 8004494:	f000 f880 	bl	8004598 <_printf_i>
 8004498:	e7e4      	b.n	8004464 <_vfiprintf_r+0x208>
 800449a:	bf00      	nop
 800449c:	08005294 	.word	0x08005294
 80044a0:	080052b4 	.word	0x080052b4
 80044a4:	08005274 	.word	0x08005274
 80044a8:	08005240 	.word	0x08005240
 80044ac:	0800524a 	.word	0x0800524a
 80044b0:	00000000 	.word	0x00000000
 80044b4:	08004237 	.word	0x08004237
 80044b8:	08005246 	.word	0x08005246

080044bc <_printf_common>:
 80044bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c0:	4616      	mov	r6, r2
 80044c2:	4699      	mov	r9, r3
 80044c4:	688a      	ldr	r2, [r1, #8]
 80044c6:	690b      	ldr	r3, [r1, #16]
 80044c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044cc:	4293      	cmp	r3, r2
 80044ce:	bfb8      	it	lt
 80044d0:	4613      	movlt	r3, r2
 80044d2:	6033      	str	r3, [r6, #0]
 80044d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044d8:	4607      	mov	r7, r0
 80044da:	460c      	mov	r4, r1
 80044dc:	b10a      	cbz	r2, 80044e2 <_printf_common+0x26>
 80044de:	3301      	adds	r3, #1
 80044e0:	6033      	str	r3, [r6, #0]
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	0699      	lsls	r1, r3, #26
 80044e6:	bf42      	ittt	mi
 80044e8:	6833      	ldrmi	r3, [r6, #0]
 80044ea:	3302      	addmi	r3, #2
 80044ec:	6033      	strmi	r3, [r6, #0]
 80044ee:	6825      	ldr	r5, [r4, #0]
 80044f0:	f015 0506 	ands.w	r5, r5, #6
 80044f4:	d106      	bne.n	8004504 <_printf_common+0x48>
 80044f6:	f104 0a19 	add.w	sl, r4, #25
 80044fa:	68e3      	ldr	r3, [r4, #12]
 80044fc:	6832      	ldr	r2, [r6, #0]
 80044fe:	1a9b      	subs	r3, r3, r2
 8004500:	42ab      	cmp	r3, r5
 8004502:	dc26      	bgt.n	8004552 <_printf_common+0x96>
 8004504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004508:	1e13      	subs	r3, r2, #0
 800450a:	6822      	ldr	r2, [r4, #0]
 800450c:	bf18      	it	ne
 800450e:	2301      	movne	r3, #1
 8004510:	0692      	lsls	r2, r2, #26
 8004512:	d42b      	bmi.n	800456c <_printf_common+0xb0>
 8004514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004518:	4649      	mov	r1, r9
 800451a:	4638      	mov	r0, r7
 800451c:	47c0      	blx	r8
 800451e:	3001      	adds	r0, #1
 8004520:	d01e      	beq.n	8004560 <_printf_common+0xa4>
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	68e5      	ldr	r5, [r4, #12]
 8004526:	6832      	ldr	r2, [r6, #0]
 8004528:	f003 0306 	and.w	r3, r3, #6
 800452c:	2b04      	cmp	r3, #4
 800452e:	bf08      	it	eq
 8004530:	1aad      	subeq	r5, r5, r2
 8004532:	68a3      	ldr	r3, [r4, #8]
 8004534:	6922      	ldr	r2, [r4, #16]
 8004536:	bf0c      	ite	eq
 8004538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800453c:	2500      	movne	r5, #0
 800453e:	4293      	cmp	r3, r2
 8004540:	bfc4      	itt	gt
 8004542:	1a9b      	subgt	r3, r3, r2
 8004544:	18ed      	addgt	r5, r5, r3
 8004546:	2600      	movs	r6, #0
 8004548:	341a      	adds	r4, #26
 800454a:	42b5      	cmp	r5, r6
 800454c:	d11a      	bne.n	8004584 <_printf_common+0xc8>
 800454e:	2000      	movs	r0, #0
 8004550:	e008      	b.n	8004564 <_printf_common+0xa8>
 8004552:	2301      	movs	r3, #1
 8004554:	4652      	mov	r2, sl
 8004556:	4649      	mov	r1, r9
 8004558:	4638      	mov	r0, r7
 800455a:	47c0      	blx	r8
 800455c:	3001      	adds	r0, #1
 800455e:	d103      	bne.n	8004568 <_printf_common+0xac>
 8004560:	f04f 30ff 	mov.w	r0, #4294967295
 8004564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004568:	3501      	adds	r5, #1
 800456a:	e7c6      	b.n	80044fa <_printf_common+0x3e>
 800456c:	18e1      	adds	r1, r4, r3
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	2030      	movs	r0, #48	; 0x30
 8004572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004576:	4422      	add	r2, r4
 8004578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800457c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004580:	3302      	adds	r3, #2
 8004582:	e7c7      	b.n	8004514 <_printf_common+0x58>
 8004584:	2301      	movs	r3, #1
 8004586:	4622      	mov	r2, r4
 8004588:	4649      	mov	r1, r9
 800458a:	4638      	mov	r0, r7
 800458c:	47c0      	blx	r8
 800458e:	3001      	adds	r0, #1
 8004590:	d0e6      	beq.n	8004560 <_printf_common+0xa4>
 8004592:	3601      	adds	r6, #1
 8004594:	e7d9      	b.n	800454a <_printf_common+0x8e>
	...

08004598 <_printf_i>:
 8004598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800459c:	7e0f      	ldrb	r7, [r1, #24]
 800459e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045a0:	2f78      	cmp	r7, #120	; 0x78
 80045a2:	4691      	mov	r9, r2
 80045a4:	4680      	mov	r8, r0
 80045a6:	460c      	mov	r4, r1
 80045a8:	469a      	mov	sl, r3
 80045aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045ae:	d807      	bhi.n	80045c0 <_printf_i+0x28>
 80045b0:	2f62      	cmp	r7, #98	; 0x62
 80045b2:	d80a      	bhi.n	80045ca <_printf_i+0x32>
 80045b4:	2f00      	cmp	r7, #0
 80045b6:	f000 80d8 	beq.w	800476a <_printf_i+0x1d2>
 80045ba:	2f58      	cmp	r7, #88	; 0x58
 80045bc:	f000 80a3 	beq.w	8004706 <_printf_i+0x16e>
 80045c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045c8:	e03a      	b.n	8004640 <_printf_i+0xa8>
 80045ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045ce:	2b15      	cmp	r3, #21
 80045d0:	d8f6      	bhi.n	80045c0 <_printf_i+0x28>
 80045d2:	a101      	add	r1, pc, #4	; (adr r1, 80045d8 <_printf_i+0x40>)
 80045d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045d8:	08004631 	.word	0x08004631
 80045dc:	08004645 	.word	0x08004645
 80045e0:	080045c1 	.word	0x080045c1
 80045e4:	080045c1 	.word	0x080045c1
 80045e8:	080045c1 	.word	0x080045c1
 80045ec:	080045c1 	.word	0x080045c1
 80045f0:	08004645 	.word	0x08004645
 80045f4:	080045c1 	.word	0x080045c1
 80045f8:	080045c1 	.word	0x080045c1
 80045fc:	080045c1 	.word	0x080045c1
 8004600:	080045c1 	.word	0x080045c1
 8004604:	08004751 	.word	0x08004751
 8004608:	08004675 	.word	0x08004675
 800460c:	08004733 	.word	0x08004733
 8004610:	080045c1 	.word	0x080045c1
 8004614:	080045c1 	.word	0x080045c1
 8004618:	08004773 	.word	0x08004773
 800461c:	080045c1 	.word	0x080045c1
 8004620:	08004675 	.word	0x08004675
 8004624:	080045c1 	.word	0x080045c1
 8004628:	080045c1 	.word	0x080045c1
 800462c:	0800473b 	.word	0x0800473b
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	1d1a      	adds	r2, r3, #4
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	602a      	str	r2, [r5, #0]
 8004638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800463c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004640:	2301      	movs	r3, #1
 8004642:	e0a3      	b.n	800478c <_printf_i+0x1f4>
 8004644:	6820      	ldr	r0, [r4, #0]
 8004646:	6829      	ldr	r1, [r5, #0]
 8004648:	0606      	lsls	r6, r0, #24
 800464a:	f101 0304 	add.w	r3, r1, #4
 800464e:	d50a      	bpl.n	8004666 <_printf_i+0xce>
 8004650:	680e      	ldr	r6, [r1, #0]
 8004652:	602b      	str	r3, [r5, #0]
 8004654:	2e00      	cmp	r6, #0
 8004656:	da03      	bge.n	8004660 <_printf_i+0xc8>
 8004658:	232d      	movs	r3, #45	; 0x2d
 800465a:	4276      	negs	r6, r6
 800465c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004660:	485e      	ldr	r0, [pc, #376]	; (80047dc <_printf_i+0x244>)
 8004662:	230a      	movs	r3, #10
 8004664:	e019      	b.n	800469a <_printf_i+0x102>
 8004666:	680e      	ldr	r6, [r1, #0]
 8004668:	602b      	str	r3, [r5, #0]
 800466a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800466e:	bf18      	it	ne
 8004670:	b236      	sxthne	r6, r6
 8004672:	e7ef      	b.n	8004654 <_printf_i+0xbc>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	6820      	ldr	r0, [r4, #0]
 8004678:	1d19      	adds	r1, r3, #4
 800467a:	6029      	str	r1, [r5, #0]
 800467c:	0601      	lsls	r1, r0, #24
 800467e:	d501      	bpl.n	8004684 <_printf_i+0xec>
 8004680:	681e      	ldr	r6, [r3, #0]
 8004682:	e002      	b.n	800468a <_printf_i+0xf2>
 8004684:	0646      	lsls	r6, r0, #25
 8004686:	d5fb      	bpl.n	8004680 <_printf_i+0xe8>
 8004688:	881e      	ldrh	r6, [r3, #0]
 800468a:	4854      	ldr	r0, [pc, #336]	; (80047dc <_printf_i+0x244>)
 800468c:	2f6f      	cmp	r7, #111	; 0x6f
 800468e:	bf0c      	ite	eq
 8004690:	2308      	moveq	r3, #8
 8004692:	230a      	movne	r3, #10
 8004694:	2100      	movs	r1, #0
 8004696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800469a:	6865      	ldr	r5, [r4, #4]
 800469c:	60a5      	str	r5, [r4, #8]
 800469e:	2d00      	cmp	r5, #0
 80046a0:	bfa2      	ittt	ge
 80046a2:	6821      	ldrge	r1, [r4, #0]
 80046a4:	f021 0104 	bicge.w	r1, r1, #4
 80046a8:	6021      	strge	r1, [r4, #0]
 80046aa:	b90e      	cbnz	r6, 80046b0 <_printf_i+0x118>
 80046ac:	2d00      	cmp	r5, #0
 80046ae:	d04d      	beq.n	800474c <_printf_i+0x1b4>
 80046b0:	4615      	mov	r5, r2
 80046b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80046b6:	fb03 6711 	mls	r7, r3, r1, r6
 80046ba:	5dc7      	ldrb	r7, [r0, r7]
 80046bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046c0:	4637      	mov	r7, r6
 80046c2:	42bb      	cmp	r3, r7
 80046c4:	460e      	mov	r6, r1
 80046c6:	d9f4      	bls.n	80046b2 <_printf_i+0x11a>
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d10b      	bne.n	80046e4 <_printf_i+0x14c>
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	07de      	lsls	r6, r3, #31
 80046d0:	d508      	bpl.n	80046e4 <_printf_i+0x14c>
 80046d2:	6923      	ldr	r3, [r4, #16]
 80046d4:	6861      	ldr	r1, [r4, #4]
 80046d6:	4299      	cmp	r1, r3
 80046d8:	bfde      	ittt	le
 80046da:	2330      	movle	r3, #48	; 0x30
 80046dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046e4:	1b52      	subs	r2, r2, r5
 80046e6:	6122      	str	r2, [r4, #16]
 80046e8:	f8cd a000 	str.w	sl, [sp]
 80046ec:	464b      	mov	r3, r9
 80046ee:	aa03      	add	r2, sp, #12
 80046f0:	4621      	mov	r1, r4
 80046f2:	4640      	mov	r0, r8
 80046f4:	f7ff fee2 	bl	80044bc <_printf_common>
 80046f8:	3001      	adds	r0, #1
 80046fa:	d14c      	bne.n	8004796 <_printf_i+0x1fe>
 80046fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004700:	b004      	add	sp, #16
 8004702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004706:	4835      	ldr	r0, [pc, #212]	; (80047dc <_printf_i+0x244>)
 8004708:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800470c:	6829      	ldr	r1, [r5, #0]
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	f851 6b04 	ldr.w	r6, [r1], #4
 8004714:	6029      	str	r1, [r5, #0]
 8004716:	061d      	lsls	r5, r3, #24
 8004718:	d514      	bpl.n	8004744 <_printf_i+0x1ac>
 800471a:	07df      	lsls	r7, r3, #31
 800471c:	bf44      	itt	mi
 800471e:	f043 0320 	orrmi.w	r3, r3, #32
 8004722:	6023      	strmi	r3, [r4, #0]
 8004724:	b91e      	cbnz	r6, 800472e <_printf_i+0x196>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	f023 0320 	bic.w	r3, r3, #32
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	2310      	movs	r3, #16
 8004730:	e7b0      	b.n	8004694 <_printf_i+0xfc>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	f043 0320 	orr.w	r3, r3, #32
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	2378      	movs	r3, #120	; 0x78
 800473c:	4828      	ldr	r0, [pc, #160]	; (80047e0 <_printf_i+0x248>)
 800473e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004742:	e7e3      	b.n	800470c <_printf_i+0x174>
 8004744:	0659      	lsls	r1, r3, #25
 8004746:	bf48      	it	mi
 8004748:	b2b6      	uxthmi	r6, r6
 800474a:	e7e6      	b.n	800471a <_printf_i+0x182>
 800474c:	4615      	mov	r5, r2
 800474e:	e7bb      	b.n	80046c8 <_printf_i+0x130>
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	6826      	ldr	r6, [r4, #0]
 8004754:	6961      	ldr	r1, [r4, #20]
 8004756:	1d18      	adds	r0, r3, #4
 8004758:	6028      	str	r0, [r5, #0]
 800475a:	0635      	lsls	r5, r6, #24
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	d501      	bpl.n	8004764 <_printf_i+0x1cc>
 8004760:	6019      	str	r1, [r3, #0]
 8004762:	e002      	b.n	800476a <_printf_i+0x1d2>
 8004764:	0670      	lsls	r0, r6, #25
 8004766:	d5fb      	bpl.n	8004760 <_printf_i+0x1c8>
 8004768:	8019      	strh	r1, [r3, #0]
 800476a:	2300      	movs	r3, #0
 800476c:	6123      	str	r3, [r4, #16]
 800476e:	4615      	mov	r5, r2
 8004770:	e7ba      	b.n	80046e8 <_printf_i+0x150>
 8004772:	682b      	ldr	r3, [r5, #0]
 8004774:	1d1a      	adds	r2, r3, #4
 8004776:	602a      	str	r2, [r5, #0]
 8004778:	681d      	ldr	r5, [r3, #0]
 800477a:	6862      	ldr	r2, [r4, #4]
 800477c:	2100      	movs	r1, #0
 800477e:	4628      	mov	r0, r5
 8004780:	f7fb fd36 	bl	80001f0 <memchr>
 8004784:	b108      	cbz	r0, 800478a <_printf_i+0x1f2>
 8004786:	1b40      	subs	r0, r0, r5
 8004788:	6060      	str	r0, [r4, #4]
 800478a:	6863      	ldr	r3, [r4, #4]
 800478c:	6123      	str	r3, [r4, #16]
 800478e:	2300      	movs	r3, #0
 8004790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004794:	e7a8      	b.n	80046e8 <_printf_i+0x150>
 8004796:	6923      	ldr	r3, [r4, #16]
 8004798:	462a      	mov	r2, r5
 800479a:	4649      	mov	r1, r9
 800479c:	4640      	mov	r0, r8
 800479e:	47d0      	blx	sl
 80047a0:	3001      	adds	r0, #1
 80047a2:	d0ab      	beq.n	80046fc <_printf_i+0x164>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	079b      	lsls	r3, r3, #30
 80047a8:	d413      	bmi.n	80047d2 <_printf_i+0x23a>
 80047aa:	68e0      	ldr	r0, [r4, #12]
 80047ac:	9b03      	ldr	r3, [sp, #12]
 80047ae:	4298      	cmp	r0, r3
 80047b0:	bfb8      	it	lt
 80047b2:	4618      	movlt	r0, r3
 80047b4:	e7a4      	b.n	8004700 <_printf_i+0x168>
 80047b6:	2301      	movs	r3, #1
 80047b8:	4632      	mov	r2, r6
 80047ba:	4649      	mov	r1, r9
 80047bc:	4640      	mov	r0, r8
 80047be:	47d0      	blx	sl
 80047c0:	3001      	adds	r0, #1
 80047c2:	d09b      	beq.n	80046fc <_printf_i+0x164>
 80047c4:	3501      	adds	r5, #1
 80047c6:	68e3      	ldr	r3, [r4, #12]
 80047c8:	9903      	ldr	r1, [sp, #12]
 80047ca:	1a5b      	subs	r3, r3, r1
 80047cc:	42ab      	cmp	r3, r5
 80047ce:	dcf2      	bgt.n	80047b6 <_printf_i+0x21e>
 80047d0:	e7eb      	b.n	80047aa <_printf_i+0x212>
 80047d2:	2500      	movs	r5, #0
 80047d4:	f104 0619 	add.w	r6, r4, #25
 80047d8:	e7f5      	b.n	80047c6 <_printf_i+0x22e>
 80047da:	bf00      	nop
 80047dc:	08005251 	.word	0x08005251
 80047e0:	08005262 	.word	0x08005262

080047e4 <_sbrk_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4d06      	ldr	r5, [pc, #24]	; (8004800 <_sbrk_r+0x1c>)
 80047e8:	2300      	movs	r3, #0
 80047ea:	4604      	mov	r4, r0
 80047ec:	4608      	mov	r0, r1
 80047ee:	602b      	str	r3, [r5, #0]
 80047f0:	f7fc fa88 	bl	8000d04 <_sbrk>
 80047f4:	1c43      	adds	r3, r0, #1
 80047f6:	d102      	bne.n	80047fe <_sbrk_r+0x1a>
 80047f8:	682b      	ldr	r3, [r5, #0]
 80047fa:	b103      	cbz	r3, 80047fe <_sbrk_r+0x1a>
 80047fc:	6023      	str	r3, [r4, #0]
 80047fe:	bd38      	pop	{r3, r4, r5, pc}
 8004800:	20000aa4 	.word	0x20000aa4

08004804 <__swbuf_r>:
 8004804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004806:	460e      	mov	r6, r1
 8004808:	4614      	mov	r4, r2
 800480a:	4605      	mov	r5, r0
 800480c:	b118      	cbz	r0, 8004816 <__swbuf_r+0x12>
 800480e:	6983      	ldr	r3, [r0, #24]
 8004810:	b90b      	cbnz	r3, 8004816 <__swbuf_r+0x12>
 8004812:	f000 f9d9 	bl	8004bc8 <__sinit>
 8004816:	4b21      	ldr	r3, [pc, #132]	; (800489c <__swbuf_r+0x98>)
 8004818:	429c      	cmp	r4, r3
 800481a:	d12b      	bne.n	8004874 <__swbuf_r+0x70>
 800481c:	686c      	ldr	r4, [r5, #4]
 800481e:	69a3      	ldr	r3, [r4, #24]
 8004820:	60a3      	str	r3, [r4, #8]
 8004822:	89a3      	ldrh	r3, [r4, #12]
 8004824:	071a      	lsls	r2, r3, #28
 8004826:	d52f      	bpl.n	8004888 <__swbuf_r+0x84>
 8004828:	6923      	ldr	r3, [r4, #16]
 800482a:	b36b      	cbz	r3, 8004888 <__swbuf_r+0x84>
 800482c:	6923      	ldr	r3, [r4, #16]
 800482e:	6820      	ldr	r0, [r4, #0]
 8004830:	1ac0      	subs	r0, r0, r3
 8004832:	6963      	ldr	r3, [r4, #20]
 8004834:	b2f6      	uxtb	r6, r6
 8004836:	4283      	cmp	r3, r0
 8004838:	4637      	mov	r7, r6
 800483a:	dc04      	bgt.n	8004846 <__swbuf_r+0x42>
 800483c:	4621      	mov	r1, r4
 800483e:	4628      	mov	r0, r5
 8004840:	f000 f92e 	bl	8004aa0 <_fflush_r>
 8004844:	bb30      	cbnz	r0, 8004894 <__swbuf_r+0x90>
 8004846:	68a3      	ldr	r3, [r4, #8]
 8004848:	3b01      	subs	r3, #1
 800484a:	60a3      	str	r3, [r4, #8]
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	6022      	str	r2, [r4, #0]
 8004852:	701e      	strb	r6, [r3, #0]
 8004854:	6963      	ldr	r3, [r4, #20]
 8004856:	3001      	adds	r0, #1
 8004858:	4283      	cmp	r3, r0
 800485a:	d004      	beq.n	8004866 <__swbuf_r+0x62>
 800485c:	89a3      	ldrh	r3, [r4, #12]
 800485e:	07db      	lsls	r3, r3, #31
 8004860:	d506      	bpl.n	8004870 <__swbuf_r+0x6c>
 8004862:	2e0a      	cmp	r6, #10
 8004864:	d104      	bne.n	8004870 <__swbuf_r+0x6c>
 8004866:	4621      	mov	r1, r4
 8004868:	4628      	mov	r0, r5
 800486a:	f000 f919 	bl	8004aa0 <_fflush_r>
 800486e:	b988      	cbnz	r0, 8004894 <__swbuf_r+0x90>
 8004870:	4638      	mov	r0, r7
 8004872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <__swbuf_r+0x9c>)
 8004876:	429c      	cmp	r4, r3
 8004878:	d101      	bne.n	800487e <__swbuf_r+0x7a>
 800487a:	68ac      	ldr	r4, [r5, #8]
 800487c:	e7cf      	b.n	800481e <__swbuf_r+0x1a>
 800487e:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <__swbuf_r+0xa0>)
 8004880:	429c      	cmp	r4, r3
 8004882:	bf08      	it	eq
 8004884:	68ec      	ldreq	r4, [r5, #12]
 8004886:	e7ca      	b.n	800481e <__swbuf_r+0x1a>
 8004888:	4621      	mov	r1, r4
 800488a:	4628      	mov	r0, r5
 800488c:	f000 f80c 	bl	80048a8 <__swsetup_r>
 8004890:	2800      	cmp	r0, #0
 8004892:	d0cb      	beq.n	800482c <__swbuf_r+0x28>
 8004894:	f04f 37ff 	mov.w	r7, #4294967295
 8004898:	e7ea      	b.n	8004870 <__swbuf_r+0x6c>
 800489a:	bf00      	nop
 800489c:	08005294 	.word	0x08005294
 80048a0:	080052b4 	.word	0x080052b4
 80048a4:	08005274 	.word	0x08005274

080048a8 <__swsetup_r>:
 80048a8:	4b32      	ldr	r3, [pc, #200]	; (8004974 <__swsetup_r+0xcc>)
 80048aa:	b570      	push	{r4, r5, r6, lr}
 80048ac:	681d      	ldr	r5, [r3, #0]
 80048ae:	4606      	mov	r6, r0
 80048b0:	460c      	mov	r4, r1
 80048b2:	b125      	cbz	r5, 80048be <__swsetup_r+0x16>
 80048b4:	69ab      	ldr	r3, [r5, #24]
 80048b6:	b913      	cbnz	r3, 80048be <__swsetup_r+0x16>
 80048b8:	4628      	mov	r0, r5
 80048ba:	f000 f985 	bl	8004bc8 <__sinit>
 80048be:	4b2e      	ldr	r3, [pc, #184]	; (8004978 <__swsetup_r+0xd0>)
 80048c0:	429c      	cmp	r4, r3
 80048c2:	d10f      	bne.n	80048e4 <__swsetup_r+0x3c>
 80048c4:	686c      	ldr	r4, [r5, #4]
 80048c6:	89a3      	ldrh	r3, [r4, #12]
 80048c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048cc:	0719      	lsls	r1, r3, #28
 80048ce:	d42c      	bmi.n	800492a <__swsetup_r+0x82>
 80048d0:	06dd      	lsls	r5, r3, #27
 80048d2:	d411      	bmi.n	80048f8 <__swsetup_r+0x50>
 80048d4:	2309      	movs	r3, #9
 80048d6:	6033      	str	r3, [r6, #0]
 80048d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048dc:	81a3      	strh	r3, [r4, #12]
 80048de:	f04f 30ff 	mov.w	r0, #4294967295
 80048e2:	e03e      	b.n	8004962 <__swsetup_r+0xba>
 80048e4:	4b25      	ldr	r3, [pc, #148]	; (800497c <__swsetup_r+0xd4>)
 80048e6:	429c      	cmp	r4, r3
 80048e8:	d101      	bne.n	80048ee <__swsetup_r+0x46>
 80048ea:	68ac      	ldr	r4, [r5, #8]
 80048ec:	e7eb      	b.n	80048c6 <__swsetup_r+0x1e>
 80048ee:	4b24      	ldr	r3, [pc, #144]	; (8004980 <__swsetup_r+0xd8>)
 80048f0:	429c      	cmp	r4, r3
 80048f2:	bf08      	it	eq
 80048f4:	68ec      	ldreq	r4, [r5, #12]
 80048f6:	e7e6      	b.n	80048c6 <__swsetup_r+0x1e>
 80048f8:	0758      	lsls	r0, r3, #29
 80048fa:	d512      	bpl.n	8004922 <__swsetup_r+0x7a>
 80048fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048fe:	b141      	cbz	r1, 8004912 <__swsetup_r+0x6a>
 8004900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004904:	4299      	cmp	r1, r3
 8004906:	d002      	beq.n	800490e <__swsetup_r+0x66>
 8004908:	4630      	mov	r0, r6
 800490a:	f7ff fa41 	bl	8003d90 <_free_r>
 800490e:	2300      	movs	r3, #0
 8004910:	6363      	str	r3, [r4, #52]	; 0x34
 8004912:	89a3      	ldrh	r3, [r4, #12]
 8004914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004918:	81a3      	strh	r3, [r4, #12]
 800491a:	2300      	movs	r3, #0
 800491c:	6063      	str	r3, [r4, #4]
 800491e:	6923      	ldr	r3, [r4, #16]
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	89a3      	ldrh	r3, [r4, #12]
 8004924:	f043 0308 	orr.w	r3, r3, #8
 8004928:	81a3      	strh	r3, [r4, #12]
 800492a:	6923      	ldr	r3, [r4, #16]
 800492c:	b94b      	cbnz	r3, 8004942 <__swsetup_r+0x9a>
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004938:	d003      	beq.n	8004942 <__swsetup_r+0x9a>
 800493a:	4621      	mov	r1, r4
 800493c:	4630      	mov	r0, r6
 800493e:	f000 fa09 	bl	8004d54 <__smakebuf_r>
 8004942:	89a0      	ldrh	r0, [r4, #12]
 8004944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004948:	f010 0301 	ands.w	r3, r0, #1
 800494c:	d00a      	beq.n	8004964 <__swsetup_r+0xbc>
 800494e:	2300      	movs	r3, #0
 8004950:	60a3      	str	r3, [r4, #8]
 8004952:	6963      	ldr	r3, [r4, #20]
 8004954:	425b      	negs	r3, r3
 8004956:	61a3      	str	r3, [r4, #24]
 8004958:	6923      	ldr	r3, [r4, #16]
 800495a:	b943      	cbnz	r3, 800496e <__swsetup_r+0xc6>
 800495c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004960:	d1ba      	bne.n	80048d8 <__swsetup_r+0x30>
 8004962:	bd70      	pop	{r4, r5, r6, pc}
 8004964:	0781      	lsls	r1, r0, #30
 8004966:	bf58      	it	pl
 8004968:	6963      	ldrpl	r3, [r4, #20]
 800496a:	60a3      	str	r3, [r4, #8]
 800496c:	e7f4      	b.n	8004958 <__swsetup_r+0xb0>
 800496e:	2000      	movs	r0, #0
 8004970:	e7f7      	b.n	8004962 <__swsetup_r+0xba>
 8004972:	bf00      	nop
 8004974:	2000000c 	.word	0x2000000c
 8004978:	08005294 	.word	0x08005294
 800497c:	080052b4 	.word	0x080052b4
 8004980:	08005274 	.word	0x08005274

08004984 <abort>:
 8004984:	b508      	push	{r3, lr}
 8004986:	2006      	movs	r0, #6
 8004988:	f000 faa2 	bl	8004ed0 <raise>
 800498c:	2001      	movs	r0, #1
 800498e:	f7fc f941 	bl	8000c14 <_exit>
	...

08004994 <__sflush_r>:
 8004994:	898a      	ldrh	r2, [r1, #12]
 8004996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499a:	4605      	mov	r5, r0
 800499c:	0710      	lsls	r0, r2, #28
 800499e:	460c      	mov	r4, r1
 80049a0:	d458      	bmi.n	8004a54 <__sflush_r+0xc0>
 80049a2:	684b      	ldr	r3, [r1, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	dc05      	bgt.n	80049b4 <__sflush_r+0x20>
 80049a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	dc02      	bgt.n	80049b4 <__sflush_r+0x20>
 80049ae:	2000      	movs	r0, #0
 80049b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049b6:	2e00      	cmp	r6, #0
 80049b8:	d0f9      	beq.n	80049ae <__sflush_r+0x1a>
 80049ba:	2300      	movs	r3, #0
 80049bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049c0:	682f      	ldr	r7, [r5, #0]
 80049c2:	602b      	str	r3, [r5, #0]
 80049c4:	d032      	beq.n	8004a2c <__sflush_r+0x98>
 80049c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049c8:	89a3      	ldrh	r3, [r4, #12]
 80049ca:	075a      	lsls	r2, r3, #29
 80049cc:	d505      	bpl.n	80049da <__sflush_r+0x46>
 80049ce:	6863      	ldr	r3, [r4, #4]
 80049d0:	1ac0      	subs	r0, r0, r3
 80049d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049d4:	b10b      	cbz	r3, 80049da <__sflush_r+0x46>
 80049d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049d8:	1ac0      	subs	r0, r0, r3
 80049da:	2300      	movs	r3, #0
 80049dc:	4602      	mov	r2, r0
 80049de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049e0:	6a21      	ldr	r1, [r4, #32]
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b0      	blx	r6
 80049e6:	1c43      	adds	r3, r0, #1
 80049e8:	89a3      	ldrh	r3, [r4, #12]
 80049ea:	d106      	bne.n	80049fa <__sflush_r+0x66>
 80049ec:	6829      	ldr	r1, [r5, #0]
 80049ee:	291d      	cmp	r1, #29
 80049f0:	d82c      	bhi.n	8004a4c <__sflush_r+0xb8>
 80049f2:	4a2a      	ldr	r2, [pc, #168]	; (8004a9c <__sflush_r+0x108>)
 80049f4:	40ca      	lsrs	r2, r1
 80049f6:	07d6      	lsls	r6, r2, #31
 80049f8:	d528      	bpl.n	8004a4c <__sflush_r+0xb8>
 80049fa:	2200      	movs	r2, #0
 80049fc:	6062      	str	r2, [r4, #4]
 80049fe:	04d9      	lsls	r1, r3, #19
 8004a00:	6922      	ldr	r2, [r4, #16]
 8004a02:	6022      	str	r2, [r4, #0]
 8004a04:	d504      	bpl.n	8004a10 <__sflush_r+0x7c>
 8004a06:	1c42      	adds	r2, r0, #1
 8004a08:	d101      	bne.n	8004a0e <__sflush_r+0x7a>
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	b903      	cbnz	r3, 8004a10 <__sflush_r+0x7c>
 8004a0e:	6560      	str	r0, [r4, #84]	; 0x54
 8004a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a12:	602f      	str	r7, [r5, #0]
 8004a14:	2900      	cmp	r1, #0
 8004a16:	d0ca      	beq.n	80049ae <__sflush_r+0x1a>
 8004a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a1c:	4299      	cmp	r1, r3
 8004a1e:	d002      	beq.n	8004a26 <__sflush_r+0x92>
 8004a20:	4628      	mov	r0, r5
 8004a22:	f7ff f9b5 	bl	8003d90 <_free_r>
 8004a26:	2000      	movs	r0, #0
 8004a28:	6360      	str	r0, [r4, #52]	; 0x34
 8004a2a:	e7c1      	b.n	80049b0 <__sflush_r+0x1c>
 8004a2c:	6a21      	ldr	r1, [r4, #32]
 8004a2e:	2301      	movs	r3, #1
 8004a30:	4628      	mov	r0, r5
 8004a32:	47b0      	blx	r6
 8004a34:	1c41      	adds	r1, r0, #1
 8004a36:	d1c7      	bne.n	80049c8 <__sflush_r+0x34>
 8004a38:	682b      	ldr	r3, [r5, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0c4      	beq.n	80049c8 <__sflush_r+0x34>
 8004a3e:	2b1d      	cmp	r3, #29
 8004a40:	d001      	beq.n	8004a46 <__sflush_r+0xb2>
 8004a42:	2b16      	cmp	r3, #22
 8004a44:	d101      	bne.n	8004a4a <__sflush_r+0xb6>
 8004a46:	602f      	str	r7, [r5, #0]
 8004a48:	e7b1      	b.n	80049ae <__sflush_r+0x1a>
 8004a4a:	89a3      	ldrh	r3, [r4, #12]
 8004a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a50:	81a3      	strh	r3, [r4, #12]
 8004a52:	e7ad      	b.n	80049b0 <__sflush_r+0x1c>
 8004a54:	690f      	ldr	r7, [r1, #16]
 8004a56:	2f00      	cmp	r7, #0
 8004a58:	d0a9      	beq.n	80049ae <__sflush_r+0x1a>
 8004a5a:	0793      	lsls	r3, r2, #30
 8004a5c:	680e      	ldr	r6, [r1, #0]
 8004a5e:	bf08      	it	eq
 8004a60:	694b      	ldreq	r3, [r1, #20]
 8004a62:	600f      	str	r7, [r1, #0]
 8004a64:	bf18      	it	ne
 8004a66:	2300      	movne	r3, #0
 8004a68:	eba6 0807 	sub.w	r8, r6, r7
 8004a6c:	608b      	str	r3, [r1, #8]
 8004a6e:	f1b8 0f00 	cmp.w	r8, #0
 8004a72:	dd9c      	ble.n	80049ae <__sflush_r+0x1a>
 8004a74:	6a21      	ldr	r1, [r4, #32]
 8004a76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a78:	4643      	mov	r3, r8
 8004a7a:	463a      	mov	r2, r7
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	47b0      	blx	r6
 8004a80:	2800      	cmp	r0, #0
 8004a82:	dc06      	bgt.n	8004a92 <__sflush_r+0xfe>
 8004a84:	89a3      	ldrh	r3, [r4, #12]
 8004a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a8a:	81a3      	strh	r3, [r4, #12]
 8004a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a90:	e78e      	b.n	80049b0 <__sflush_r+0x1c>
 8004a92:	4407      	add	r7, r0
 8004a94:	eba8 0800 	sub.w	r8, r8, r0
 8004a98:	e7e9      	b.n	8004a6e <__sflush_r+0xda>
 8004a9a:	bf00      	nop
 8004a9c:	20400001 	.word	0x20400001

08004aa0 <_fflush_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	690b      	ldr	r3, [r1, #16]
 8004aa4:	4605      	mov	r5, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	b913      	cbnz	r3, 8004ab0 <_fflush_r+0x10>
 8004aaa:	2500      	movs	r5, #0
 8004aac:	4628      	mov	r0, r5
 8004aae:	bd38      	pop	{r3, r4, r5, pc}
 8004ab0:	b118      	cbz	r0, 8004aba <_fflush_r+0x1a>
 8004ab2:	6983      	ldr	r3, [r0, #24]
 8004ab4:	b90b      	cbnz	r3, 8004aba <_fflush_r+0x1a>
 8004ab6:	f000 f887 	bl	8004bc8 <__sinit>
 8004aba:	4b14      	ldr	r3, [pc, #80]	; (8004b0c <_fflush_r+0x6c>)
 8004abc:	429c      	cmp	r4, r3
 8004abe:	d11b      	bne.n	8004af8 <_fflush_r+0x58>
 8004ac0:	686c      	ldr	r4, [r5, #4]
 8004ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0ef      	beq.n	8004aaa <_fflush_r+0xa>
 8004aca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004acc:	07d0      	lsls	r0, r2, #31
 8004ace:	d404      	bmi.n	8004ada <_fflush_r+0x3a>
 8004ad0:	0599      	lsls	r1, r3, #22
 8004ad2:	d402      	bmi.n	8004ada <_fflush_r+0x3a>
 8004ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ad6:	f000 f915 	bl	8004d04 <__retarget_lock_acquire_recursive>
 8004ada:	4628      	mov	r0, r5
 8004adc:	4621      	mov	r1, r4
 8004ade:	f7ff ff59 	bl	8004994 <__sflush_r>
 8004ae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ae4:	07da      	lsls	r2, r3, #31
 8004ae6:	4605      	mov	r5, r0
 8004ae8:	d4e0      	bmi.n	8004aac <_fflush_r+0xc>
 8004aea:	89a3      	ldrh	r3, [r4, #12]
 8004aec:	059b      	lsls	r3, r3, #22
 8004aee:	d4dd      	bmi.n	8004aac <_fflush_r+0xc>
 8004af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004af2:	f000 f908 	bl	8004d06 <__retarget_lock_release_recursive>
 8004af6:	e7d9      	b.n	8004aac <_fflush_r+0xc>
 8004af8:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <_fflush_r+0x70>)
 8004afa:	429c      	cmp	r4, r3
 8004afc:	d101      	bne.n	8004b02 <_fflush_r+0x62>
 8004afe:	68ac      	ldr	r4, [r5, #8]
 8004b00:	e7df      	b.n	8004ac2 <_fflush_r+0x22>
 8004b02:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <_fflush_r+0x74>)
 8004b04:	429c      	cmp	r4, r3
 8004b06:	bf08      	it	eq
 8004b08:	68ec      	ldreq	r4, [r5, #12]
 8004b0a:	e7da      	b.n	8004ac2 <_fflush_r+0x22>
 8004b0c:	08005294 	.word	0x08005294
 8004b10:	080052b4 	.word	0x080052b4
 8004b14:	08005274 	.word	0x08005274

08004b18 <std>:
 8004b18:	2300      	movs	r3, #0
 8004b1a:	b510      	push	{r4, lr}
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b26:	6083      	str	r3, [r0, #8]
 8004b28:	8181      	strh	r1, [r0, #12]
 8004b2a:	6643      	str	r3, [r0, #100]	; 0x64
 8004b2c:	81c2      	strh	r2, [r0, #14]
 8004b2e:	6183      	str	r3, [r0, #24]
 8004b30:	4619      	mov	r1, r3
 8004b32:	2208      	movs	r2, #8
 8004b34:	305c      	adds	r0, #92	; 0x5c
 8004b36:	f7ff f849 	bl	8003bcc <memset>
 8004b3a:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <std+0x38>)
 8004b3c:	6263      	str	r3, [r4, #36]	; 0x24
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <std+0x3c>)
 8004b40:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b42:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <std+0x40>)
 8004b44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <std+0x44>)
 8004b48:	6224      	str	r4, [r4, #32]
 8004b4a:	6323      	str	r3, [r4, #48]	; 0x30
 8004b4c:	bd10      	pop	{r4, pc}
 8004b4e:	bf00      	nop
 8004b50:	08004f09 	.word	0x08004f09
 8004b54:	08004f2b 	.word	0x08004f2b
 8004b58:	08004f63 	.word	0x08004f63
 8004b5c:	08004f87 	.word	0x08004f87

08004b60 <_cleanup_r>:
 8004b60:	4901      	ldr	r1, [pc, #4]	; (8004b68 <_cleanup_r+0x8>)
 8004b62:	f000 b8af 	b.w	8004cc4 <_fwalk_reent>
 8004b66:	bf00      	nop
 8004b68:	08004aa1 	.word	0x08004aa1

08004b6c <__sfmoreglue>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	2268      	movs	r2, #104	; 0x68
 8004b70:	1e4d      	subs	r5, r1, #1
 8004b72:	4355      	muls	r5, r2
 8004b74:	460e      	mov	r6, r1
 8004b76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b7a:	f7ff f975 	bl	8003e68 <_malloc_r>
 8004b7e:	4604      	mov	r4, r0
 8004b80:	b140      	cbz	r0, 8004b94 <__sfmoreglue+0x28>
 8004b82:	2100      	movs	r1, #0
 8004b84:	e9c0 1600 	strd	r1, r6, [r0]
 8004b88:	300c      	adds	r0, #12
 8004b8a:	60a0      	str	r0, [r4, #8]
 8004b8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b90:	f7ff f81c 	bl	8003bcc <memset>
 8004b94:	4620      	mov	r0, r4
 8004b96:	bd70      	pop	{r4, r5, r6, pc}

08004b98 <__sfp_lock_acquire>:
 8004b98:	4801      	ldr	r0, [pc, #4]	; (8004ba0 <__sfp_lock_acquire+0x8>)
 8004b9a:	f000 b8b3 	b.w	8004d04 <__retarget_lock_acquire_recursive>
 8004b9e:	bf00      	nop
 8004ba0:	20000aa1 	.word	0x20000aa1

08004ba4 <__sfp_lock_release>:
 8004ba4:	4801      	ldr	r0, [pc, #4]	; (8004bac <__sfp_lock_release+0x8>)
 8004ba6:	f000 b8ae 	b.w	8004d06 <__retarget_lock_release_recursive>
 8004baa:	bf00      	nop
 8004bac:	20000aa1 	.word	0x20000aa1

08004bb0 <__sinit_lock_acquire>:
 8004bb0:	4801      	ldr	r0, [pc, #4]	; (8004bb8 <__sinit_lock_acquire+0x8>)
 8004bb2:	f000 b8a7 	b.w	8004d04 <__retarget_lock_acquire_recursive>
 8004bb6:	bf00      	nop
 8004bb8:	20000aa2 	.word	0x20000aa2

08004bbc <__sinit_lock_release>:
 8004bbc:	4801      	ldr	r0, [pc, #4]	; (8004bc4 <__sinit_lock_release+0x8>)
 8004bbe:	f000 b8a2 	b.w	8004d06 <__retarget_lock_release_recursive>
 8004bc2:	bf00      	nop
 8004bc4:	20000aa2 	.word	0x20000aa2

08004bc8 <__sinit>:
 8004bc8:	b510      	push	{r4, lr}
 8004bca:	4604      	mov	r4, r0
 8004bcc:	f7ff fff0 	bl	8004bb0 <__sinit_lock_acquire>
 8004bd0:	69a3      	ldr	r3, [r4, #24]
 8004bd2:	b11b      	cbz	r3, 8004bdc <__sinit+0x14>
 8004bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd8:	f7ff bff0 	b.w	8004bbc <__sinit_lock_release>
 8004bdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004be0:	6523      	str	r3, [r4, #80]	; 0x50
 8004be2:	4b13      	ldr	r3, [pc, #76]	; (8004c30 <__sinit+0x68>)
 8004be4:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <__sinit+0x6c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004bea:	42a3      	cmp	r3, r4
 8004bec:	bf04      	itt	eq
 8004bee:	2301      	moveq	r3, #1
 8004bf0:	61a3      	streq	r3, [r4, #24]
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f000 f820 	bl	8004c38 <__sfp>
 8004bf8:	6060      	str	r0, [r4, #4]
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 f81c 	bl	8004c38 <__sfp>
 8004c00:	60a0      	str	r0, [r4, #8]
 8004c02:	4620      	mov	r0, r4
 8004c04:	f000 f818 	bl	8004c38 <__sfp>
 8004c08:	2200      	movs	r2, #0
 8004c0a:	60e0      	str	r0, [r4, #12]
 8004c0c:	2104      	movs	r1, #4
 8004c0e:	6860      	ldr	r0, [r4, #4]
 8004c10:	f7ff ff82 	bl	8004b18 <std>
 8004c14:	68a0      	ldr	r0, [r4, #8]
 8004c16:	2201      	movs	r2, #1
 8004c18:	2109      	movs	r1, #9
 8004c1a:	f7ff ff7d 	bl	8004b18 <std>
 8004c1e:	68e0      	ldr	r0, [r4, #12]
 8004c20:	2202      	movs	r2, #2
 8004c22:	2112      	movs	r1, #18
 8004c24:	f7ff ff78 	bl	8004b18 <std>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	61a3      	str	r3, [r4, #24]
 8004c2c:	e7d2      	b.n	8004bd4 <__sinit+0xc>
 8004c2e:	bf00      	nop
 8004c30:	0800518c 	.word	0x0800518c
 8004c34:	08004b61 	.word	0x08004b61

08004c38 <__sfp>:
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	4607      	mov	r7, r0
 8004c3c:	f7ff ffac 	bl	8004b98 <__sfp_lock_acquire>
 8004c40:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <__sfp+0x84>)
 8004c42:	681e      	ldr	r6, [r3, #0]
 8004c44:	69b3      	ldr	r3, [r6, #24]
 8004c46:	b913      	cbnz	r3, 8004c4e <__sfp+0x16>
 8004c48:	4630      	mov	r0, r6
 8004c4a:	f7ff ffbd 	bl	8004bc8 <__sinit>
 8004c4e:	3648      	adds	r6, #72	; 0x48
 8004c50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	d503      	bpl.n	8004c60 <__sfp+0x28>
 8004c58:	6833      	ldr	r3, [r6, #0]
 8004c5a:	b30b      	cbz	r3, 8004ca0 <__sfp+0x68>
 8004c5c:	6836      	ldr	r6, [r6, #0]
 8004c5e:	e7f7      	b.n	8004c50 <__sfp+0x18>
 8004c60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c64:	b9d5      	cbnz	r5, 8004c9c <__sfp+0x64>
 8004c66:	4b16      	ldr	r3, [pc, #88]	; (8004cc0 <__sfp+0x88>)
 8004c68:	60e3      	str	r3, [r4, #12]
 8004c6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c6e:	6665      	str	r5, [r4, #100]	; 0x64
 8004c70:	f000 f847 	bl	8004d02 <__retarget_lock_init_recursive>
 8004c74:	f7ff ff96 	bl	8004ba4 <__sfp_lock_release>
 8004c78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c80:	6025      	str	r5, [r4, #0]
 8004c82:	61a5      	str	r5, [r4, #24]
 8004c84:	2208      	movs	r2, #8
 8004c86:	4629      	mov	r1, r5
 8004c88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c8c:	f7fe ff9e 	bl	8003bcc <memset>
 8004c90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c98:	4620      	mov	r0, r4
 8004c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c9c:	3468      	adds	r4, #104	; 0x68
 8004c9e:	e7d9      	b.n	8004c54 <__sfp+0x1c>
 8004ca0:	2104      	movs	r1, #4
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	f7ff ff62 	bl	8004b6c <__sfmoreglue>
 8004ca8:	4604      	mov	r4, r0
 8004caa:	6030      	str	r0, [r6, #0]
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d1d5      	bne.n	8004c5c <__sfp+0x24>
 8004cb0:	f7ff ff78 	bl	8004ba4 <__sfp_lock_release>
 8004cb4:	230c      	movs	r3, #12
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	e7ee      	b.n	8004c98 <__sfp+0x60>
 8004cba:	bf00      	nop
 8004cbc:	0800518c 	.word	0x0800518c
 8004cc0:	ffff0001 	.word	0xffff0001

08004cc4 <_fwalk_reent>:
 8004cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cc8:	4606      	mov	r6, r0
 8004cca:	4688      	mov	r8, r1
 8004ccc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004cd0:	2700      	movs	r7, #0
 8004cd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cd6:	f1b9 0901 	subs.w	r9, r9, #1
 8004cda:	d505      	bpl.n	8004ce8 <_fwalk_reent+0x24>
 8004cdc:	6824      	ldr	r4, [r4, #0]
 8004cde:	2c00      	cmp	r4, #0
 8004ce0:	d1f7      	bne.n	8004cd2 <_fwalk_reent+0xe>
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ce8:	89ab      	ldrh	r3, [r5, #12]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d907      	bls.n	8004cfe <_fwalk_reent+0x3a>
 8004cee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	d003      	beq.n	8004cfe <_fwalk_reent+0x3a>
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	47c0      	blx	r8
 8004cfc:	4307      	orrs	r7, r0
 8004cfe:	3568      	adds	r5, #104	; 0x68
 8004d00:	e7e9      	b.n	8004cd6 <_fwalk_reent+0x12>

08004d02 <__retarget_lock_init_recursive>:
 8004d02:	4770      	bx	lr

08004d04 <__retarget_lock_acquire_recursive>:
 8004d04:	4770      	bx	lr

08004d06 <__retarget_lock_release_recursive>:
 8004d06:	4770      	bx	lr

08004d08 <__swhatbuf_r>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	460e      	mov	r6, r1
 8004d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d10:	2900      	cmp	r1, #0
 8004d12:	b096      	sub	sp, #88	; 0x58
 8004d14:	4614      	mov	r4, r2
 8004d16:	461d      	mov	r5, r3
 8004d18:	da08      	bge.n	8004d2c <__swhatbuf_r+0x24>
 8004d1a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	602a      	str	r2, [r5, #0]
 8004d22:	061a      	lsls	r2, r3, #24
 8004d24:	d410      	bmi.n	8004d48 <__swhatbuf_r+0x40>
 8004d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d2a:	e00e      	b.n	8004d4a <__swhatbuf_r+0x42>
 8004d2c:	466a      	mov	r2, sp
 8004d2e:	f000 f951 	bl	8004fd4 <_fstat_r>
 8004d32:	2800      	cmp	r0, #0
 8004d34:	dbf1      	blt.n	8004d1a <__swhatbuf_r+0x12>
 8004d36:	9a01      	ldr	r2, [sp, #4]
 8004d38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d3c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d40:	425a      	negs	r2, r3
 8004d42:	415a      	adcs	r2, r3
 8004d44:	602a      	str	r2, [r5, #0]
 8004d46:	e7ee      	b.n	8004d26 <__swhatbuf_r+0x1e>
 8004d48:	2340      	movs	r3, #64	; 0x40
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	b016      	add	sp, #88	; 0x58
 8004d50:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d54 <__smakebuf_r>:
 8004d54:	898b      	ldrh	r3, [r1, #12]
 8004d56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d58:	079d      	lsls	r5, r3, #30
 8004d5a:	4606      	mov	r6, r0
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	d507      	bpl.n	8004d70 <__smakebuf_r+0x1c>
 8004d60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	6123      	str	r3, [r4, #16]
 8004d68:	2301      	movs	r3, #1
 8004d6a:	6163      	str	r3, [r4, #20]
 8004d6c:	b002      	add	sp, #8
 8004d6e:	bd70      	pop	{r4, r5, r6, pc}
 8004d70:	ab01      	add	r3, sp, #4
 8004d72:	466a      	mov	r2, sp
 8004d74:	f7ff ffc8 	bl	8004d08 <__swhatbuf_r>
 8004d78:	9900      	ldr	r1, [sp, #0]
 8004d7a:	4605      	mov	r5, r0
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	f7ff f873 	bl	8003e68 <_malloc_r>
 8004d82:	b948      	cbnz	r0, 8004d98 <__smakebuf_r+0x44>
 8004d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d88:	059a      	lsls	r2, r3, #22
 8004d8a:	d4ef      	bmi.n	8004d6c <__smakebuf_r+0x18>
 8004d8c:	f023 0303 	bic.w	r3, r3, #3
 8004d90:	f043 0302 	orr.w	r3, r3, #2
 8004d94:	81a3      	strh	r3, [r4, #12]
 8004d96:	e7e3      	b.n	8004d60 <__smakebuf_r+0xc>
 8004d98:	4b0d      	ldr	r3, [pc, #52]	; (8004dd0 <__smakebuf_r+0x7c>)
 8004d9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	6020      	str	r0, [r4, #0]
 8004da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da4:	81a3      	strh	r3, [r4, #12]
 8004da6:	9b00      	ldr	r3, [sp, #0]
 8004da8:	6163      	str	r3, [r4, #20]
 8004daa:	9b01      	ldr	r3, [sp, #4]
 8004dac:	6120      	str	r0, [r4, #16]
 8004dae:	b15b      	cbz	r3, 8004dc8 <__smakebuf_r+0x74>
 8004db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004db4:	4630      	mov	r0, r6
 8004db6:	f000 f91f 	bl	8004ff8 <_isatty_r>
 8004dba:	b128      	cbz	r0, 8004dc8 <__smakebuf_r+0x74>
 8004dbc:	89a3      	ldrh	r3, [r4, #12]
 8004dbe:	f023 0303 	bic.w	r3, r3, #3
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	81a3      	strh	r3, [r4, #12]
 8004dc8:	89a0      	ldrh	r0, [r4, #12]
 8004dca:	4305      	orrs	r5, r0
 8004dcc:	81a5      	strh	r5, [r4, #12]
 8004dce:	e7cd      	b.n	8004d6c <__smakebuf_r+0x18>
 8004dd0:	08004b61 	.word	0x08004b61

08004dd4 <memmove>:
 8004dd4:	4288      	cmp	r0, r1
 8004dd6:	b510      	push	{r4, lr}
 8004dd8:	eb01 0402 	add.w	r4, r1, r2
 8004ddc:	d902      	bls.n	8004de4 <memmove+0x10>
 8004dde:	4284      	cmp	r4, r0
 8004de0:	4623      	mov	r3, r4
 8004de2:	d807      	bhi.n	8004df4 <memmove+0x20>
 8004de4:	1e43      	subs	r3, r0, #1
 8004de6:	42a1      	cmp	r1, r4
 8004de8:	d008      	beq.n	8004dfc <memmove+0x28>
 8004dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004df2:	e7f8      	b.n	8004de6 <memmove+0x12>
 8004df4:	4402      	add	r2, r0
 8004df6:	4601      	mov	r1, r0
 8004df8:	428a      	cmp	r2, r1
 8004dfa:	d100      	bne.n	8004dfe <memmove+0x2a>
 8004dfc:	bd10      	pop	{r4, pc}
 8004dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e06:	e7f7      	b.n	8004df8 <memmove+0x24>

08004e08 <__malloc_lock>:
 8004e08:	4801      	ldr	r0, [pc, #4]	; (8004e10 <__malloc_lock+0x8>)
 8004e0a:	f7ff bf7b 	b.w	8004d04 <__retarget_lock_acquire_recursive>
 8004e0e:	bf00      	nop
 8004e10:	20000aa0 	.word	0x20000aa0

08004e14 <__malloc_unlock>:
 8004e14:	4801      	ldr	r0, [pc, #4]	; (8004e1c <__malloc_unlock+0x8>)
 8004e16:	f7ff bf76 	b.w	8004d06 <__retarget_lock_release_recursive>
 8004e1a:	bf00      	nop
 8004e1c:	20000aa0 	.word	0x20000aa0

08004e20 <_realloc_r>:
 8004e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e24:	4680      	mov	r8, r0
 8004e26:	4614      	mov	r4, r2
 8004e28:	460e      	mov	r6, r1
 8004e2a:	b921      	cbnz	r1, 8004e36 <_realloc_r+0x16>
 8004e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e30:	4611      	mov	r1, r2
 8004e32:	f7ff b819 	b.w	8003e68 <_malloc_r>
 8004e36:	b92a      	cbnz	r2, 8004e44 <_realloc_r+0x24>
 8004e38:	f7fe ffaa 	bl	8003d90 <_free_r>
 8004e3c:	4625      	mov	r5, r4
 8004e3e:	4628      	mov	r0, r5
 8004e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e44:	f000 f8fa 	bl	800503c <_malloc_usable_size_r>
 8004e48:	4284      	cmp	r4, r0
 8004e4a:	4607      	mov	r7, r0
 8004e4c:	d802      	bhi.n	8004e54 <_realloc_r+0x34>
 8004e4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e52:	d812      	bhi.n	8004e7a <_realloc_r+0x5a>
 8004e54:	4621      	mov	r1, r4
 8004e56:	4640      	mov	r0, r8
 8004e58:	f7ff f806 	bl	8003e68 <_malloc_r>
 8004e5c:	4605      	mov	r5, r0
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	d0ed      	beq.n	8004e3e <_realloc_r+0x1e>
 8004e62:	42bc      	cmp	r4, r7
 8004e64:	4622      	mov	r2, r4
 8004e66:	4631      	mov	r1, r6
 8004e68:	bf28      	it	cs
 8004e6a:	463a      	movcs	r2, r7
 8004e6c:	f7fe fea0 	bl	8003bb0 <memcpy>
 8004e70:	4631      	mov	r1, r6
 8004e72:	4640      	mov	r0, r8
 8004e74:	f7fe ff8c 	bl	8003d90 <_free_r>
 8004e78:	e7e1      	b.n	8004e3e <_realloc_r+0x1e>
 8004e7a:	4635      	mov	r5, r6
 8004e7c:	e7df      	b.n	8004e3e <_realloc_r+0x1e>

08004e7e <_raise_r>:
 8004e7e:	291f      	cmp	r1, #31
 8004e80:	b538      	push	{r3, r4, r5, lr}
 8004e82:	4604      	mov	r4, r0
 8004e84:	460d      	mov	r5, r1
 8004e86:	d904      	bls.n	8004e92 <_raise_r+0x14>
 8004e88:	2316      	movs	r3, #22
 8004e8a:	6003      	str	r3, [r0, #0]
 8004e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e90:	bd38      	pop	{r3, r4, r5, pc}
 8004e92:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004e94:	b112      	cbz	r2, 8004e9c <_raise_r+0x1e>
 8004e96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004e9a:	b94b      	cbnz	r3, 8004eb0 <_raise_r+0x32>
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f000 f831 	bl	8004f04 <_getpid_r>
 8004ea2:	462a      	mov	r2, r5
 8004ea4:	4601      	mov	r1, r0
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eac:	f000 b818 	b.w	8004ee0 <_kill_r>
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d00a      	beq.n	8004eca <_raise_r+0x4c>
 8004eb4:	1c59      	adds	r1, r3, #1
 8004eb6:	d103      	bne.n	8004ec0 <_raise_r+0x42>
 8004eb8:	2316      	movs	r3, #22
 8004eba:	6003      	str	r3, [r0, #0]
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	e7e7      	b.n	8004e90 <_raise_r+0x12>
 8004ec0:	2400      	movs	r4, #0
 8004ec2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	4798      	blx	r3
 8004eca:	2000      	movs	r0, #0
 8004ecc:	e7e0      	b.n	8004e90 <_raise_r+0x12>
	...

08004ed0 <raise>:
 8004ed0:	4b02      	ldr	r3, [pc, #8]	; (8004edc <raise+0xc>)
 8004ed2:	4601      	mov	r1, r0
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	f7ff bfd2 	b.w	8004e7e <_raise_r>
 8004eda:	bf00      	nop
 8004edc:	2000000c 	.word	0x2000000c

08004ee0 <_kill_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4d07      	ldr	r5, [pc, #28]	; (8004f00 <_kill_r+0x20>)
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	4608      	mov	r0, r1
 8004eea:	4611      	mov	r1, r2
 8004eec:	602b      	str	r3, [r5, #0]
 8004eee:	f7fb fe81 	bl	8000bf4 <_kill>
 8004ef2:	1c43      	adds	r3, r0, #1
 8004ef4:	d102      	bne.n	8004efc <_kill_r+0x1c>
 8004ef6:	682b      	ldr	r3, [r5, #0]
 8004ef8:	b103      	cbz	r3, 8004efc <_kill_r+0x1c>
 8004efa:	6023      	str	r3, [r4, #0]
 8004efc:	bd38      	pop	{r3, r4, r5, pc}
 8004efe:	bf00      	nop
 8004f00:	20000aa4 	.word	0x20000aa4

08004f04 <_getpid_r>:
 8004f04:	f7fb be6e 	b.w	8000be4 <_getpid>

08004f08 <__sread>:
 8004f08:	b510      	push	{r4, lr}
 8004f0a:	460c      	mov	r4, r1
 8004f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f10:	f000 f89c 	bl	800504c <_read_r>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	bfab      	itete	ge
 8004f18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8004f1c:	181b      	addge	r3, r3, r0
 8004f1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f22:	bfac      	ite	ge
 8004f24:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f26:	81a3      	strhlt	r3, [r4, #12]
 8004f28:	bd10      	pop	{r4, pc}

08004f2a <__swrite>:
 8004f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f2e:	461f      	mov	r7, r3
 8004f30:	898b      	ldrh	r3, [r1, #12]
 8004f32:	05db      	lsls	r3, r3, #23
 8004f34:	4605      	mov	r5, r0
 8004f36:	460c      	mov	r4, r1
 8004f38:	4616      	mov	r6, r2
 8004f3a:	d505      	bpl.n	8004f48 <__swrite+0x1e>
 8004f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f40:	2302      	movs	r3, #2
 8004f42:	2200      	movs	r2, #0
 8004f44:	f000 f868 	bl	8005018 <_lseek_r>
 8004f48:	89a3      	ldrh	r3, [r4, #12]
 8004f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f52:	81a3      	strh	r3, [r4, #12]
 8004f54:	4632      	mov	r2, r6
 8004f56:	463b      	mov	r3, r7
 8004f58:	4628      	mov	r0, r5
 8004f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5e:	f000 b817 	b.w	8004f90 <_write_r>

08004f62 <__sseek>:
 8004f62:	b510      	push	{r4, lr}
 8004f64:	460c      	mov	r4, r1
 8004f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f6a:	f000 f855 	bl	8005018 <_lseek_r>
 8004f6e:	1c43      	adds	r3, r0, #1
 8004f70:	89a3      	ldrh	r3, [r4, #12]
 8004f72:	bf15      	itete	ne
 8004f74:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f7e:	81a3      	strheq	r3, [r4, #12]
 8004f80:	bf18      	it	ne
 8004f82:	81a3      	strhne	r3, [r4, #12]
 8004f84:	bd10      	pop	{r4, pc}

08004f86 <__sclose>:
 8004f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f8a:	f000 b813 	b.w	8004fb4 <_close_r>
	...

08004f90 <_write_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4d07      	ldr	r5, [pc, #28]	; (8004fb0 <_write_r+0x20>)
 8004f94:	4604      	mov	r4, r0
 8004f96:	4608      	mov	r0, r1
 8004f98:	4611      	mov	r1, r2
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	602a      	str	r2, [r5, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f7fb fe5f 	bl	8000c62 <_write>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d102      	bne.n	8004fae <_write_r+0x1e>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	b103      	cbz	r3, 8004fae <_write_r+0x1e>
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	bd38      	pop	{r3, r4, r5, pc}
 8004fb0:	20000aa4 	.word	0x20000aa4

08004fb4 <_close_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4d06      	ldr	r5, [pc, #24]	; (8004fd0 <_close_r+0x1c>)
 8004fb8:	2300      	movs	r3, #0
 8004fba:	4604      	mov	r4, r0
 8004fbc:	4608      	mov	r0, r1
 8004fbe:	602b      	str	r3, [r5, #0]
 8004fc0:	f7fb fe6b 	bl	8000c9a <_close>
 8004fc4:	1c43      	adds	r3, r0, #1
 8004fc6:	d102      	bne.n	8004fce <_close_r+0x1a>
 8004fc8:	682b      	ldr	r3, [r5, #0]
 8004fca:	b103      	cbz	r3, 8004fce <_close_r+0x1a>
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	bd38      	pop	{r3, r4, r5, pc}
 8004fd0:	20000aa4 	.word	0x20000aa4

08004fd4 <_fstat_r>:
 8004fd4:	b538      	push	{r3, r4, r5, lr}
 8004fd6:	4d07      	ldr	r5, [pc, #28]	; (8004ff4 <_fstat_r+0x20>)
 8004fd8:	2300      	movs	r3, #0
 8004fda:	4604      	mov	r4, r0
 8004fdc:	4608      	mov	r0, r1
 8004fde:	4611      	mov	r1, r2
 8004fe0:	602b      	str	r3, [r5, #0]
 8004fe2:	f7fb fe66 	bl	8000cb2 <_fstat>
 8004fe6:	1c43      	adds	r3, r0, #1
 8004fe8:	d102      	bne.n	8004ff0 <_fstat_r+0x1c>
 8004fea:	682b      	ldr	r3, [r5, #0]
 8004fec:	b103      	cbz	r3, 8004ff0 <_fstat_r+0x1c>
 8004fee:	6023      	str	r3, [r4, #0]
 8004ff0:	bd38      	pop	{r3, r4, r5, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000aa4 	.word	0x20000aa4

08004ff8 <_isatty_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	4d06      	ldr	r5, [pc, #24]	; (8005014 <_isatty_r+0x1c>)
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	4604      	mov	r4, r0
 8005000:	4608      	mov	r0, r1
 8005002:	602b      	str	r3, [r5, #0]
 8005004:	f7fb fe65 	bl	8000cd2 <_isatty>
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	d102      	bne.n	8005012 <_isatty_r+0x1a>
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	b103      	cbz	r3, 8005012 <_isatty_r+0x1a>
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	bd38      	pop	{r3, r4, r5, pc}
 8005014:	20000aa4 	.word	0x20000aa4

08005018 <_lseek_r>:
 8005018:	b538      	push	{r3, r4, r5, lr}
 800501a:	4d07      	ldr	r5, [pc, #28]	; (8005038 <_lseek_r+0x20>)
 800501c:	4604      	mov	r4, r0
 800501e:	4608      	mov	r0, r1
 8005020:	4611      	mov	r1, r2
 8005022:	2200      	movs	r2, #0
 8005024:	602a      	str	r2, [r5, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	f7fb fe5e 	bl	8000ce8 <_lseek>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d102      	bne.n	8005036 <_lseek_r+0x1e>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	b103      	cbz	r3, 8005036 <_lseek_r+0x1e>
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	bd38      	pop	{r3, r4, r5, pc}
 8005038:	20000aa4 	.word	0x20000aa4

0800503c <_malloc_usable_size_r>:
 800503c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005040:	1f18      	subs	r0, r3, #4
 8005042:	2b00      	cmp	r3, #0
 8005044:	bfbc      	itt	lt
 8005046:	580b      	ldrlt	r3, [r1, r0]
 8005048:	18c0      	addlt	r0, r0, r3
 800504a:	4770      	bx	lr

0800504c <_read_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	4d07      	ldr	r5, [pc, #28]	; (800506c <_read_r+0x20>)
 8005050:	4604      	mov	r4, r0
 8005052:	4608      	mov	r0, r1
 8005054:	4611      	mov	r1, r2
 8005056:	2200      	movs	r2, #0
 8005058:	602a      	str	r2, [r5, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	f7fb fde4 	bl	8000c28 <_read>
 8005060:	1c43      	adds	r3, r0, #1
 8005062:	d102      	bne.n	800506a <_read_r+0x1e>
 8005064:	682b      	ldr	r3, [r5, #0]
 8005066:	b103      	cbz	r3, 800506a <_read_r+0x1e>
 8005068:	6023      	str	r3, [r4, #0]
 800506a:	bd38      	pop	{r3, r4, r5, pc}
 800506c:	20000aa4 	.word	0x20000aa4

08005070 <_init>:
 8005070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005072:	bf00      	nop
 8005074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005076:	bc08      	pop	{r3}
 8005078:	469e      	mov	lr, r3
 800507a:	4770      	bx	lr

0800507c <_fini>:
 800507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507e:	bf00      	nop
 8005080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005082:	bc08      	pop	{r3}
 8005084:	469e      	mov	lr, r3
 8005086:	4770      	bx	lr
