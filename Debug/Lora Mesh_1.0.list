
Lora Mesh_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006334  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  080064d4  080064d4  000164d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006748  08006748  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006748  08006748  00016748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006750  08006750  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006750  08006750  00016750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006754  08006754  00016754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cc4  20000070  080067c8  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d34  080067c8  00020d34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e369  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002897  00000000  00000000  0002e409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00030ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  000318a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dee  00000000  00000000  00032388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f741  00000000  00000000  0004a176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a514  00000000  00000000  000598b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3dcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac8  00000000  00000000  000e3e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080064bc 	.word	0x080064bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080064bc 	.word	0x080064bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <BUTTON_Press_Short_Callback>:
 */
//uint8_t tx_frame_data[] = {0x00, 0x11, 0x22, 0x33};
uint8_t tx_frame_data[255];
uint8_t tx_frame_len = 0;
void BUTTON_Press_Short_Callback(BUTTON_HandleTypedef *ButtonX)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af02      	add	r7, sp, #8
 800059a:	6078      	str	r0, [r7, #4]
	if(ButtonX == &btn)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a13      	ldr	r2, [pc, #76]	; (80005ec <BUTTON_Press_Short_Callback+0x58>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d11f      	bne.n	80005e4 <BUTTON_Press_Short_Callback+0x50>
	{
		uint8_t str[] = "Sended\n";
 80005a4:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <BUTTON_Press_Short_Callback+0x5c>)
 80005a6:	f107 0308 	add.w	r3, r7, #8
 80005aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ae:	e883 0003 	stmia.w	r3, {r0, r1}
		HAL_UART_Transmit(&huart6, str, strlen((char *)str), 1000);
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff fe12 	bl	80001e0 <strlen>
 80005bc:	4603      	mov	r3, r0
 80005be:	b29a      	uxth	r2, r3
 80005c0:	f107 0108 	add.w	r1, r7, #8
 80005c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c8:	480a      	ldr	r0, [pc, #40]	; (80005f4 <BUTTON_Press_Short_Callback+0x60>)
 80005ca:	f002 fa22 	bl	8002a12 <HAL_UART_Transmit>
		FRAME_SYNC_Transmit(2, 1, 5, tx_frame_data, tx_frame_len, 0);
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <BUTTON_Press_Short_Callback+0x64>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2200      	movs	r2, #0
 80005d4:	9201      	str	r2, [sp, #4]
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <BUTTON_Press_Short_Callback+0x68>)
 80005da:	2205      	movs	r2, #5
 80005dc:	2101      	movs	r1, #1
 80005de:	2002      	movs	r0, #2
 80005e0:	f003 fc82 	bl	8003ee8 <FRAME_SYNC_Transmit>
	}
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200003a4 	.word	0x200003a4
 80005f0:	080064d4 	.word	0x080064d4
 80005f4:	20000128 	.word	0x20000128
 80005f8:	200004bf 	.word	0x200004bf
 80005fc:	200003c0 	.word	0x200003c0

08000600 <FRAME_SYNC_RxCpltCallback>:

void FRAME_SYNC_RxCpltCallback(uint8_t *p_rx_data, uint8_t data_size)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b09f      	sub	sp, #124	; 0x7c
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	70fb      	strb	r3, [r7, #3]
	char tx_str[100] = "\nData: ";
 800060c:	4a27      	ldr	r2, [pc, #156]	; (80006ac <FRAME_SYNC_RxCpltCallback+0xac>)
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000616:	e883 0003 	stmia.w	r3, {r0, r1}
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	225c      	movs	r2, #92	; 0x5c
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f004 fcf8 	bl	8005018 <memset>
	for(int i = 0; i < data_size; i++)
 8000628:	2300      	movs	r3, #0
 800062a:	677b      	str	r3, [r7, #116]	; 0x74
 800062c:	e015      	b.n	800065a <FRAME_SYNC_RxCpltCallback+0x5a>
	{
		char temp_str[4];
		sprintf(temp_str, "%02X ", p_rx_data[i]);
 800062e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	461a      	mov	r2, r3
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	491c      	ldr	r1, [pc, #112]	; (80006b0 <FRAME_SYNC_RxCpltCallback+0xb0>)
 800063e:	4618      	mov	r0, r3
 8000640:	f004 fcf2 	bl	8005028 <siprintf>
		strcat(tx_str, temp_str);
 8000644:	f107 020c 	add.w	r2, r7, #12
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f004 fd0a 	bl	8005068 <strcat>
	for(int i = 0; i < data_size; i++)
 8000654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000656:	3301      	adds	r3, #1
 8000658:	677b      	str	r3, [r7, #116]	; 0x74
 800065a:	78fb      	ldrb	r3, [r7, #3]
 800065c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800065e:	429a      	cmp	r2, r3
 8000660:	dbe5      	blt.n	800062e <FRAME_SYNC_RxCpltCallback+0x2e>
	}
	strcat(tx_str, "\nCRC Correct\n");
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fdba 	bl	80001e0 <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	4413      	add	r3, r2
 8000676:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <FRAME_SYNC_RxCpltCallback+0xb4>)
 8000678:	461c      	mov	r4, r3
 800067a:	4613      	mov	r3, r2
 800067c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800067e:	6020      	str	r0, [r4, #0]
 8000680:	6061      	str	r1, [r4, #4]
 8000682:	60a2      	str	r2, [r4, #8]
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	81a3      	strh	r3, [r4, #12]
	HAL_UART_Transmit(&huart6, (uint8_t *)tx_str, strlen(tx_str), 1000);
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff fda7 	bl	80001e0 <strlen>
 8000692:	4603      	mov	r3, r0
 8000694:	b29a      	uxth	r2, r3
 8000696:	f107 0110 	add.w	r1, r7, #16
 800069a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <FRAME_SYNC_RxCpltCallback+0xb8>)
 80006a0:	f002 f9b7 	bl	8002a12 <HAL_UART_Transmit>

}
 80006a4:	bf00      	nop
 80006a6:	377c      	adds	r7, #124	; 0x7c
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd90      	pop	{r4, r7, pc}
 80006ac:	080064f4 	.word	0x080064f4
 80006b0:	080064dc 	.word	0x080064dc
 80006b4:	080064e4 	.word	0x080064e4
 80006b8:	20000128 	.word	0x20000128

080006bc <FRAME_SYNC_RxFailCallback>:

void FRAME_SYNC_RxFailCallback(uint8_t *p_rx_data, uint8_t data_size)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b09c      	sub	sp, #112	; 0x70
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	70fb      	strb	r3, [r7, #3]
	char tx_str[100] = "\nCRC Fail\n";
 80006c8:	4a10      	ldr	r2, [pc, #64]	; (800070c <FRAME_SYNC_RxFailCallback+0x50>)
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80006d0:	c303      	stmia	r3!, {r0, r1}
 80006d2:	801a      	strh	r2, [r3, #0]
 80006d4:	3302      	adds	r3, #2
 80006d6:	0c12      	lsrs	r2, r2, #16
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	f107 0317 	add.w	r3, r7, #23
 80006de:	2259      	movs	r2, #89	; 0x59
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f004 fc98 	bl	8005018 <memset>
	HAL_UART_Transmit(&huart6, (uint8_t *)tx_str, strlen(tx_str), 1000);
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fd77 	bl	80001e0 <strlen>
 80006f2:	4603      	mov	r3, r0
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	f107 010c 	add.w	r1, r7, #12
 80006fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <FRAME_SYNC_RxFailCallback+0x54>)
 8000700:	f002 f987 	bl	8002a12 <HAL_UART_Transmit>
}
 8000704:	bf00      	nop
 8000706:	3770      	adds	r7, #112	; 0x70
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	08006558 	.word	0x08006558
 8000710:	20000128 	.word	0x20000128

08000714 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart6.Instance)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <HAL_UART_RxCpltCallback+0x48>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	429a      	cmp	r2, r3
 8000726:	d10a      	bne.n	800073e <HAL_UART_RxCpltCallback+0x2a>
	{
		COMMAND_LINE_Receive(uart_rx_buf);
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <HAL_UART_RxCpltCallback+0x4c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4618      	mov	r0, r3
 800072e:	f003 facd 	bl	8003ccc <COMMAND_LINE_Receive>
		HAL_UART_Receive_IT(&huart6, &uart_rx_buf, 1);
 8000732:	2201      	movs	r2, #1
 8000734:	490a      	ldr	r1, [pc, #40]	; (8000760 <HAL_UART_RxCpltCallback+0x4c>)
 8000736:	4809      	ldr	r0, [pc, #36]	; (800075c <HAL_UART_RxCpltCallback+0x48>)
 8000738:	f002 f9fd 	bl	8002b36 <HAL_UART_Receive_IT>
	else if(huart->Instance == huart2.Instance)
	{
//		UART_Receive(uart_rx_buf);
		HAL_UART_Receive_IT(&huart2, &uart_rx_buf, 1);
	}
}
 800073c:	e00a      	b.n	8000754 <HAL_UART_RxCpltCallback+0x40>
	else if(huart->Instance == huart2.Instance)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <HAL_UART_RxCpltCallback+0x50>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	429a      	cmp	r2, r3
 8000748:	d104      	bne.n	8000754 <HAL_UART_RxCpltCallback+0x40>
		HAL_UART_Receive_IT(&huart2, &uart_rx_buf, 1);
 800074a:	2201      	movs	r2, #1
 800074c:	4904      	ldr	r1, [pc, #16]	; (8000760 <HAL_UART_RxCpltCallback+0x4c>)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <HAL_UART_RxCpltCallback+0x50>)
 8000750:	f002 f9f1 	bl	8002b36 <HAL_UART_Receive_IT>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000128 	.word	0x20000128
 8000760:	200003a0 	.word	0x200003a0
 8000764:	200000e4 	.word	0x200000e4

08000768 <FRAME_SYNC_Packet_Transmit>:

void FRAME_SYNC_Packet_Transmit(uint8_t* tx_buffer, uint8_t tx_buffer_length)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	70fb      	strb	r3, [r7, #3]
	SX1278_transmit(&hlora, tx_buffer, tx_buffer_length, 2000);
 8000774:	78fa      	ldrb	r2, [r7, #3]
 8000776:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <FRAME_SYNC_Packet_Transmit+0x24>)
 800077e:	f004 fa0a 	bl	8004b96 <SX1278_transmit>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000188 	.word	0x20000188

08000790 <FRAME_SYNC_Packet_Receive>:

void FRAME_SYNC_Packet_Receive()
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
  	if(hlora.status != RX)
 8000796:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <FRAME_SYNC_Packet_Receive+0x80>)
 8000798:	7d9b      	ldrb	r3, [r3, #22]
 800079a:	2b03      	cmp	r3, #3
 800079c:	d005      	beq.n	80007aa <FRAME_SYNC_Packet_Receive+0x1a>
  	{
  		SX1278_LoRaEntryRx(&hlora, 0, 2000);
 800079e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007a2:	2100      	movs	r1, #0
 80007a4:	481a      	ldr	r0, [pc, #104]	; (8000810 <FRAME_SYNC_Packet_Receive+0x80>)
 80007a6:	f004 f889 	bl	80048bc <SX1278_LoRaEntryRx>
  	}

	num_rx_byte = SX1278_LoRaRxPacket(&hlora);
 80007aa:	4819      	ldr	r0, [pc, #100]	; (8000810 <FRAME_SYNC_Packet_Receive+0x80>)
 80007ac:	f004 f8eb 	bl	8004986 <SX1278_LoRaRxPacket>
 80007b0:	4603      	mov	r3, r0
 80007b2:	461a      	mov	r2, r3
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <FRAME_SYNC_Packet_Receive+0x84>)
 80007b6:	701a      	strb	r2, [r3, #0]
	if(num_rx_byte > 0)
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <FRAME_SYNC_Packet_Receive+0x84>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d022      	beq.n	8000806 <FRAME_SYNC_Packet_Receive+0x76>
	{
		SX1278_read(&hlora, LoRa_Rx_Buffer, num_rx_byte);
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <FRAME_SYNC_Packet_Receive+0x84>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4914      	ldr	r1, [pc, #80]	; (8000818 <FRAME_SYNC_Packet_Receive+0x88>)
 80007c8:	4811      	ldr	r0, [pc, #68]	; (8000810 <FRAME_SYNC_Packet_Receive+0x80>)
 80007ca:	f004 fa02 	bl	8004bd2 <SX1278_read>
		for(int i = 0; i < num_rx_byte; i++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	e012      	b.n	80007fa <FRAME_SYNC_Packet_Receive+0x6a>
		{
			HAL_UART_Transmit(&huart6, LoRa_Rx_Buffer + i, 1, 1000);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a10      	ldr	r2, [pc, #64]	; (8000818 <FRAME_SYNC_Packet_Receive+0x88>)
 80007d8:	1899      	adds	r1, r3, r2
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	2201      	movs	r2, #1
 80007e0:	480e      	ldr	r0, [pc, #56]	; (800081c <FRAME_SYNC_Packet_Receive+0x8c>)
 80007e2:	f002 f916 	bl	8002a12 <HAL_UART_Transmit>
			FRAME_SYNC_Receive(LoRa_Rx_Buffer[i]);
 80007e6:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <FRAME_SYNC_Packet_Receive+0x88>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4413      	add	r3, r2
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 fd32 	bl	8004258 <FRAME_SYNC_Receive>
		for(int i = 0; i < num_rx_byte; i++)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3301      	adds	r3, #1
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <FRAME_SYNC_Packet_Receive+0x84>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4293      	cmp	r3, r2
 8000804:	dbe6      	blt.n	80007d4 <FRAME_SYNC_Packet_Receive+0x44>
		}
	}
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000188 	.word	0x20000188
 8000814:	2000039f 	.word	0x2000039f
 8000818:	200002a0 	.word	0x200002a0
 800081c:	20000128 	.word	0x20000128

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000826:	f000 fc1f 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082a:	f000 f871 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082e:	f000 f961 	bl	8000af4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000832:	f000 f90b 	bl	8000a4c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000836:	f000 f933 	bl	8000aa0 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 800083a:	f000 f8d1 	bl	80009e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  hlora_hw.dio0.port = D0_GPIO_Port;
 800083e:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <main+0xc8>)
 8000840:	4a2a      	ldr	r2, [pc, #168]	; (80008ec <main+0xcc>)
 8000842:	60da      	str	r2, [r3, #12]
  hlora_hw.dio0.pin = D0_Pin;
 8000844:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <main+0xc8>)
 8000846:	2210      	movs	r2, #16
 8000848:	609a      	str	r2, [r3, #8]
  hlora_hw.nss.port = NSS_GPIO_Port;
 800084a:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <main+0xc8>)
 800084c:	4a28      	ldr	r2, [pc, #160]	; (80008f0 <main+0xd0>)
 800084e:	615a      	str	r2, [r3, #20]
  hlora_hw.nss.pin = NSS_Pin;
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <main+0xc8>)
 8000852:	2220      	movs	r2, #32
 8000854:	611a      	str	r2, [r3, #16]
  hlora_hw.reset.port = RST_GPIO_Port;
 8000856:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <main+0xc8>)
 8000858:	4a25      	ldr	r2, [pc, #148]	; (80008f0 <main+0xd0>)
 800085a:	605a      	str	r2, [r3, #4]
  hlora_hw.reset.pin = RST_Pin;
 800085c:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <main+0xc8>)
 800085e:	2210      	movs	r2, #16
 8000860:	601a      	str	r2, [r3, #0]
  hlora_hw.spi = &hspi1;
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <main+0xc8>)
 8000864:	4a23      	ldr	r2, [pc, #140]	; (80008f4 <main+0xd4>)
 8000866:	619a      	str	r2, [r3, #24]

  hlora.hw = &hlora_hw;
 8000868:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <main+0xd8>)
 800086a:	4a1f      	ldr	r2, [pc, #124]	; (80008e8 <main+0xc8>)
 800086c:	601a      	str	r2, [r3, #0]
  SX1278_init(&hlora, 434000000, SX1278_POWER_20DBM, SX1278_LORA_SF_12,
 800086e:	230a      	movs	r3, #10
 8000870:	9305      	str	r3, [sp, #20]
 8000872:	2300      	movs	r3, #0
 8000874:	9304      	str	r3, [sp, #16]
 8000876:	2303      	movs	r3, #3
 8000878:	9303      	str	r3, [sp, #12]
 800087a:	2309      	movs	r3, #9
 800087c:	9302      	str	r3, [sp, #8]
 800087e:	2306      	movs	r3, #6
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	2300      	movs	r3, #0
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	a316      	add	r3, pc, #88	; (adr r3, 80008e0 <main+0xc0>)
 8000888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800088c:	481a      	ldr	r0, [pc, #104]	; (80008f8 <main+0xd8>)
 800088e:	f004 f955 	bl	8004b3c <SX1278_init>
		  SX1278_LORA_BW_500KHZ, SX1278_LORA_CR_4_8, SX1278_LORA_CRC_EN, 10);

  BUTTON_Init(&btn, GPIOA, GPIO_PIN_0, 0);
 8000892:	2300      	movs	r3, #0
 8000894:	2201      	movs	r2, #1
 8000896:	4915      	ldr	r1, [pc, #84]	; (80008ec <main+0xcc>)
 8000898:	4818      	ldr	r0, [pc, #96]	; (80008fc <main+0xdc>)
 800089a:	f004 fb11 	bl	8004ec0 <BUTTON_Init>
  BUTTON_Set_Callback_Function(NULL, NULL, BUTTON_Press_Short_Callback, NULL);
 800089e:	2300      	movs	r3, #0
 80008a0:	4a17      	ldr	r2, [pc, #92]	; (8000900 <main+0xe0>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	2000      	movs	r0, #0
 80008a6:	f004 fb35 	bl	8004f14 <BUTTON_Set_Callback_Function>

  HAL_UART_Receive_IT(&huart6, &uart_rx_buf, 1);
 80008aa:	2201      	movs	r2, #1
 80008ac:	4915      	ldr	r1, [pc, #84]	; (8000904 <main+0xe4>)
 80008ae:	4816      	ldr	r0, [pc, #88]	; (8000908 <main+0xe8>)
 80008b0:	f002 f941 	bl	8002b36 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &uart_rx_buf, 1);
 80008b4:	2201      	movs	r2, #1
 80008b6:	4913      	ldr	r1, [pc, #76]	; (8000904 <main+0xe4>)
 80008b8:	4814      	ldr	r0, [pc, #80]	; (800090c <main+0xec>)
 80008ba:	f002 f93c 	bl	8002b36 <HAL_UART_Receive_IT>
  UART_Init();
 80008be:	f004 fb65 	bl	8004f8c <UART_Init>

  SX1278_LoRaEntryRx(&hlora, 0, 2000);
 80008c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008c6:	2100      	movs	r1, #0
 80008c8:	480b      	ldr	r0, [pc, #44]	; (80008f8 <main+0xd8>)
 80008ca:	f003 fff7 	bl	80048bc <SX1278_LoRaEntryRx>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  BUTTON_Handle(&btn);
 80008ce:	480b      	ldr	r0, [pc, #44]	; (80008fc <main+0xdc>)
 80008d0:	f004 fa5e 	bl	8004d90 <BUTTON_Handle>

//	  UART_Handle();

	  COMMAND_LINE_Handle();
 80008d4:	f003 f986 	bl	8003be4 <COMMAND_LINE_Handle>

	  FRAME_SYNC_Handle();
 80008d8:	f003 fd8c 	bl	80043f4 <FRAME_SYNC_Handle>
	  BUTTON_Handle(&btn);
 80008dc:	e7f7      	b.n	80008ce <main+0xae>
 80008de:	bf00      	nop
 80008e0:	19de5080 	.word	0x19de5080
 80008e4:	00000000 	.word	0x00000000
 80008e8:	2000016c 	.word	0x2000016c
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40020800 	.word	0x40020800
 80008f4:	2000008c 	.word	0x2000008c
 80008f8:	20000188 	.word	0x20000188
 80008fc:	200003a4 	.word	0x200003a4
 8000900:	08000595 	.word	0x08000595
 8000904:	200003a0 	.word	0x200003a0
 8000908:	20000128 	.word	0x20000128
 800090c:	200000e4 	.word	0x200000e4

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b094      	sub	sp, #80	; 0x50
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0320 	add.w	r3, r7, #32
 800091a:	2230      	movs	r2, #48	; 0x30
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f004 fb7a 	bl	8005018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <SystemClock_Config+0xc8>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	4a26      	ldr	r2, [pc, #152]	; (80009d8 <SystemClock_Config+0xc8>)
 800093e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000942:	6413      	str	r3, [r2, #64]	; 0x40
 8000944:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <SystemClock_Config+0xc8>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	4b21      	ldr	r3, [pc, #132]	; (80009dc <SystemClock_Config+0xcc>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a20      	ldr	r2, [pc, #128]	; (80009dc <SystemClock_Config+0xcc>)
 800095a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800095e:	6013      	str	r3, [r2, #0]
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <SystemClock_Config+0xcc>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800096c:	2302      	movs	r3, #2
 800096e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000970:	2301      	movs	r3, #1
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000974:	2310      	movs	r3, #16
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000978:	2302      	movs	r3, #2
 800097a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800097c:	2300      	movs	r3, #0
 800097e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000980:	2308      	movs	r3, #8
 8000982:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000984:	2348      	movs	r3, #72	; 0x48
 8000986:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000988:	2302      	movs	r3, #2
 800098a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800098c:	2304      	movs	r3, #4
 800098e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000990:	f107 0320 	add.w	r3, r7, #32
 8000994:	4618      	mov	r0, r3
 8000996:	f000 ff57 	bl	8001848 <HAL_RCC_OscConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009a0:	f000 f91e 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a4:	230f      	movs	r3, #15
 80009a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a8:	2302      	movs	r3, #2
 80009aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	2102      	movs	r1, #2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 f9b9 	bl	8001d38 <HAL_RCC_ClockConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009cc:	f000 f908 	bl	8000be0 <Error_Handler>
  }
}
 80009d0:	bf00      	nop
 80009d2:	3750      	adds	r7, #80	; 0x50
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40007000 	.word	0x40007000

080009e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_SPI1_Init+0x64>)
 80009e6:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <MX_SPI1_Init+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_SPI1_Init+0x64>)
 80009ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_SPI1_Init+0x64>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_SPI1_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_SPI1_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_SPI1_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_SPI1_Init+0x64>)
 8000a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_SPI1_Init+0x64>)
 8000a14:	2210      	movs	r2, #16
 8000a16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_SPI1_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_SPI1_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_SPI1_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_SPI1_Init+0x64>)
 8000a2c:	220a      	movs	r2, #10
 8000a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_SPI1_Init+0x64>)
 8000a32:	f001 fb61 	bl	80020f8 <HAL_SPI_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a3c:	f000 f8d0 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000008c 	.word	0x2000008c
 8000a48:	40013000 	.word	0x40013000

08000a4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <MX_USART2_UART_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a84:	f001 ff78 	bl	8002978 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a8e:	f000 f8a7 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000e4 	.word	0x200000e4
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USART6_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <MX_USART6_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_USART6_UART_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USART6_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USART6_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USART6_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USART6_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USART6_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USART6_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USART6_UART_Init+0x4c>)
 8000ad8:	f001 ff4e 	bl	8002978 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f87d 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000128 	.word	0x20000128
 8000af0:	40011400 	.word	0x40011400

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	4b30      	ldr	r3, [pc, #192]	; (8000bd0 <MX_GPIO_Init+0xdc>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a2f      	ldr	r2, [pc, #188]	; (8000bd0 <MX_GPIO_Init+0xdc>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <MX_GPIO_Init+0xdc>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <MX_GPIO_Init+0xdc>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a28      	ldr	r2, [pc, #160]	; (8000bd0 <MX_GPIO_Init+0xdc>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <MX_GPIO_Init+0xdc>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <MX_GPIO_Init+0xdc>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a21      	ldr	r2, [pc, #132]	; (8000bd0 <MX_GPIO_Init+0xdc>)
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_GPIO_Init+0xdc>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RST_Pin|NSS_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2130      	movs	r1, #48	; 0x30
 8000b62:	481c      	ldr	r0, [pc, #112]	; (8000bd4 <MX_GPIO_Init+0xe0>)
 8000b64:	f000 fe56 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000b6e:	481a      	ldr	r0, [pc, #104]	; (8000bd8 <MX_GPIO_Init+0xe4>)
 8000b70:	f000 fe50 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 D0_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|D0_Pin;
 8000b74:	2311      	movs	r3, #17
 8000b76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	4619      	mov	r1, r3
 8000b86:	4815      	ldr	r0, [pc, #84]	; (8000bdc <MX_GPIO_Init+0xe8>)
 8000b88:	f000 fca8 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|NSS_Pin;
 8000b8c:	2330      	movs	r3, #48	; 0x30
 8000b8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <MX_GPIO_Init+0xe0>)
 8000ba4:	f000 fc9a 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ba8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_GPIO_Init+0xe4>)
 8000bc2:	f000 fc8b 	bl	80014dc <HAL_GPIO_Init>

}
 8000bc6:	bf00      	nop
 8000bc8:	3720      	adds	r7, #32
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	40020000 	.word	0x40020000

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <HAL_MspInit+0x4c>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800

08000c3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <HAL_SPI_MspInit+0x84>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d12b      	bne.n	8000cb6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c96:	23e0      	movs	r3, #224	; 0xe0
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <HAL_SPI_MspInit+0x8c>)
 8000cb2:	f000 fc13 	bl	80014dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40013000 	.word	0x40013000
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020000 	.word	0x40020000

08000ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	; 0x30
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a3a      	ldr	r2, [pc, #232]	; (8000dd4 <HAL_UART_MspInit+0x108>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d134      	bne.n	8000d58 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
 8000cf2:	4b39      	ldr	r3, [pc, #228]	; (8000dd8 <HAL_UART_MspInit+0x10c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a38      	ldr	r2, [pc, #224]	; (8000dd8 <HAL_UART_MspInit+0x10c>)
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b36      	ldr	r3, [pc, #216]	; (8000dd8 <HAL_UART_MspInit+0x10c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	61bb      	str	r3, [r7, #24]
 8000d08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <HAL_UART_MspInit+0x10c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a31      	ldr	r2, [pc, #196]	; (8000dd8 <HAL_UART_MspInit+0x10c>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <HAL_UART_MspInit+0x10c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d26:	230c      	movs	r3, #12
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d36:	2307      	movs	r3, #7
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4826      	ldr	r0, [pc, #152]	; (8000ddc <HAL_UART_MspInit+0x110>)
 8000d42:	f000 fbcb 	bl	80014dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2026      	movs	r0, #38	; 0x26
 8000d4c:	f000 fafd 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d50:	2026      	movs	r0, #38	; 0x26
 8000d52:	f000 fb16 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000d56:	e038      	b.n	8000dca <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a20      	ldr	r2, [pc, #128]	; (8000de0 <HAL_UART_MspInit+0x114>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d133      	bne.n	8000dca <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <HAL_UART_MspInit+0x10c>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <HAL_UART_MspInit+0x10c>)
 8000d6c:	f043 0320 	orr.w	r3, r3, #32
 8000d70:	6453      	str	r3, [r2, #68]	; 0x44
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_UART_MspInit+0x10c>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f003 0320 	and.w	r3, r3, #32
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_UART_MspInit+0x10c>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <HAL_UART_MspInit+0x10c>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_UART_MspInit+0x10c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d9a:	23c0      	movs	r3, #192	; 0xc0
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000daa:	2308      	movs	r3, #8
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	480b      	ldr	r0, [pc, #44]	; (8000de4 <HAL_UART_MspInit+0x118>)
 8000db6:	f000 fb91 	bl	80014dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2047      	movs	r0, #71	; 0x47
 8000dc0:	f000 fac3 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000dc4:	2047      	movs	r0, #71	; 0x47
 8000dc6:	f000 fadc 	bl	8001382 <HAL_NVIC_EnableIRQ>
}
 8000dca:	bf00      	nop
 8000dcc:	3730      	adds	r7, #48	; 0x30
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40004400 	.word	0x40004400
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40011400 	.word	0x40011400
 8000de4:	40020800 	.word	0x40020800

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <NMI_Handler+0x4>

08000dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <BusFault_Handler+0x4>

08000e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <UsageFault_Handler+0x4>

08000e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 f96a 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <USART2_IRQHandler+0x10>)
 8000e42:	f001 fea9 	bl	8002b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200000e4 	.word	0x200000e4

08000e50 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <USART6_IRQHandler+0x10>)
 8000e56:	f001 fe9f 	bl	8002b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000128 	.word	0x20000128

08000e64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
	return 1;
 8000e68:	2301      	movs	r3, #1
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <_kill>:

int _kill(int pid, int sig)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e7e:	f004 f893 	bl	8004fa8 <__errno>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2216      	movs	r2, #22
 8000e86:	601a      	str	r2, [r3, #0]
	return -1;
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <_exit>:

void _exit (int status)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ffe7 	bl	8000e74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ea6:	e7fe      	b.n	8000ea6 <_exit+0x12>

08000ea8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	e00a      	b.n	8000ed0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eba:	f3af 8000 	nop.w
 8000ebe:	4601      	mov	r1, r0
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	1c5a      	adds	r2, r3, #1
 8000ec4:	60ba      	str	r2, [r7, #8]
 8000ec6:	b2ca      	uxtb	r2, r1
 8000ec8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dbf0      	blt.n	8000eba <_read+0x12>
	}

return len;
 8000ed8:	687b      	ldr	r3, [r7, #4]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	e009      	b.n	8000f08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	60ba      	str	r2, [r7, #8]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbf1      	blt.n	8000ef4 <_write+0x12>
	}
	return len;
 8000f10:	687b      	ldr	r3, [r7, #4]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_close>:

int _close(int file)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
	return -1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f42:	605a      	str	r2, [r3, #4]
	return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <_isatty>:

int _isatty(int file)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
	return 1;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
	return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <_sbrk+0x5c>)
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <_sbrk+0x60>)
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb4:	f003 fff8 	bl	8004fa8 <__errno>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20020000 	.word	0x20020000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	200004c0 	.word	0x200004c0
 8000fec:	20000d38 	.word	0x20000d38

08000ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800104c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800101a:	490e      	ldr	r1, [pc, #56]	; (8001054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001030:	4c0b      	ldr	r4, [pc, #44]	; (8001060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800103e:	f7ff ffd7 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001042:	f003 ffb7 	bl	8004fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001046:	f7ff fbeb 	bl	8000820 <main>
  bx  lr    
 800104a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800104c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001058:	08006758 	.word	0x08006758
  ldr r2, =_sbss
 800105c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001060:	20000d34 	.word	0x20000d34

08001064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC_IRQHandler>
	...

08001068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <HAL_Init+0x40>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_Init+0x40>)
 800107e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <HAL_Init+0x40>)
 800108a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 f94f 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	200f      	movs	r0, #15
 8001098:	f000 f808 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff fda6 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023c00 	.word	0x40023c00

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x54>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_InitTick+0x58>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f967 	bl	800139e <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f000 f92f 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	; (8001108 <HAL_InitTick+0x5c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000000 	.word	0x20000000
 8001104:	20000008 	.word	0x20000008
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008
 8001130:	200004c4 	.word	0x200004c4

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	200004c4 	.word	0x200004c4

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_Delay+0x44>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffde 	bl	8001134 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4907      	ldr	r1, [pc, #28]	; (8001230 <__NVIC_EnableIRQ+0x38>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	; (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	; (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff8e 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff29 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff3e 	bl	80011dc <__NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff8e 	bl	8001288 <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5d 	bl	8001234 <__NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff31 	bl	80011f8 <__NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffa2 	bl	80012f0 <SysTick_Config>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff feb6 	bl	8001134 <HAL_GetTick>
 80013c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d008      	beq.n	80013e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2280      	movs	r2, #128	; 0x80
 80013da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e052      	b.n	800148e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0216 	bic.w	r2, r2, #22
 80013f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	695a      	ldr	r2, [r3, #20]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001406:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	2b00      	cmp	r3, #0
 800140e:	d103      	bne.n	8001418 <HAL_DMA_Abort+0x62>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001414:	2b00      	cmp	r3, #0
 8001416:	d007      	beq.n	8001428 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0208 	bic.w	r2, r2, #8
 8001426:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0201 	bic.w	r2, r2, #1
 8001436:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001438:	e013      	b.n	8001462 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800143a:	f7ff fe7b 	bl	8001134 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b05      	cmp	r3, #5
 8001446:	d90c      	bls.n	8001462 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2220      	movs	r2, #32
 800144c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2203      	movs	r2, #3
 8001452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e015      	b.n	800148e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1e4      	bne.n	800143a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001474:	223f      	movs	r2, #63	; 0x3f
 8001476:	409a      	lsls	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d004      	beq.n	80014b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2280      	movs	r2, #128	; 0x80
 80014ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e00c      	b.n	80014ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2205      	movs	r2, #5
 80014b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0201 	bic.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	e159      	b.n	80017ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014f8:	2201      	movs	r2, #1
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	429a      	cmp	r2, r3
 8001512:	f040 8148 	bne.w	80017a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	2b01      	cmp	r3, #1
 8001520:	d005      	beq.n	800152e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800152a:	2b02      	cmp	r3, #2
 800152c:	d130      	bne.n	8001590 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	2203      	movs	r2, #3
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001564:	2201      	movs	r2, #1
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	f003 0201 	and.w	r2, r3, #1
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	2b03      	cmp	r3, #3
 800159a:	d017      	beq.n	80015cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	2203      	movs	r2, #3
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d123      	bne.n	8001620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	08da      	lsrs	r2, r3, #3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3208      	adds	r2, #8
 80015e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	08da      	lsrs	r2, r3, #3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3208      	adds	r2, #8
 800161a:	69b9      	ldr	r1, [r7, #24]
 800161c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	2203      	movs	r2, #3
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0203 	and.w	r2, r3, #3
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80a2 	beq.w	80017a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b57      	ldr	r3, [pc, #348]	; (80017c4 <HAL_GPIO_Init+0x2e8>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	4a56      	ldr	r2, [pc, #344]	; (80017c4 <HAL_GPIO_Init+0x2e8>)
 800166c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001670:	6453      	str	r3, [r2, #68]	; 0x44
 8001672:	4b54      	ldr	r3, [pc, #336]	; (80017c4 <HAL_GPIO_Init+0x2e8>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800167e:	4a52      	ldr	r2, [pc, #328]	; (80017c8 <HAL_GPIO_Init+0x2ec>)
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	3302      	adds	r3, #2
 8001686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	220f      	movs	r2, #15
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a49      	ldr	r2, [pc, #292]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d019      	beq.n	80016de <HAL_GPIO_Init+0x202>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a48      	ldr	r2, [pc, #288]	; (80017d0 <HAL_GPIO_Init+0x2f4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d013      	beq.n	80016da <HAL_GPIO_Init+0x1fe>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a47      	ldr	r2, [pc, #284]	; (80017d4 <HAL_GPIO_Init+0x2f8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d00d      	beq.n	80016d6 <HAL_GPIO_Init+0x1fa>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a46      	ldr	r2, [pc, #280]	; (80017d8 <HAL_GPIO_Init+0x2fc>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d007      	beq.n	80016d2 <HAL_GPIO_Init+0x1f6>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a45      	ldr	r2, [pc, #276]	; (80017dc <HAL_GPIO_Init+0x300>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d101      	bne.n	80016ce <HAL_GPIO_Init+0x1f2>
 80016ca:	2304      	movs	r3, #4
 80016cc:	e008      	b.n	80016e0 <HAL_GPIO_Init+0x204>
 80016ce:	2307      	movs	r3, #7
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x204>
 80016d2:	2303      	movs	r3, #3
 80016d4:	e004      	b.n	80016e0 <HAL_GPIO_Init+0x204>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e002      	b.n	80016e0 <HAL_GPIO_Init+0x204>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_GPIO_Init+0x204>
 80016de:	2300      	movs	r3, #0
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	f002 0203 	and.w	r2, r2, #3
 80016e6:	0092      	lsls	r2, r2, #2
 80016e8:	4093      	lsls	r3, r2
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f0:	4935      	ldr	r1, [pc, #212]	; (80017c8 <HAL_GPIO_Init+0x2ec>)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016fe:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <HAL_GPIO_Init+0x304>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001722:	4a2f      	ldr	r2, [pc, #188]	; (80017e0 <HAL_GPIO_Init+0x304>)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001728:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <HAL_GPIO_Init+0x304>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800174c:	4a24      	ldr	r2, [pc, #144]	; (80017e0 <HAL_GPIO_Init+0x304>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_GPIO_Init+0x304>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001776:	4a1a      	ldr	r2, [pc, #104]	; (80017e0 <HAL_GPIO_Init+0x304>)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <HAL_GPIO_Init+0x304>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017a0:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <HAL_GPIO_Init+0x304>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3301      	adds	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	2b0f      	cmp	r3, #15
 80017b0:	f67f aea2 	bls.w	80014f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40013800 	.word	0x40013800
 80017cc:	40020000 	.word	0x40020000
 80017d0:	40020400 	.word	0x40020400
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020c00 	.word	0x40020c00
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40013c00 	.word	0x40013c00

080017e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691a      	ldr	r2, [r3, #16]
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	e001      	b.n	8001806 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
 8001820:	4613      	mov	r3, r2
 8001822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001824:	787b      	ldrb	r3, [r7, #1]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182a:	887a      	ldrh	r2, [r7, #2]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001830:	e003      	b.n	800183a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	041a      	lsls	r2, r3, #16
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	619a      	str	r2, [r3, #24]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e267      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d075      	beq.n	8001952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001866:	4b88      	ldr	r3, [pc, #544]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b04      	cmp	r3, #4
 8001870:	d00c      	beq.n	800188c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001872:	4b85      	ldr	r3, [pc, #532]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800187a:	2b08      	cmp	r3, #8
 800187c:	d112      	bne.n	80018a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187e:	4b82      	ldr	r3, [pc, #520]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800188a:	d10b      	bne.n	80018a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188c:	4b7e      	ldr	r3, [pc, #504]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d05b      	beq.n	8001950 <HAL_RCC_OscConfig+0x108>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d157      	bne.n	8001950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e242      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ac:	d106      	bne.n	80018bc <HAL_RCC_OscConfig+0x74>
 80018ae:	4b76      	ldr	r3, [pc, #472]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a75      	ldr	r2, [pc, #468]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e01d      	b.n	80018f8 <HAL_RCC_OscConfig+0xb0>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x98>
 80018c6:	4b70      	ldr	r3, [pc, #448]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a6f      	ldr	r2, [pc, #444]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b6d      	ldr	r3, [pc, #436]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a6c      	ldr	r2, [pc, #432]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e00b      	b.n	80018f8 <HAL_RCC_OscConfig+0xb0>
 80018e0:	4b69      	ldr	r3, [pc, #420]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a68      	ldr	r2, [pc, #416]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b66      	ldr	r3, [pc, #408]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a65      	ldr	r2, [pc, #404]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 80018f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d013      	beq.n	8001928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fc18 	bl	8001134 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff fc14 	bl	8001134 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e207      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191a:	4b5b      	ldr	r3, [pc, #364]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0xc0>
 8001926:	e014      	b.n	8001952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff fc04 	bl	8001134 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff fc00 	bl	8001134 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	; 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e1f3      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001942:	4b51      	ldr	r3, [pc, #324]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0xe8>
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d063      	beq.n	8001a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800195e:	4b4a      	ldr	r3, [pc, #296]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00b      	beq.n	8001982 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800196a:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001972:	2b08      	cmp	r3, #8
 8001974:	d11c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001976:	4b44      	ldr	r3, [pc, #272]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d116      	bne.n	80019b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001982:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d005      	beq.n	800199a <HAL_RCC_OscConfig+0x152>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d001      	beq.n	800199a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e1c7      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199a:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4937      	ldr	r1, [pc, #220]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ae:	e03a      	b.n	8001a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d020      	beq.n	80019fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b8:	4b34      	ldr	r3, [pc, #208]	; (8001a8c <HAL_RCC_OscConfig+0x244>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019be:	f7ff fbb9 	bl	8001134 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c6:	f7ff fbb5 	bl	8001134 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e1a8      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d8:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e4:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4925      	ldr	r1, [pc, #148]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	600b      	str	r3, [r1, #0]
 80019f8:	e015      	b.n	8001a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fa:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <HAL_RCC_OscConfig+0x244>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff fb98 	bl	8001134 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a08:	f7ff fb94 	bl	8001134 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e187      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d036      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d016      	beq.n	8001a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <HAL_RCC_OscConfig+0x248>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a40:	f7ff fb78 	bl	8001134 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a48:	f7ff fb74 	bl	8001134 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e167      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x200>
 8001a66:	e01b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_RCC_OscConfig+0x248>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6e:	f7ff fb61 	bl	8001134 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a74:	e00e      	b.n	8001a94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a76:	f7ff fb5d 	bl	8001134 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d907      	bls.n	8001a94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e150      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	42470000 	.word	0x42470000
 8001a90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	4b88      	ldr	r3, [pc, #544]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1ea      	bne.n	8001a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 8097 	beq.w	8001bdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab2:	4b81      	ldr	r3, [pc, #516]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10f      	bne.n	8001ade <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	4b7d      	ldr	r3, [pc, #500]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a7c      	ldr	r2, [pc, #496]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b7a      	ldr	r3, [pc, #488]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ada:	2301      	movs	r3, #1
 8001adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ade:	4b77      	ldr	r3, [pc, #476]	; (8001cbc <HAL_RCC_OscConfig+0x474>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d118      	bne.n	8001b1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aea:	4b74      	ldr	r3, [pc, #464]	; (8001cbc <HAL_RCC_OscConfig+0x474>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a73      	ldr	r2, [pc, #460]	; (8001cbc <HAL_RCC_OscConfig+0x474>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af6:	f7ff fb1d 	bl	8001134 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afe:	f7ff fb19 	bl	8001134 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e10c      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b10:	4b6a      	ldr	r3, [pc, #424]	; (8001cbc <HAL_RCC_OscConfig+0x474>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d106      	bne.n	8001b32 <HAL_RCC_OscConfig+0x2ea>
 8001b24:	4b64      	ldr	r3, [pc, #400]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b28:	4a63      	ldr	r2, [pc, #396]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b30:	e01c      	b.n	8001b6c <HAL_RCC_OscConfig+0x324>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x30c>
 8001b3a:	4b5f      	ldr	r3, [pc, #380]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3e:	4a5e      	ldr	r2, [pc, #376]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	6713      	str	r3, [r2, #112]	; 0x70
 8001b46:	4b5c      	ldr	r3, [pc, #368]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4a:	4a5b      	ldr	r2, [pc, #364]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6713      	str	r3, [r2, #112]	; 0x70
 8001b52:	e00b      	b.n	8001b6c <HAL_RCC_OscConfig+0x324>
 8001b54:	4b58      	ldr	r3, [pc, #352]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	4a57      	ldr	r2, [pc, #348]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b5a:	f023 0301 	bic.w	r3, r3, #1
 8001b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b60:	4b55      	ldr	r3, [pc, #340]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b64:	4a54      	ldr	r2, [pc, #336]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b66:	f023 0304 	bic.w	r3, r3, #4
 8001b6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d015      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b74:	f7ff fade 	bl	8001134 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7a:	e00a      	b.n	8001b92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b7c:	f7ff fada 	bl	8001134 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e0cb      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b92:	4b49      	ldr	r3, [pc, #292]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0ee      	beq.n	8001b7c <HAL_RCC_OscConfig+0x334>
 8001b9e:	e014      	b.n	8001bca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba0:	f7ff fac8 	bl	8001134 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba6:	e00a      	b.n	8001bbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fac4 	bl	8001134 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e0b5      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbe:	4b3e      	ldr	r3, [pc, #248]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1ee      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd0:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	4a38      	ldr	r2, [pc, #224]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80a1 	beq.w	8001d28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001be6:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d05c      	beq.n	8001cac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d141      	bne.n	8001c7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfa:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <HAL_RCC_OscConfig+0x478>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff fa98 	bl	8001134 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff fa94 	bl	8001134 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e087      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1a:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69da      	ldr	r2, [r3, #28]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	019b      	lsls	r3, r3, #6
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	085b      	lsrs	r3, r3, #1
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	041b      	lsls	r3, r3, #16
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	061b      	lsls	r3, r3, #24
 8001c4a:	491b      	ldr	r1, [pc, #108]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_RCC_OscConfig+0x478>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7ff fa6d 	bl	8001134 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7ff fa69 	bl	8001134 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e05c      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x416>
 8001c7c:	e054      	b.n	8001d28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_RCC_OscConfig+0x478>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7ff fa56 	bl	8001134 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7ff fa52 	bl	8001134 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e045      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_RCC_OscConfig+0x470>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x444>
 8001caa:	e03d      	b.n	8001d28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e038      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <HAL_RCC_OscConfig+0x4ec>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d028      	beq.n	8001d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d121      	bne.n	8001d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d11a      	bne.n	8001d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d111      	bne.n	8001d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	085b      	lsrs	r3, r3, #1
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d107      	bne.n	8001d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800

08001d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0cc      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d4c:	4b68      	ldr	r3, [pc, #416]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d90c      	bls.n	8001d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	4b65      	ldr	r3, [pc, #404]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b63      	ldr	r3, [pc, #396]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0b8      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d020      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d8c:	4b59      	ldr	r3, [pc, #356]	; (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4a58      	ldr	r2, [pc, #352]	; (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da4:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4a52      	ldr	r2, [pc, #328]	; (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db0:	4b50      	ldr	r3, [pc, #320]	; (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	494d      	ldr	r1, [pc, #308]	; (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d044      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d119      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e07f      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d003      	beq.n	8001df6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df6:	4b3f      	ldr	r3, [pc, #252]	; (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d109      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e06f      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e06:	4b3b      	ldr	r3, [pc, #236]	; (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e067      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e16:	4b37      	ldr	r3, [pc, #220]	; (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f023 0203 	bic.w	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4934      	ldr	r1, [pc, #208]	; (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e28:	f7ff f984 	bl	8001134 <HAL_GetTick>
 8001e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	e00a      	b.n	8001e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e30:	f7ff f980 	bl	8001134 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e04f      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 020c 	and.w	r2, r3, #12
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d1eb      	bne.n	8001e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d20c      	bcs.n	8001e80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6e:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e032      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e8c:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4916      	ldr	r1, [pc, #88]	; (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d009      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	490e      	ldr	r1, [pc, #56]	; (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ebe:	f000 f821 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	490a      	ldr	r1, [pc, #40]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	5ccb      	ldrb	r3, [r1, r3]
 8001ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed6:	4a09      	ldr	r2, [pc, #36]	; (8001efc <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_RCC_ClockConfig+0x1c8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff f8e4 	bl	80010ac <HAL_InitTick>

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023c00 	.word	0x40023c00
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	080065c8 	.word	0x080065c8
 8001efc:	20000000 	.word	0x20000000
 8001f00:	20000004 	.word	0x20000004

08001f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f08:	b090      	sub	sp, #64	; 0x40
 8001f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8001f10:	2300      	movs	r3, #0
 8001f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f14:	2300      	movs	r3, #0
 8001f16:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f1c:	4b59      	ldr	r3, [pc, #356]	; (8002084 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d00d      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0x40>
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	f200 80a1 	bhi.w	8002070 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x34>
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d003      	beq.n	8001f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f36:	e09b      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f38:	4b53      	ldr	r3, [pc, #332]	; (8002088 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f3a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001f3c:	e09b      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f3e:	4b53      	ldr	r3, [pc, #332]	; (800208c <HAL_RCC_GetSysClockFreq+0x188>)
 8001f40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f42:	e098      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f44:	4b4f      	ldr	r3, [pc, #316]	; (8002084 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f4e:	4b4d      	ldr	r3, [pc, #308]	; (8002084 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d028      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f5a:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	099b      	lsrs	r3, r3, #6
 8001f60:	2200      	movs	r2, #0
 8001f62:	623b      	str	r3, [r7, #32]
 8001f64:	627a      	str	r2, [r7, #36]	; 0x24
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_RCC_GetSysClockFreq+0x188>)
 8001f70:	fb03 f201 	mul.w	r2, r3, r1
 8001f74:	2300      	movs	r3, #0
 8001f76:	fb00 f303 	mul.w	r3, r0, r3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4a43      	ldr	r2, [pc, #268]	; (800208c <HAL_RCC_GetSysClockFreq+0x188>)
 8001f7e:	fba0 1202 	umull	r1, r2, r0, r2
 8001f82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f84:	460a      	mov	r2, r1
 8001f86:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f8a:	4413      	add	r3, r2
 8001f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f90:	2200      	movs	r2, #0
 8001f92:	61bb      	str	r3, [r7, #24]
 8001f94:	61fa      	str	r2, [r7, #28]
 8001f96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f9e:	f7fe f977 	bl	8000290 <__aeabi_uldivmod>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001faa:	e053      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fac:	4b35      	ldr	r3, [pc, #212]	; (8002084 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	099b      	lsrs	r3, r3, #6
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	617a      	str	r2, [r7, #20]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fbe:	f04f 0b00 	mov.w	fp, #0
 8001fc2:	4652      	mov	r2, sl
 8001fc4:	465b      	mov	r3, fp
 8001fc6:	f04f 0000 	mov.w	r0, #0
 8001fca:	f04f 0100 	mov.w	r1, #0
 8001fce:	0159      	lsls	r1, r3, #5
 8001fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fd4:	0150      	lsls	r0, r2, #5
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	ebb2 080a 	subs.w	r8, r2, sl
 8001fde:	eb63 090b 	sbc.w	r9, r3, fp
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001fee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ff2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ff6:	ebb2 0408 	subs.w	r4, r2, r8
 8001ffa:	eb63 0509 	sbc.w	r5, r3, r9
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	00eb      	lsls	r3, r5, #3
 8002008:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800200c:	00e2      	lsls	r2, r4, #3
 800200e:	4614      	mov	r4, r2
 8002010:	461d      	mov	r5, r3
 8002012:	eb14 030a 	adds.w	r3, r4, sl
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	eb45 030b 	adc.w	r3, r5, fp
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800202a:	4629      	mov	r1, r5
 800202c:	028b      	lsls	r3, r1, #10
 800202e:	4621      	mov	r1, r4
 8002030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002034:	4621      	mov	r1, r4
 8002036:	028a      	lsls	r2, r1, #10
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203e:	2200      	movs	r2, #0
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	60fa      	str	r2, [r7, #12]
 8002044:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002048:	f7fe f922 	bl	8000290 <__aeabi_uldivmod>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4613      	mov	r3, r2
 8002052:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_RCC_GetSysClockFreq+0x180>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	0c1b      	lsrs	r3, r3, #16
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	3301      	adds	r3, #1
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002064:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002068:	fbb2 f3f3 	udiv	r3, r2, r3
 800206c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800206e:	e002      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_RCC_GetSysClockFreq+0x184>)
 8002072:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002078:	4618      	mov	r0, r3
 800207a:	3740      	adds	r7, #64	; 0x40
 800207c:	46bd      	mov	sp, r7
 800207e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
 8002088:	00f42400 	.word	0x00f42400
 800208c:	017d7840 	.word	0x017d7840

08002090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000000 	.word	0x20000000

080020a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020ac:	f7ff fff0 	bl	8002090 <HAL_RCC_GetHCLKFreq>
 80020b0:	4602      	mov	r2, r0
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	0a9b      	lsrs	r3, r3, #10
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	4903      	ldr	r1, [pc, #12]	; (80020cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020be:	5ccb      	ldrb	r3, [r1, r3]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	080065d8 	.word	0x080065d8

080020d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020d4:	f7ff ffdc 	bl	8002090 <HAL_RCC_GetHCLKFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	0b5b      	lsrs	r3, r3, #13
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4903      	ldr	r1, [pc, #12]	; (80020f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	080065d8 	.word	0x080065d8

080020f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e07b      	b.n	8002202 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	2b00      	cmp	r3, #0
 8002110:	d108      	bne.n	8002124 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800211a:	d009      	beq.n	8002130 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	61da      	str	r2, [r3, #28]
 8002122:	e005      	b.n	8002130 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d106      	bne.n	8002150 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe fd76 	bl	8000c3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002166:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002178:	431a      	orrs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b4:	ea42 0103 	orr.w	r1, r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	0c1b      	lsrs	r3, r3, #16
 80021ce:	f003 0104 	and.w	r1, r3, #4
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	f003 0210 	and.w	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	69da      	ldr	r2, [r3, #28]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b088      	sub	sp, #32
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	4613      	mov	r3, r2
 8002218:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_SPI_Transmit+0x22>
 8002228:	2302      	movs	r3, #2
 800222a:	e126      	b.n	800247a <HAL_SPI_Transmit+0x270>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002234:	f7fe ff7e 	bl	8001134 <HAL_GetTick>
 8002238:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b01      	cmp	r3, #1
 8002248:	d002      	beq.n	8002250 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800224a:	2302      	movs	r3, #2
 800224c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800224e:	e10b      	b.n	8002468 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <HAL_SPI_Transmit+0x52>
 8002256:	88fb      	ldrh	r3, [r7, #6]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d102      	bne.n	8002262 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002260:	e102      	b.n	8002468 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2203      	movs	r2, #3
 8002266:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	88fa      	ldrh	r2, [r7, #6]
 800227a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	88fa      	ldrh	r2, [r7, #6]
 8002280:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022a8:	d10f      	bne.n	80022ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d4:	2b40      	cmp	r3, #64	; 0x40
 80022d6:	d007      	beq.n	80022e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022f0:	d14b      	bne.n	800238a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <HAL_SPI_Transmit+0xf6>
 80022fa:	8afb      	ldrh	r3, [r7, #22]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d13e      	bne.n	800237e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	881a      	ldrh	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	1c9a      	adds	r2, r3, #2
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800231a:	b29b      	uxth	r3, r3
 800231c:	3b01      	subs	r3, #1
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002324:	e02b      	b.n	800237e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b02      	cmp	r3, #2
 8002332:	d112      	bne.n	800235a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	881a      	ldrh	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	1c9a      	adds	r2, r3, #2
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	86da      	strh	r2, [r3, #54]	; 0x36
 8002358:	e011      	b.n	800237e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800235a:	f7fe feeb 	bl	8001134 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d803      	bhi.n	8002372 <HAL_SPI_Transmit+0x168>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d102      	bne.n	8002378 <HAL_SPI_Transmit+0x16e>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800237c:	e074      	b.n	8002468 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1ce      	bne.n	8002326 <HAL_SPI_Transmit+0x11c>
 8002388:	e04c      	b.n	8002424 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <HAL_SPI_Transmit+0x18e>
 8002392:	8afb      	ldrh	r3, [r7, #22]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d140      	bne.n	800241a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	330c      	adds	r3, #12
 80023a2:	7812      	ldrb	r2, [r2, #0]
 80023a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023be:	e02c      	b.n	800241a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d113      	bne.n	80023f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	330c      	adds	r3, #12
 80023d8:	7812      	ldrb	r2, [r2, #0]
 80023da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80023f4:	e011      	b.n	800241a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023f6:	f7fe fe9d 	bl	8001134 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d803      	bhi.n	800240e <HAL_SPI_Transmit+0x204>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240c:	d102      	bne.n	8002414 <HAL_SPI_Transmit+0x20a>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002418:	e026      	b.n	8002468 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800241e:	b29b      	uxth	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1cd      	bne.n	80023c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	6839      	ldr	r1, [r7, #0]
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 fa63 	bl	80028f4 <SPI_EndRxTxTransaction>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10a      	bne.n	8002458 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	77fb      	strb	r3, [r7, #31]
 8002464:	e000      	b.n	8002468 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002466:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002478:	7ffb      	ldrb	r3, [r7, #31]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3720      	adds	r7, #32
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b08c      	sub	sp, #48	; 0x30
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002490:	2301      	movs	r3, #1
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_SPI_TransmitReceive+0x26>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e18a      	b.n	80027be <HAL_SPI_TransmitReceive+0x33c>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024b0:	f7fe fe40 	bl	8001134 <HAL_GetTick>
 80024b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024c6:	887b      	ldrh	r3, [r7, #2]
 80024c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d00f      	beq.n	80024f2 <HAL_SPI_TransmitReceive+0x70>
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024d8:	d107      	bne.n	80024ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d103      	bne.n	80024ea <HAL_SPI_TransmitReceive+0x68>
 80024e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d003      	beq.n	80024f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80024ea:	2302      	movs	r3, #2
 80024ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80024f0:	e15b      	b.n	80027aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_SPI_TransmitReceive+0x82>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <HAL_SPI_TransmitReceive+0x82>
 80024fe:	887b      	ldrh	r3, [r7, #2]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d103      	bne.n	800250c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800250a:	e14e      	b.n	80027aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b04      	cmp	r3, #4
 8002516:	d003      	beq.n	8002520 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2205      	movs	r2, #5
 800251c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	887a      	ldrh	r2, [r7, #2]
 8002536:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	887a      	ldrh	r2, [r7, #2]
 8002542:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002560:	2b40      	cmp	r3, #64	; 0x40
 8002562:	d007      	beq.n	8002574 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002572:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800257c:	d178      	bne.n	8002670 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_SPI_TransmitReceive+0x10a>
 8002586:	8b7b      	ldrh	r3, [r7, #26]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d166      	bne.n	800265a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	881a      	ldrh	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	1c9a      	adds	r2, r3, #2
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025b0:	e053      	b.n	800265a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d11b      	bne.n	80025f8 <HAL_SPI_TransmitReceive+0x176>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d016      	beq.n	80025f8 <HAL_SPI_TransmitReceive+0x176>
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d113      	bne.n	80025f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	881a      	ldrh	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	1c9a      	adds	r2, r3, #2
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b01      	cmp	r3, #1
 8002604:	d119      	bne.n	800263a <HAL_SPI_TransmitReceive+0x1b8>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800260a:	b29b      	uxth	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d014      	beq.n	800263a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261a:	b292      	uxth	r2, r2
 800261c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	1c9a      	adds	r2, r3, #2
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002636:	2301      	movs	r3, #1
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800263a:	f7fe fd7b 	bl	8001134 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002646:	429a      	cmp	r2, r3
 8002648:	d807      	bhi.n	800265a <HAL_SPI_TransmitReceive+0x1d8>
 800264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d003      	beq.n	800265a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002658:	e0a7      	b.n	80027aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1a6      	bne.n	80025b2 <HAL_SPI_TransmitReceive+0x130>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1a1      	bne.n	80025b2 <HAL_SPI_TransmitReceive+0x130>
 800266e:	e07c      	b.n	800276a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_SPI_TransmitReceive+0x1fc>
 8002678:	8b7b      	ldrh	r3, [r7, #26]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d16b      	bne.n	8002756 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	330c      	adds	r3, #12
 8002688:	7812      	ldrb	r2, [r2, #0]
 800268a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026a4:	e057      	b.n	8002756 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d11c      	bne.n	80026ee <HAL_SPI_TransmitReceive+0x26c>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d017      	beq.n	80026ee <HAL_SPI_TransmitReceive+0x26c>
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d114      	bne.n	80026ee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	330c      	adds	r3, #12
 80026ce:	7812      	ldrb	r2, [r2, #0]
 80026d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d119      	bne.n	8002730 <HAL_SPI_TransmitReceive+0x2ae>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d014      	beq.n	8002730 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800272c:	2301      	movs	r3, #1
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002730:	f7fe fd00 	bl	8001134 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800273c:	429a      	cmp	r2, r3
 800273e:	d803      	bhi.n	8002748 <HAL_SPI_TransmitReceive+0x2c6>
 8002740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002746:	d102      	bne.n	800274e <HAL_SPI_TransmitReceive+0x2cc>
 8002748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274a:	2b00      	cmp	r3, #0
 800274c:	d103      	bne.n	8002756 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002754:	e029      	b.n	80027aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1a2      	bne.n	80026a6 <HAL_SPI_TransmitReceive+0x224>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d19d      	bne.n	80026a6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800276a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f8c0 	bl	80028f4 <SPI_EndRxTxTransaction>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d006      	beq.n	8002788 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002786:	e010      	b.n	80027aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10b      	bne.n	80027a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	e000      	b.n	80027aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80027a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3730      	adds	r7, #48	; 0x30
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027d4:	b2db      	uxtb	r3, r3
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	4613      	mov	r3, r2
 80027f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027f4:	f7fe fc9e 	bl	8001134 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	4413      	add	r3, r2
 8002802:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002804:	f7fe fc96 	bl	8001134 <HAL_GetTick>
 8002808:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800280a:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	015b      	lsls	r3, r3, #5
 8002810:	0d1b      	lsrs	r3, r3, #20
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	fb02 f303 	mul.w	r3, r2, r3
 8002818:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800281a:	e054      	b.n	80028c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002822:	d050      	beq.n	80028c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002824:	f7fe fc86 	bl	8001134 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	429a      	cmp	r2, r3
 8002832:	d902      	bls.n	800283a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d13d      	bne.n	80028b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002848:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002852:	d111      	bne.n	8002878 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800285c:	d004      	beq.n	8002868 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002866:	d107      	bne.n	8002878 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002876:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002880:	d10f      	bne.n	80028a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e017      	b.n	80028e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4013      	ands	r3, r2
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	bf0c      	ite	eq
 80028d6:	2301      	moveq	r3, #1
 80028d8:	2300      	movne	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d19b      	bne.n	800281c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3720      	adds	r7, #32
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000000 	.word	0x20000000

080028f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002900:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <SPI_EndRxTxTransaction+0x7c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1b      	ldr	r2, [pc, #108]	; (8002974 <SPI_EndRxTxTransaction+0x80>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	0d5b      	lsrs	r3, r3, #21
 800290c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002910:	fb02 f303 	mul.w	r3, r2, r3
 8002914:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800291e:	d112      	bne.n	8002946 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2200      	movs	r2, #0
 8002928:	2180      	movs	r1, #128	; 0x80
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f7ff ff5a 	bl	80027e4 <SPI_WaitFlagStateUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d016      	beq.n	8002964 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293a:	f043 0220 	orr.w	r2, r3, #32
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e00f      	b.n	8002966 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3b01      	subs	r3, #1
 8002950:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295c:	2b80      	cmp	r3, #128	; 0x80
 800295e:	d0f2      	beq.n	8002946 <SPI_EndRxTxTransaction+0x52>
 8002960:	e000      	b.n	8002964 <SPI_EndRxTxTransaction+0x70>
        break;
 8002962:	bf00      	nop
  }

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000000 	.word	0x20000000
 8002974:	165e9f81 	.word	0x165e9f81

08002978 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e03f      	b.n	8002a0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fe f994 	bl	8000ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2224      	movs	r2, #36	; 0x24
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 fddf 	bl	8003580 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b08a      	sub	sp, #40	; 0x28
 8002a16:	af02      	add	r7, sp, #8
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	603b      	str	r3, [r7, #0]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b20      	cmp	r3, #32
 8002a30:	d17c      	bne.n	8002b2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_UART_Transmit+0x2c>
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e075      	b.n	8002b2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_UART_Transmit+0x3e>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e06e      	b.n	8002b2e <HAL_UART_Transmit+0x11c>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2221      	movs	r2, #33	; 0x21
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a66:	f7fe fb65 	bl	8001134 <HAL_GetTick>
 8002a6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	88fa      	ldrh	r2, [r7, #6]
 8002a70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	88fa      	ldrh	r2, [r7, #6]
 8002a76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a80:	d108      	bne.n	8002a94 <HAL_UART_Transmit+0x82>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d104      	bne.n	8002a94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	e003      	b.n	8002a9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002aa4:	e02a      	b.n	8002afc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2200      	movs	r2, #0
 8002aae:	2180      	movs	r1, #128	; 0x80
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 fb1f 	bl	80030f4 <UART_WaitOnFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e036      	b.n	8002b2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10b      	bne.n	8002ade <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ad4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	3302      	adds	r3, #2
 8002ada:	61bb      	str	r3, [r7, #24]
 8002adc:	e007      	b.n	8002aee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	3301      	adds	r3, #1
 8002aec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1cf      	bne.n	8002aa6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2140      	movs	r1, #64	; 0x40
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 faef 	bl	80030f4 <UART_WaitOnFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e006      	b.n	8002b2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	e000      	b.n	8002b2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b2c:	2302      	movs	r3, #2
  }
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3720      	adds	r7, #32
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	4613      	mov	r3, r2
 8002b42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d11d      	bne.n	8002b8c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_UART_Receive_IT+0x26>
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e016      	b.n	8002b8e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_UART_Receive_IT+0x38>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e00f      	b.n	8002b8e <HAL_UART_Receive_IT+0x58>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fb24 	bl	80031d0 <UART_Start_Receive_IT>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	e000      	b.n	8002b8e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002b8c:	2302      	movs	r3, #2
  }
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b0ba      	sub	sp, #232	; 0xe8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10f      	bne.n	8002bfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d009      	beq.n	8002bfe <HAL_UART_IRQHandler+0x66>
 8002bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fc07 	bl	800340a <UART_Receive_IT>
      return;
 8002bfc:	e256      	b.n	80030ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80de 	beq.w	8002dc4 <HAL_UART_IRQHandler+0x22c>
 8002c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d106      	bne.n	8002c22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80d1 	beq.w	8002dc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <HAL_UART_IRQHandler+0xae>
 8002c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f043 0201 	orr.w	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00b      	beq.n	8002c6a <HAL_UART_IRQHandler+0xd2>
 8002c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f043 0202 	orr.w	r2, r3, #2
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <HAL_UART_IRQHandler+0xf6>
 8002c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f043 0204 	orr.w	r2, r3, #4
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d011      	beq.n	8002cbe <HAL_UART_IRQHandler+0x126>
 8002c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d105      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f043 0208 	orr.w	r2, r3, #8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 81ed 	beq.w	80030a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x14e>
 8002cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fb92 	bl	800340a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b40      	cmp	r3, #64	; 0x40
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d103      	bne.n	8002d12 <HAL_UART_IRQHandler+0x17a>
 8002d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d04f      	beq.n	8002db2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fa9a 	bl	800324c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d22:	2b40      	cmp	r3, #64	; 0x40
 8002d24:	d141      	bne.n	8002daa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3314      	adds	r3, #20
 8002d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d34:	e853 3f00 	ldrex	r3, [r3]
 8002d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3314      	adds	r3, #20
 8002d4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d62:	e841 2300 	strex	r3, r2, [r1]
 8002d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1d9      	bne.n	8002d26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d013      	beq.n	8002da2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7e:	4a7d      	ldr	r2, [pc, #500]	; (8002f74 <HAL_UART_IRQHandler+0x3dc>)
 8002d80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe fb85 	bl	8001496 <HAL_DMA_Abort_IT>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d016      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da0:	e00e      	b.n	8002dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f990 	bl	80030c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da8:	e00a      	b.n	8002dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f98c 	bl	80030c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db0:	e006      	b.n	8002dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f988 	bl	80030c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002dbe:	e170      	b.n	80030a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc0:	bf00      	nop
    return;
 8002dc2:	e16e      	b.n	80030a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	f040 814a 	bne.w	8003062 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8143 	beq.w	8003062 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 813c 	beq.w	8003062 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dea:	2300      	movs	r3, #0
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0a:	2b40      	cmp	r3, #64	; 0x40
 8002e0c:	f040 80b4 	bne.w	8002f78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8140 	beq.w	80030a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	f080 8139 	bcs.w	80030a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e46:	f000 8088 	beq.w	8002f5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	330c      	adds	r3, #12
 8002e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e58:	e853 3f00 	ldrex	r3, [r3]
 8002e5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	330c      	adds	r3, #12
 8002e72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e86:	e841 2300 	strex	r3, r2, [r1]
 8002e8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1d9      	bne.n	8002e4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3314      	adds	r3, #20
 8002e9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3314      	adds	r3, #20
 8002eb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002eba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ec6:	e841 2300 	strex	r3, r2, [r1]
 8002eca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1e1      	bne.n	8002e96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3314      	adds	r3, #20
 8002ed8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002edc:	e853 3f00 	ldrex	r3, [r3]
 8002ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3314      	adds	r3, #20
 8002ef2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ef6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ef8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002efc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002efe:	e841 2300 	strex	r3, r2, [r1]
 8002f02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1e3      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f22:	e853 3f00 	ldrex	r3, [r3]
 8002f26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f2a:	f023 0310 	bic.w	r3, r3, #16
 8002f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	330c      	adds	r3, #12
 8002f38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f44:	e841 2300 	strex	r3, r2, [r1]
 8002f48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e3      	bne.n	8002f18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe fa2e 	bl	80013b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	4619      	mov	r1, r3
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f8b6 	bl	80030dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f70:	e099      	b.n	80030a6 <HAL_UART_IRQHandler+0x50e>
 8002f72:	bf00      	nop
 8002f74:	08003313 	.word	0x08003313
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 808b 	beq.w	80030aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002f94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8086 	beq.w	80030aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa8:	e853 3f00 	ldrex	r3, [r3]
 8002fac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	330c      	adds	r3, #12
 8002fbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002fc2:	647a      	str	r2, [r7, #68]	; 0x44
 8002fc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1e3      	bne.n	8002f9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3314      	adds	r3, #20
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	e853 3f00 	ldrex	r3, [r3]
 8002fe4:	623b      	str	r3, [r7, #32]
   return(result);
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3314      	adds	r3, #20
 8002ff6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ffa:	633a      	str	r2, [r7, #48]	; 0x30
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003002:	e841 2300 	strex	r3, r2, [r1]
 8003006:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1e3      	bne.n	8002fd6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	e853 3f00 	ldrex	r3, [r3]
 800302a:	60fb      	str	r3, [r7, #12]
   return(result);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0310 	bic.w	r3, r3, #16
 8003032:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	330c      	adds	r3, #12
 800303c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003040:	61fa      	str	r2, [r7, #28]
 8003042:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003044:	69b9      	ldr	r1, [r7, #24]
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	e841 2300 	strex	r3, r2, [r1]
 800304c:	617b      	str	r3, [r7, #20]
   return(result);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e3      	bne.n	800301c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003058:	4619      	mov	r1, r3
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f83e 	bl	80030dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003060:	e023      	b.n	80030aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_UART_IRQHandler+0x4ea>
 800306e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f95d 	bl	800333a <UART_Transmit_IT>
    return;
 8003080:	e014      	b.n	80030ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00e      	beq.n	80030ac <HAL_UART_IRQHandler+0x514>
 800308e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d008      	beq.n	80030ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f99d 	bl	80033da <UART_EndTransmit_IT>
    return;
 80030a0:	e004      	b.n	80030ac <HAL_UART_IRQHandler+0x514>
    return;
 80030a2:	bf00      	nop
 80030a4:	e002      	b.n	80030ac <HAL_UART_IRQHandler+0x514>
      return;
 80030a6:	bf00      	nop
 80030a8:	e000      	b.n	80030ac <HAL_UART_IRQHandler+0x514>
      return;
 80030aa:	bf00      	nop
  }
}
 80030ac:	37e8      	adds	r7, #232	; 0xe8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop

080030b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b090      	sub	sp, #64	; 0x40
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003104:	e050      	b.n	80031a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310c:	d04c      	beq.n	80031a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800310e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003110:	2b00      	cmp	r3, #0
 8003112:	d007      	beq.n	8003124 <UART_WaitOnFlagUntilTimeout+0x30>
 8003114:	f7fe f80e 	bl	8001134 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003120:	429a      	cmp	r2, r3
 8003122:	d241      	bcs.n	80031a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	330c      	adds	r3, #12
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	e853 3f00 	ldrex	r3, [r3]
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800313a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	330c      	adds	r3, #12
 8003142:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003144:	637a      	str	r2, [r7, #52]	; 0x34
 8003146:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003148:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800314a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800314c:	e841 2300 	strex	r3, r2, [r1]
 8003150:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1e5      	bne.n	8003124 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3314      	adds	r3, #20
 800315e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	e853 3f00 	ldrex	r3, [r3]
 8003166:	613b      	str	r3, [r7, #16]
   return(result);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f023 0301 	bic.w	r3, r3, #1
 800316e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3314      	adds	r3, #20
 8003176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003178:	623a      	str	r2, [r7, #32]
 800317a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317c:	69f9      	ldr	r1, [r7, #28]
 800317e:	6a3a      	ldr	r2, [r7, #32]
 8003180:	e841 2300 	strex	r3, r2, [r1]
 8003184:	61bb      	str	r3, [r7, #24]
   return(result);
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1e5      	bne.n	8003158 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e00f      	b.n	80031c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4013      	ands	r3, r2
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d09f      	beq.n	8003106 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3740      	adds	r7, #64	; 0x40
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	4613      	mov	r3, r2
 80031dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	88fa      	ldrh	r2, [r7, #6]
 80031e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	88fa      	ldrh	r2, [r7, #6]
 80031ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2222      	movs	r2, #34	; 0x22
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800321c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0201 	orr.w	r2, r2, #1
 800322c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 0220 	orr.w	r2, r2, #32
 800323c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800324c:	b480      	push	{r7}
 800324e:	b095      	sub	sp, #84	; 0x54
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	330c      	adds	r3, #12
 800325a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325e:	e853 3f00 	ldrex	r3, [r3]
 8003262:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003266:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800326a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	330c      	adds	r3, #12
 8003272:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003274:	643a      	str	r2, [r7, #64]	; 0x40
 8003276:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003278:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800327a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e5      	bne.n	8003254 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3314      	adds	r3, #20
 800328e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	e853 3f00 	ldrex	r3, [r3]
 8003296:	61fb      	str	r3, [r7, #28]
   return(result);
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	64bb      	str	r3, [r7, #72]	; 0x48
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3314      	adds	r3, #20
 80032a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032b0:	e841 2300 	strex	r3, r2, [r1]
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e5      	bne.n	8003288 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d119      	bne.n	80032f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	330c      	adds	r3, #12
 80032ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	e853 3f00 	ldrex	r3, [r3]
 80032d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f023 0310 	bic.w	r3, r3, #16
 80032da:	647b      	str	r3, [r7, #68]	; 0x44
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	330c      	adds	r3, #12
 80032e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032e4:	61ba      	str	r2, [r7, #24]
 80032e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e8:	6979      	ldr	r1, [r7, #20]
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	e841 2300 	strex	r3, r2, [r1]
 80032f0:	613b      	str	r3, [r7, #16]
   return(result);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e5      	bne.n	80032c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003306:	bf00      	nop
 8003308:	3754      	adds	r7, #84	; 0x54
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff fecb 	bl	80030c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800333a:	b480      	push	{r7}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b21      	cmp	r3, #33	; 0x21
 800334c:	d13e      	bne.n	80033cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003356:	d114      	bne.n	8003382 <UART_Transmit_IT+0x48>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d110      	bne.n	8003382 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003374:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	1c9a      	adds	r2, r3, #2
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	621a      	str	r2, [r3, #32]
 8003380:	e008      	b.n	8003394 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	1c59      	adds	r1, r3, #1
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6211      	str	r1, [r2, #32]
 800338c:	781a      	ldrb	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29b      	uxth	r3, r3
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	4619      	mov	r1, r3
 80033a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10f      	bne.n	80033c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e000      	b.n	80033ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033cc:	2302      	movs	r3, #2
  }
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff fe5a 	bl	80030b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b08c      	sub	sp, #48	; 0x30
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b22      	cmp	r3, #34	; 0x22
 800341c:	f040 80ab 	bne.w	8003576 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003428:	d117      	bne.n	800345a <UART_Receive_IT+0x50>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d113      	bne.n	800345a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003432:	2300      	movs	r3, #0
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	b29b      	uxth	r3, r3
 8003444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003448:	b29a      	uxth	r2, r3
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	1c9a      	adds	r2, r3, #2
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	629a      	str	r2, [r3, #40]	; 0x28
 8003458:	e026      	b.n	80034a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003460:	2300      	movs	r3, #0
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346c:	d007      	beq.n	800347e <UART_Receive_IT+0x74>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10a      	bne.n	800348c <UART_Receive_IT+0x82>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	e008      	b.n	800349e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003498:	b2da      	uxtb	r2, r3
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	4619      	mov	r1, r3
 80034b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d15a      	bne.n	8003572 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0220 	bic.w	r2, r2, #32
 80034ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0201 	bic.w	r2, r2, #1
 80034ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d135      	bne.n	8003568 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	330c      	adds	r3, #12
 8003508:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	e853 3f00 	ldrex	r3, [r3]
 8003510:	613b      	str	r3, [r7, #16]
   return(result);
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f023 0310 	bic.w	r3, r3, #16
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	330c      	adds	r3, #12
 8003520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003522:	623a      	str	r2, [r7, #32]
 8003524:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003526:	69f9      	ldr	r1, [r7, #28]
 8003528:	6a3a      	ldr	r2, [r7, #32]
 800352a:	e841 2300 	strex	r3, r2, [r1]
 800352e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1e5      	bne.n	8003502 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b10      	cmp	r3, #16
 8003542:	d10a      	bne.n	800355a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800355e:	4619      	mov	r1, r3
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff fdbb 	bl	80030dc <HAL_UARTEx_RxEventCallback>
 8003566:	e002      	b.n	800356e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7fd f8d3 	bl	8000714 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	e002      	b.n	8003578 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	e000      	b.n	8003578 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003576:	2302      	movs	r3, #2
  }
}
 8003578:	4618      	mov	r0, r3
 800357a:	3730      	adds	r7, #48	; 0x30
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003584:	b0c0      	sub	sp, #256	; 0x100
 8003586:	af00      	add	r7, sp, #0
 8003588:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800358c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359c:	68d9      	ldr	r1, [r3, #12]
 800359e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	ea40 0301 	orr.w	r3, r0, r1
 80035a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	431a      	orrs	r2, r3
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035d8:	f021 010c 	bic.w	r1, r1, #12
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80035e6:	430b      	orrs	r3, r1
 80035e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fa:	6999      	ldr	r1, [r3, #24]
 80035fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	ea40 0301 	orr.w	r3, r0, r1
 8003606:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	4b8f      	ldr	r3, [pc, #572]	; (800384c <UART_SetConfig+0x2cc>)
 8003610:	429a      	cmp	r2, r3
 8003612:	d005      	beq.n	8003620 <UART_SetConfig+0xa0>
 8003614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4b8d      	ldr	r3, [pc, #564]	; (8003850 <UART_SetConfig+0x2d0>)
 800361c:	429a      	cmp	r2, r3
 800361e:	d104      	bne.n	800362a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003620:	f7fe fd56 	bl	80020d0 <HAL_RCC_GetPCLK2Freq>
 8003624:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003628:	e003      	b.n	8003632 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800362a:	f7fe fd3d 	bl	80020a8 <HAL_RCC_GetPCLK1Freq>
 800362e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363c:	f040 810c 	bne.w	8003858 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003644:	2200      	movs	r2, #0
 8003646:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800364a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800364e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003652:	4622      	mov	r2, r4
 8003654:	462b      	mov	r3, r5
 8003656:	1891      	adds	r1, r2, r2
 8003658:	65b9      	str	r1, [r7, #88]	; 0x58
 800365a:	415b      	adcs	r3, r3
 800365c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800365e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003662:	4621      	mov	r1, r4
 8003664:	eb12 0801 	adds.w	r8, r2, r1
 8003668:	4629      	mov	r1, r5
 800366a:	eb43 0901 	adc.w	r9, r3, r1
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800367a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800367e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003682:	4690      	mov	r8, r2
 8003684:	4699      	mov	r9, r3
 8003686:	4623      	mov	r3, r4
 8003688:	eb18 0303 	adds.w	r3, r8, r3
 800368c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003690:	462b      	mov	r3, r5
 8003692:	eb49 0303 	adc.w	r3, r9, r3
 8003696:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80036aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036ae:	460b      	mov	r3, r1
 80036b0:	18db      	adds	r3, r3, r3
 80036b2:	653b      	str	r3, [r7, #80]	; 0x50
 80036b4:	4613      	mov	r3, r2
 80036b6:	eb42 0303 	adc.w	r3, r2, r3
 80036ba:	657b      	str	r3, [r7, #84]	; 0x54
 80036bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80036c4:	f7fc fde4 	bl	8000290 <__aeabi_uldivmod>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4b61      	ldr	r3, [pc, #388]	; (8003854 <UART_SetConfig+0x2d4>)
 80036ce:	fba3 2302 	umull	r2, r3, r3, r2
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	011c      	lsls	r4, r3, #4
 80036d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80036e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80036e8:	4642      	mov	r2, r8
 80036ea:	464b      	mov	r3, r9
 80036ec:	1891      	adds	r1, r2, r2
 80036ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80036f0:	415b      	adcs	r3, r3
 80036f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036f8:	4641      	mov	r1, r8
 80036fa:	eb12 0a01 	adds.w	sl, r2, r1
 80036fe:	4649      	mov	r1, r9
 8003700:	eb43 0b01 	adc.w	fp, r3, r1
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003710:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003714:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003718:	4692      	mov	sl, r2
 800371a:	469b      	mov	fp, r3
 800371c:	4643      	mov	r3, r8
 800371e:	eb1a 0303 	adds.w	r3, sl, r3
 8003722:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003726:	464b      	mov	r3, r9
 8003728:	eb4b 0303 	adc.w	r3, fp, r3
 800372c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800373c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003740:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003744:	460b      	mov	r3, r1
 8003746:	18db      	adds	r3, r3, r3
 8003748:	643b      	str	r3, [r7, #64]	; 0x40
 800374a:	4613      	mov	r3, r2
 800374c:	eb42 0303 	adc.w	r3, r2, r3
 8003750:	647b      	str	r3, [r7, #68]	; 0x44
 8003752:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003756:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800375a:	f7fc fd99 	bl	8000290 <__aeabi_uldivmod>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4611      	mov	r1, r2
 8003764:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <UART_SetConfig+0x2d4>)
 8003766:	fba3 2301 	umull	r2, r3, r3, r1
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	2264      	movs	r2, #100	; 0x64
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	1acb      	subs	r3, r1, r3
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800377a:	4b36      	ldr	r3, [pc, #216]	; (8003854 <UART_SetConfig+0x2d4>)
 800377c:	fba3 2302 	umull	r2, r3, r3, r2
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003788:	441c      	add	r4, r3
 800378a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800378e:	2200      	movs	r2, #0
 8003790:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003794:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003798:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800379c:	4642      	mov	r2, r8
 800379e:	464b      	mov	r3, r9
 80037a0:	1891      	adds	r1, r2, r2
 80037a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80037a4:	415b      	adcs	r3, r3
 80037a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037ac:	4641      	mov	r1, r8
 80037ae:	1851      	adds	r1, r2, r1
 80037b0:	6339      	str	r1, [r7, #48]	; 0x30
 80037b2:	4649      	mov	r1, r9
 80037b4:	414b      	adcs	r3, r1
 80037b6:	637b      	str	r3, [r7, #52]	; 0x34
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80037c4:	4659      	mov	r1, fp
 80037c6:	00cb      	lsls	r3, r1, #3
 80037c8:	4651      	mov	r1, sl
 80037ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ce:	4651      	mov	r1, sl
 80037d0:	00ca      	lsls	r2, r1, #3
 80037d2:	4610      	mov	r0, r2
 80037d4:	4619      	mov	r1, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	4642      	mov	r2, r8
 80037da:	189b      	adds	r3, r3, r2
 80037dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037e0:	464b      	mov	r3, r9
 80037e2:	460a      	mov	r2, r1
 80037e4:	eb42 0303 	adc.w	r3, r2, r3
 80037e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80037fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003800:	460b      	mov	r3, r1
 8003802:	18db      	adds	r3, r3, r3
 8003804:	62bb      	str	r3, [r7, #40]	; 0x28
 8003806:	4613      	mov	r3, r2
 8003808:	eb42 0303 	adc.w	r3, r2, r3
 800380c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800380e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003812:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003816:	f7fc fd3b 	bl	8000290 <__aeabi_uldivmod>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <UART_SetConfig+0x2d4>)
 8003820:	fba3 1302 	umull	r1, r3, r3, r2
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	2164      	movs	r1, #100	; 0x64
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	3332      	adds	r3, #50	; 0x32
 8003832:	4a08      	ldr	r2, [pc, #32]	; (8003854 <UART_SetConfig+0x2d4>)
 8003834:	fba2 2303 	umull	r2, r3, r2, r3
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	f003 0207 	and.w	r2, r3, #7
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4422      	add	r2, r4
 8003846:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003848:	e105      	b.n	8003a56 <UART_SetConfig+0x4d6>
 800384a:	bf00      	nop
 800384c:	40011000 	.word	0x40011000
 8003850:	40011400 	.word	0x40011400
 8003854:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800385c:	2200      	movs	r2, #0
 800385e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003862:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003866:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800386a:	4642      	mov	r2, r8
 800386c:	464b      	mov	r3, r9
 800386e:	1891      	adds	r1, r2, r2
 8003870:	6239      	str	r1, [r7, #32]
 8003872:	415b      	adcs	r3, r3
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
 8003876:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800387a:	4641      	mov	r1, r8
 800387c:	1854      	adds	r4, r2, r1
 800387e:	4649      	mov	r1, r9
 8003880:	eb43 0501 	adc.w	r5, r3, r1
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	00eb      	lsls	r3, r5, #3
 800388e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003892:	00e2      	lsls	r2, r4, #3
 8003894:	4614      	mov	r4, r2
 8003896:	461d      	mov	r5, r3
 8003898:	4643      	mov	r3, r8
 800389a:	18e3      	adds	r3, r4, r3
 800389c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038a0:	464b      	mov	r3, r9
 80038a2:	eb45 0303 	adc.w	r3, r5, r3
 80038a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038c6:	4629      	mov	r1, r5
 80038c8:	008b      	lsls	r3, r1, #2
 80038ca:	4621      	mov	r1, r4
 80038cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038d0:	4621      	mov	r1, r4
 80038d2:	008a      	lsls	r2, r1, #2
 80038d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038d8:	f7fc fcda 	bl	8000290 <__aeabi_uldivmod>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4b60      	ldr	r3, [pc, #384]	; (8003a64 <UART_SetConfig+0x4e4>)
 80038e2:	fba3 2302 	umull	r2, r3, r3, r2
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	011c      	lsls	r4, r3, #4
 80038ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ee:	2200      	movs	r2, #0
 80038f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80038fc:	4642      	mov	r2, r8
 80038fe:	464b      	mov	r3, r9
 8003900:	1891      	adds	r1, r2, r2
 8003902:	61b9      	str	r1, [r7, #24]
 8003904:	415b      	adcs	r3, r3
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800390c:	4641      	mov	r1, r8
 800390e:	1851      	adds	r1, r2, r1
 8003910:	6139      	str	r1, [r7, #16]
 8003912:	4649      	mov	r1, r9
 8003914:	414b      	adcs	r3, r1
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003924:	4659      	mov	r1, fp
 8003926:	00cb      	lsls	r3, r1, #3
 8003928:	4651      	mov	r1, sl
 800392a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800392e:	4651      	mov	r1, sl
 8003930:	00ca      	lsls	r2, r1, #3
 8003932:	4610      	mov	r0, r2
 8003934:	4619      	mov	r1, r3
 8003936:	4603      	mov	r3, r0
 8003938:	4642      	mov	r2, r8
 800393a:	189b      	adds	r3, r3, r2
 800393c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003940:	464b      	mov	r3, r9
 8003942:	460a      	mov	r2, r1
 8003944:	eb42 0303 	adc.w	r3, r2, r3
 8003948:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	67bb      	str	r3, [r7, #120]	; 0x78
 8003956:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003964:	4649      	mov	r1, r9
 8003966:	008b      	lsls	r3, r1, #2
 8003968:	4641      	mov	r1, r8
 800396a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800396e:	4641      	mov	r1, r8
 8003970:	008a      	lsls	r2, r1, #2
 8003972:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003976:	f7fc fc8b 	bl	8000290 <__aeabi_uldivmod>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4b39      	ldr	r3, [pc, #228]	; (8003a64 <UART_SetConfig+0x4e4>)
 8003980:	fba3 1302 	umull	r1, r3, r3, r2
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	2164      	movs	r1, #100	; 0x64
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	3332      	adds	r3, #50	; 0x32
 8003992:	4a34      	ldr	r2, [pc, #208]	; (8003a64 <UART_SetConfig+0x4e4>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800399e:	441c      	add	r4, r3
 80039a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039a4:	2200      	movs	r2, #0
 80039a6:	673b      	str	r3, [r7, #112]	; 0x70
 80039a8:	677a      	str	r2, [r7, #116]	; 0x74
 80039aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039ae:	4642      	mov	r2, r8
 80039b0:	464b      	mov	r3, r9
 80039b2:	1891      	adds	r1, r2, r2
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	415b      	adcs	r3, r3
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039be:	4641      	mov	r1, r8
 80039c0:	1851      	adds	r1, r2, r1
 80039c2:	6039      	str	r1, [r7, #0]
 80039c4:	4649      	mov	r1, r9
 80039c6:	414b      	adcs	r3, r1
 80039c8:	607b      	str	r3, [r7, #4]
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039d6:	4659      	mov	r1, fp
 80039d8:	00cb      	lsls	r3, r1, #3
 80039da:	4651      	mov	r1, sl
 80039dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039e0:	4651      	mov	r1, sl
 80039e2:	00ca      	lsls	r2, r1, #3
 80039e4:	4610      	mov	r0, r2
 80039e6:	4619      	mov	r1, r3
 80039e8:	4603      	mov	r3, r0
 80039ea:	4642      	mov	r2, r8
 80039ec:	189b      	adds	r3, r3, r2
 80039ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80039f0:	464b      	mov	r3, r9
 80039f2:	460a      	mov	r2, r1
 80039f4:	eb42 0303 	adc.w	r3, r2, r3
 80039f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	663b      	str	r3, [r7, #96]	; 0x60
 8003a04:	667a      	str	r2, [r7, #100]	; 0x64
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a12:	4649      	mov	r1, r9
 8003a14:	008b      	lsls	r3, r1, #2
 8003a16:	4641      	mov	r1, r8
 8003a18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a1c:	4641      	mov	r1, r8
 8003a1e:	008a      	lsls	r2, r1, #2
 8003a20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a24:	f7fc fc34 	bl	8000290 <__aeabi_uldivmod>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <UART_SetConfig+0x4e4>)
 8003a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	2164      	movs	r1, #100	; 0x64
 8003a36:	fb01 f303 	mul.w	r3, r1, r3
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	3332      	adds	r3, #50	; 0x32
 8003a40:	4a08      	ldr	r2, [pc, #32]	; (8003a64 <UART_SetConfig+0x4e4>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	f003 020f 	and.w	r2, r3, #15
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4422      	add	r2, r4
 8003a54:	609a      	str	r2, [r3, #8]
}
 8003a56:	bf00      	nop
 8003a58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a62:	bf00      	nop
 8003a64:	51eb851f 	.word	0x51eb851f

08003a68 <update_crc_32>:
 *
 * The function update_crc_32() calculates a new CRC-32 value based on the
 * previous value of the CRC and the next byte of the data to be checked.
 */

uint32_t update_crc_32( uint32_t crc, unsigned char c ) {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	70fb      	strb	r3, [r7, #3]

	uint32_t tmp;
	uint32_t long_c;

	long_c = 0x000000ffL & (uint32_t) c;
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	60fb      	str	r3, [r7, #12]

	if ( ! crc_tab32_init ) init_crc32_tab();
 8003a78:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <update_crc_32+0x48>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	f083 0301 	eor.w	r3, r3, #1
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <update_crc_32+0x22>
 8003a86:	f000 f817 	bl	8003ab8 <init_crc32_tab>

	tmp = crc ^ long_c;
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4053      	eors	r3, r2
 8003a90:	60bb      	str	r3, [r7, #8]
	crc = (crc >> 8) ^ crc_tab32[ tmp & 0xff ];
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	0a1a      	lsrs	r2, r3, #8
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	4906      	ldr	r1, [pc, #24]	; (8003ab4 <update_crc_32+0x4c>)
 8003a9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003aa0:	4053      	eors	r3, r2
 8003aa2:	607b      	str	r3, [r7, #4]

	return crc & 0xffffffffL;
 8003aa4:	687b      	ldr	r3, [r7, #4]

}  /* update_crc_32 */
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	200004c8 	.word	0x200004c8
 8003ab4:	200004cc 	.word	0x200004cc

08003ab8 <init_crc32_tab>:
 * For optimal speed, the CRC32 calculation uses a table with pre-calculated
 * bit patterns which are used in the XOR operations in the program. This table
 * is generated once, the first time the CRC update routine is called.
 */

static void init_crc32_tab( void ) {
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0

	uint32_t i;
	uint32_t j;
	uint32_t crc;

	for (i=0; i<256; i++) {
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	e020      	b.n	8003b06 <init_crc32_tab+0x4e>

		crc = i;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	607b      	str	r3, [r7, #4]

		for (j=0; j<8; j++) {
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	e010      	b.n	8003af0 <init_crc32_tab+0x38>

			if ( crc & 0x00000001L ) crc = ( crc >> 1 ) ^ CRC_POLY_32;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <init_crc32_tab+0x2c>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	085a      	lsrs	r2, r3, #1
 8003adc:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <init_crc32_tab+0x68>)
 8003ade:	4053      	eors	r3, r2
 8003ae0:	607b      	str	r3, [r7, #4]
 8003ae2:	e002      	b.n	8003aea <init_crc32_tab+0x32>
			else                     crc =   crc >> 1;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	607b      	str	r3, [r7, #4]
		for (j=0; j<8; j++) {
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	3301      	adds	r3, #1
 8003aee:	60bb      	str	r3, [r7, #8]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b07      	cmp	r3, #7
 8003af4:	d9eb      	bls.n	8003ace <init_crc32_tab+0x16>
		}

		crc_tab32[i] = crc;
 8003af6:	490b      	ldr	r1, [pc, #44]	; (8003b24 <init_crc32_tab+0x6c>)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0; i<256; i++) {
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3301      	adds	r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2bff      	cmp	r3, #255	; 0xff
 8003b0a:	d9db      	bls.n	8003ac4 <init_crc32_tab+0xc>
	}

	crc_tab32_init = true;
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <init_crc32_tab+0x70>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	701a      	strb	r2, [r3, #0]

}  /* init_crc32_tab */
 8003b12:	bf00      	nop
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	edb88320 	.word	0xedb88320
 8003b24:	200004cc 	.word	0x200004cc
 8003b28:	200004c8 	.word	0x200004c8

08003b2c <str2hex>:
uint8_t cl_buf[255];
uint8_t cl_pointer = 0;
uint8_t cl_flag = 0;

static uint8_t str2hex(char *str)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	uint8_t result = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 2; i++)
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	e047      	b.n	8003bce <str2hex+0xa2>
	{
		uint8_t temp_data;
		if(str[i] >= '0' && str[i] <= '9')
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	4413      	add	r3, r2
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b2f      	cmp	r3, #47	; 0x2f
 8003b48:	d90c      	bls.n	8003b64 <str2hex+0x38>
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	4413      	add	r3, r2
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b39      	cmp	r3, #57	; 0x39
 8003b54:	d806      	bhi.n	8003b64 <str2hex+0x38>
		{
			temp_data = str[i] - '0';
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	3b30      	subs	r3, #48	; 0x30
 8003b60:	73fb      	strb	r3, [r7, #15]
 8003b62:	e024      	b.n	8003bae <str2hex+0x82>
		}
		else if(str[i] >= 'A' && str[i] <= 'F')
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	4413      	add	r3, r2
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b40      	cmp	r3, #64	; 0x40
 8003b6e:	d90c      	bls.n	8003b8a <str2hex+0x5e>
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	4413      	add	r3, r2
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b46      	cmp	r3, #70	; 0x46
 8003b7a:	d806      	bhi.n	8003b8a <str2hex+0x5e>
		{
			temp_data = str[i] - 55;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	3b37      	subs	r3, #55	; 0x37
 8003b86:	73fb      	strb	r3, [r7, #15]
 8003b88:	e011      	b.n	8003bae <str2hex+0x82>
		}
		else if(str[i] >= 'a' && str[i] <= 'f')
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	4413      	add	r3, r2
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b60      	cmp	r3, #96	; 0x60
 8003b94:	d90b      	bls.n	8003bae <str2hex+0x82>
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b66      	cmp	r3, #102	; 0x66
 8003ba0:	d805      	bhi.n	8003bae <str2hex+0x82>
		{
			temp_data = str[i] - 87;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	3b57      	subs	r3, #87	; 0x57
 8003bac:	73fb      	strb	r3, [r7, #15]
		}
		result |= temp_data << ((1 - i) * 4);
 8003bae:	7bfa      	ldrb	r2, [r7, #15]
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f1c3 0301 	rsb	r3, r3, #1
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	b25a      	sxtb	r2, r3
 8003bbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	b25b      	sxtb	r3, r3
 8003bc6:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 2; i++)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	ddb4      	ble.n	8003b3e <str2hex+0x12>
	}
	return result;
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <COMMAND_LINE_Handle>:
void COMMAND_LINE_Init()
{

}

void COMMAND_LINE_Handle(){
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08e      	sub	sp, #56	; 0x38
 8003be8:	af00      	add	r7, sp, #0
	if(cl_flag)
 8003bea:	4b2f      	ldr	r3, [pc, #188]	; (8003ca8 <COMMAND_LINE_Handle+0xc4>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d055      	beq.n	8003c9e <COMMAND_LINE_Handle+0xba>
	{
		char *arg_list[10];
		uint8_t arg_num = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		char *temp_token = strtok((char *)cl_buf, " ");
 8003bf8:	492c      	ldr	r1, [pc, #176]	; (8003cac <COMMAND_LINE_Handle+0xc8>)
 8003bfa:	482d      	ldr	r0, [pc, #180]	; (8003cb0 <COMMAND_LINE_Handle+0xcc>)
 8003bfc:	f001 fa5a 	bl	80050b4 <strtok>
 8003c00:	6338      	str	r0, [r7, #48]	; 0x30
		while(temp_token != NULL)
 8003c02:	e00f      	b.n	8003c24 <COMMAND_LINE_Handle+0x40>
		{
			arg_list[arg_num++] = temp_token;
 8003c04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	3338      	adds	r3, #56	; 0x38
 8003c12:	443b      	add	r3, r7
 8003c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c16:	f843 2c38 	str.w	r2, [r3, #-56]
			temp_token = strtok(NULL, " ");
 8003c1a:	4924      	ldr	r1, [pc, #144]	; (8003cac <COMMAND_LINE_Handle+0xc8>)
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	f001 fa49 	bl	80050b4 <strtok>
 8003c22:	6338      	str	r0, [r7, #48]	; 0x30
		while(temp_token != NULL)
 8003c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1ec      	bne.n	8003c04 <COMMAND_LINE_Handle+0x20>
		}

		if(strstr(arg_list[0], "DATA") != NULL)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	4921      	ldr	r1, [pc, #132]	; (8003cb4 <COMMAND_LINE_Handle+0xd0>)
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 fa29 	bl	8005086 <strstr>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d02b      	beq.n	8003c92 <COMMAND_LINE_Handle+0xae>
		{
			tx_frame_len = arg_num - 1;
 8003c3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <COMMAND_LINE_Handle+0xd4>)
 8003c44:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < arg_num - 1; i++)
 8003c46:	2300      	movs	r3, #0
 8003c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c4a:	e013      	b.n	8003c74 <COMMAND_LINE_Handle+0x90>
			{
				tx_frame_data[i] = str2hex(arg_list[i + 1]);
 8003c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4e:	3301      	adds	r3, #1
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	3338      	adds	r3, #56	; 0x38
 8003c54:	443b      	add	r3, r7
 8003c56:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff ff66 	bl	8003b2c <str2hex>
 8003c60:	4603      	mov	r3, r0
 8003c62:	4619      	mov	r1, r3
 8003c64:	4a15      	ldr	r2, [pc, #84]	; (8003cbc <COMMAND_LINE_Handle+0xd8>)
 8003c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c68:	4413      	add	r3, r2
 8003c6a:	460a      	mov	r2, r1
 8003c6c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < arg_num - 1; i++)
 8003c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c70:	3301      	adds	r3, #1
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	dbe5      	blt.n	8003c4c <COMMAND_LINE_Handle+0x68>
			}
			uint8_t temp_str[] = "OK\n";
 8003c80:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <COMMAND_LINE_Handle+0xdc>)
 8003c82:	62bb      	str	r3, [r7, #40]	; 0x28
			HAL_UART_Transmit(&huart6, temp_str, 3, 100);
 8003c84:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003c88:	2364      	movs	r3, #100	; 0x64
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	480d      	ldr	r0, [pc, #52]	; (8003cc4 <COMMAND_LINE_Handle+0xe0>)
 8003c8e:	f7fe fec0 	bl	8002a12 <HAL_UART_Transmit>
		}

		cl_pointer = 0;
 8003c92:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <COMMAND_LINE_Handle+0xe4>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
		cl_flag = 0;
 8003c98:	4b03      	ldr	r3, [pc, #12]	; (8003ca8 <COMMAND_LINE_Handle+0xc4>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
	}
}
 8003c9e:	bf00      	nop
 8003ca0:	3738      	adds	r7, #56	; 0x38
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	200009cc 	.word	0x200009cc
 8003cac:	080065bc 	.word	0x080065bc
 8003cb0:	200008cc 	.word	0x200008cc
 8003cb4:	080065c0 	.word	0x080065c0
 8003cb8:	200004bf 	.word	0x200004bf
 8003cbc:	200003c0 	.word	0x200003c0
 8003cc0:	000a4b4f 	.word	0x000a4b4f
 8003cc4:	20000128 	.word	0x20000128
 8003cc8:	200009cb 	.word	0x200009cb

08003ccc <COMMAND_LINE_Receive>:

void COMMAND_LINE_Receive(uint8_t rx_data)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	71fb      	strb	r3, [r7, #7]
	if(rx_data != '\n')
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	2b0a      	cmp	r3, #10
 8003cda:	d00a      	beq.n	8003cf2 <COMMAND_LINE_Receive+0x26>
	{
		cl_buf[cl_pointer++] = rx_data;
 8003cdc:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <COMMAND_LINE_Receive+0x44>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	b2d1      	uxtb	r1, r2
 8003ce4:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <COMMAND_LINE_Receive+0x44>)
 8003ce6:	7011      	strb	r1, [r2, #0]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <COMMAND_LINE_Receive+0x48>)
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	5453      	strb	r3, [r2, r1]
	else
	{
		cl_buf[cl_pointer] = '\0';
		cl_flag = 1;
	}
}
 8003cf0:	e008      	b.n	8003d04 <COMMAND_LINE_Receive+0x38>
		cl_buf[cl_pointer] = '\0';
 8003cf2:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <COMMAND_LINE_Receive+0x44>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <COMMAND_LINE_Receive+0x48>)
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	5499      	strb	r1, [r3, r2]
		cl_flag = 1;
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <COMMAND_LINE_Receive+0x4c>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	701a      	strb	r2, [r3, #0]
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	200009cb 	.word	0x200009cb
 8003d14:	200008cc 	.word	0x200008cc
 8003d18:	200009cc 	.word	0x200009cc

08003d1c <Rx_Reset>:
{
	HAL_UART_Transmit(&FRAME_SYNC_huart, &tx_data, 1, 100);
}

static void Rx_Reset()
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
	FS_Data.rx_checksum = 0xFFFFFFFF;
 8003d20:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <Rx_Reset+0x34>)
 8003d22:	f04f 32ff 	mov.w	r2, #4294967295
 8003d26:	609a      	str	r2, [r3, #8]
	FS_Data.rx_state = SEARCHING_STX;
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <Rx_Reset+0x34>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	731a      	strb	r2, [r3, #12]
	FS_Data.rx_num_crc_byte = 0;
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <Rx_Reset+0x34>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	FS_Data.rx_packet.crc32 = 0;
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <Rx_Reset+0x34>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	FS_Data.rx_pointer = 0;
 8003d3e:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <Rx_Reset+0x34>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	735a      	strb	r2, [r3, #13]
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	200009d0 	.word	0x200009d0

08003d54 <CRC_Update>:

static void CRC_Update(uint32_t *crc, uint8_t data)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	70fb      	strb	r3, [r7, #3]
	*crc = update_crc_32(*crc, data);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fe7d 	bl	8003a68 <update_crc_32>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	601a      	str	r2, [r3, #0]
}
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <validate_packet>:

static void validate_packet()
{
 8003d7c:	b590      	push	{r4, r7, lr}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af02      	add	r7, sp, #8
	if(FS_Data.rx_packet.temp_des_id != FS_Data.my_id) return;
 8003d82:	4b56      	ldr	r3, [pc, #344]	; (8003edc <validate_packet+0x160>)
 8003d84:	7c5a      	ldrb	r2, [r3, #17]
 8003d86:	4b55      	ldr	r3, [pc, #340]	; (8003edc <validate_packet+0x160>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	f040 80a2 	bne.w	8003ed4 <validate_packet+0x158>
	uint8_t temp_data = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	71fb      	strb	r3, [r7, #7]
	FS_Data.rx_checksum = ~FS_Data.rx_checksum;
 8003d94:	4b51      	ldr	r3, [pc, #324]	; (8003edc <validate_packet+0x160>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	4a50      	ldr	r2, [pc, #320]	; (8003edc <validate_packet+0x160>)
 8003d9c:	6093      	str	r3, [r2, #8]
	if(FS_Data.rx_packet.crc32 != FS_Data.rx_checksum)
 8003d9e:	4b4f      	ldr	r3, [pc, #316]	; (8003edc <validate_packet+0x160>)
 8003da0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8003da4:	4b4d      	ldr	r3, [pc, #308]	; (8003edc <validate_packet+0x160>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d016      	beq.n	8003dda <validate_packet+0x5e>
	{
		temp_data = NACK;
 8003dac:	23fe      	movs	r3, #254	; 0xfe
 8003dae:	71fb      	strb	r3, [r7, #7]
		FRAME_SYNC_Transmit(FS_Data.rx_packet.src_id, FS_Data.rx_packet.src_id, 1, &temp_data, 1, 0);
 8003db0:	4b4a      	ldr	r3, [pc, #296]	; (8003edc <validate_packet+0x160>)
 8003db2:	7c98      	ldrb	r0, [r3, #18]
 8003db4:	4b49      	ldr	r3, [pc, #292]	; (8003edc <validate_packet+0x160>)
 8003db6:	7c99      	ldrb	r1, [r3, #18]
 8003db8:	1dfb      	adds	r3, r7, #7
 8003dba:	2200      	movs	r2, #0
 8003dbc:	9201      	str	r2, [sp, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	9200      	str	r2, [sp, #0]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f000 f890 	bl	8003ee8 <FRAME_SYNC_Transmit>
		FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
 8003dc8:	4b44      	ldr	r3, [pc, #272]	; (8003edc <validate_packet+0x160>)
 8003dca:	7d1b      	ldrb	r3, [r3, #20]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4844      	ldr	r0, [pc, #272]	; (8003ee0 <validate_packet+0x164>)
 8003dd0:	f7fc fc74 	bl	80006bc <FRAME_SYNC_RxFailCallback>
		Rx_Reset();
 8003dd4:	f7ff ffa2 	bl	8003d1c <Rx_Reset>
		return;
 8003dd8:	e07d      	b.n	8003ed6 <validate_packet+0x15a>
	}

	switch(FS_Data.rx_packet.buffer[0])
 8003dda:	4b40      	ldr	r3, [pc, #256]	; (8003edc <validate_packet+0x160>)
 8003ddc:	7d5b      	ldrb	r3, [r3, #21]
 8003dde:	2bfe      	cmp	r3, #254	; 0xfe
 8003de0:	d011      	beq.n	8003e06 <validate_packet+0x8a>
 8003de2:	2bff      	cmp	r3, #255	; 0xff
 8003de4:	d12f      	bne.n	8003e46 <validate_packet+0xca>
	{
		case ACK:	// Received ACK
			if(FS_Data.device_state == FRAME_SYNC_WAITING_ACK)
 8003de6:	4b3d      	ldr	r3, [pc, #244]	; (8003edc <validate_packet+0x160>)
 8003de8:	785b      	ldrb	r3, [r3, #1]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d164      	bne.n	8003eb8 <validate_packet+0x13c>
			{
				FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 8003dee:	4b3b      	ldr	r3, [pc, #236]	; (8003edc <validate_packet+0x160>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	705a      	strb	r2, [r3, #1]
				if(FS_Data.stored_packet.is_requiring_reply == 1)
 8003df4:	4b39      	ldr	r3, [pc, #228]	; (8003edc <validate_packet+0x160>)
 8003df6:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d15c      	bne.n	8003eb8 <validate_packet+0x13c>
				{
					FS_Data.device_state = FRAME_SYNC_WAITING_REPLY;
 8003dfe:	4b37      	ldr	r3, [pc, #220]	; (8003edc <validate_packet+0x160>)
 8003e00:	2202      	movs	r2, #2
 8003e02:	705a      	strb	r2, [r3, #1]
				}
			}
			break;
 8003e04:	e058      	b.n	8003eb8 <validate_packet+0x13c>
		case NACK:	// Received NACK
			// Re-transmit
			if(FS_Data.device_state == FRAME_SYNC_WAITING_ACK)
 8003e06:	4b35      	ldr	r3, [pc, #212]	; (8003edc <validate_packet+0x160>)
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d156      	bne.n	8003ebc <validate_packet+0x140>
			{
				FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 8003e0e:	4b33      	ldr	r3, [pc, #204]	; (8003edc <validate_packet+0x160>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	705a      	strb	r2, [r3, #1]
				FRAME_SYNC_Transmit(FS_Data.stored_packet.final_des_id, FS_Data.stored_packet.temp_des_id, FS_Data.stored_packet.time_to_live - 1,
 8003e14:	4b31      	ldr	r3, [pc, #196]	; (8003edc <validate_packet+0x160>)
 8003e16:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8003e1a:	4b30      	ldr	r3, [pc, #192]	; (8003edc <validate_packet+0x160>)
 8003e1c:	f893 1129 	ldrb.w	r1, [r3, #297]	; 0x129
 8003e20:	4b2e      	ldr	r3, [pc, #184]	; (8003edc <validate_packet+0x160>)
 8003e22:	f993 312b 	ldrsb.w	r3, [r3, #299]	; 0x12b
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b2dc      	uxtb	r4, r3
 8003e2c:	4b2b      	ldr	r3, [pc, #172]	; (8003edc <validate_packet+0x160>)
 8003e2e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8003e32:	4a2a      	ldr	r2, [pc, #168]	; (8003edc <validate_packet+0x160>)
 8003e34:	f892 2230 	ldrb.w	r2, [r2, #560]	; 0x230
 8003e38:	9201      	str	r2, [sp, #4]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	4b29      	ldr	r3, [pc, #164]	; (8003ee4 <validate_packet+0x168>)
 8003e3e:	4622      	mov	r2, r4
 8003e40:	f000 f852 	bl	8003ee8 <FRAME_SYNC_Transmit>
						FS_Data.stored_packet.buffer, FS_Data.stored_packet.length, FS_Data.stored_packet.is_requiring_reply);
			}
			break;
 8003e44:	e03a      	b.n	8003ebc <validate_packet+0x140>
		default:	// Received normal data
			if(FS_Data.rx_packet.temp_des_id == FS_Data.my_id)
 8003e46:	4b25      	ldr	r3, [pc, #148]	; (8003edc <validate_packet+0x160>)
 8003e48:	7c5a      	ldrb	r2, [r3, #17]
 8003e4a:	4b24      	ldr	r3, [pc, #144]	; (8003edc <validate_packet+0x160>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d136      	bne.n	8003ec0 <validate_packet+0x144>
			{
				if(FS_Data.device_state == FRAME_SYNC_WAITING_REPLY)
 8003e52:	4b22      	ldr	r3, [pc, #136]	; (8003edc <validate_packet+0x160>)
 8003e54:	785b      	ldrb	r3, [r3, #1]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d102      	bne.n	8003e60 <validate_packet+0xe4>
				{
					FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 8003e5a:	4b20      	ldr	r3, [pc, #128]	; (8003edc <validate_packet+0x160>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	705a      	strb	r2, [r3, #1]
				}
				temp_data = ACK;
 8003e60:	23ff      	movs	r3, #255	; 0xff
 8003e62:	71fb      	strb	r3, [r7, #7]
				FRAME_SYNC_Transmit(FS_Data.rx_packet.src_id, FS_Data.rx_packet.src_id, 1, &temp_data, 1, 0);
 8003e64:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <validate_packet+0x160>)
 8003e66:	7c98      	ldrb	r0, [r3, #18]
 8003e68:	4b1c      	ldr	r3, [pc, #112]	; (8003edc <validate_packet+0x160>)
 8003e6a:	7c99      	ldrb	r1, [r3, #18]
 8003e6c:	1dfb      	adds	r3, r7, #7
 8003e6e:	2200      	movs	r2, #0
 8003e70:	9201      	str	r2, [sp, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	9200      	str	r2, [sp, #0]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f000 f836 	bl	8003ee8 <FRAME_SYNC_Transmit>
				if(FS_Data.rx_packet.final_des_id != FS_Data.my_id)
 8003e7c:	4b17      	ldr	r3, [pc, #92]	; (8003edc <validate_packet+0x160>)
 8003e7e:	7c1a      	ldrb	r2, [r3, #16]
 8003e80:	4b16      	ldr	r3, [pc, #88]	; (8003edc <validate_packet+0x160>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d01b      	beq.n	8003ec0 <validate_packet+0x144>
				{
					FRAME_SYNC_Transmit(FS_Data.rx_packet.final_des_id, FS_Data.rx_packet.temp_des_id + 1, FS_Data.rx_packet.time_to_live - 1,
 8003e88:	4b14      	ldr	r3, [pc, #80]	; (8003edc <validate_packet+0x160>)
 8003e8a:	7c18      	ldrb	r0, [r3, #16]
 8003e8c:	4b13      	ldr	r3, [pc, #76]	; (8003edc <validate_packet+0x160>)
 8003e8e:	7c5b      	ldrb	r3, [r3, #17]
 8003e90:	3301      	adds	r3, #1
 8003e92:	b2d9      	uxtb	r1, r3
 8003e94:	4b11      	ldr	r3, [pc, #68]	; (8003edc <validate_packet+0x160>)
 8003e96:	f993 3013 	ldrsb.w	r3, [r3, #19]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b2dc      	uxtb	r4, r3
 8003ea0:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <validate_packet+0x160>)
 8003ea2:	7d1b      	ldrb	r3, [r3, #20]
 8003ea4:	4a0d      	ldr	r2, [pc, #52]	; (8003edc <validate_packet+0x160>)
 8003ea6:	f892 2230 	ldrb.w	r2, [r2, #560]	; 0x230
 8003eaa:	9201      	str	r2, [sp, #4]
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <validate_packet+0x164>)
 8003eb0:	4622      	mov	r2, r4
 8003eb2:	f000 f819 	bl	8003ee8 <FRAME_SYNC_Transmit>
							FS_Data.rx_packet.buffer, FS_Data.rx_packet.length, FS_Data.stored_packet.is_requiring_reply);
				}
			}

			break;
 8003eb6:	e003      	b.n	8003ec0 <validate_packet+0x144>
			break;
 8003eb8:	bf00      	nop
 8003eba:	e002      	b.n	8003ec2 <validate_packet+0x146>
			break;
 8003ebc:	bf00      	nop
 8003ebe:	e000      	b.n	8003ec2 <validate_packet+0x146>
			break;
 8003ec0:	bf00      	nop
	}
	FRAME_SYNC_RxCpltCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
 8003ec2:	4b06      	ldr	r3, [pc, #24]	; (8003edc <validate_packet+0x160>)
 8003ec4:	7d1b      	ldrb	r3, [r3, #20]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4805      	ldr	r0, [pc, #20]	; (8003ee0 <validate_packet+0x164>)
 8003eca:	f7fc fb99 	bl	8000600 <FRAME_SYNC_RxCpltCallback>
	Rx_Reset();
 8003ece:	f7ff ff25 	bl	8003d1c <Rx_Reset>
 8003ed2:	e000      	b.n	8003ed6 <validate_packet+0x15a>
	if(FS_Data.rx_packet.temp_des_id != FS_Data.my_id) return;
 8003ed4:	bf00      	nop
}
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd90      	pop	{r4, r7, pc}
 8003edc:	200009d0 	.word	0x200009d0
 8003ee0:	200009e5 	.word	0x200009e5
 8003ee4:	20000afd 	.word	0x20000afd

08003ee8 <FRAME_SYNC_Transmit>:
{
	FS_Data = *p_new_data;
}

void FRAME_SYNC_Transmit(uint8_t final_des_id, uint8_t temp_des_id, uint8_t time_to_live, uint8_t *tx_frame, uint8_t size, uint8_t is_requiring_reply)
{
 8003ee8:	b590      	push	{r4, r7, lr}
 8003eea:	b0c7      	sub	sp, #284	; 0x11c
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4604      	mov	r4, r0
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003ef8:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f02:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003f06:	4622      	mov	r2, r4
 8003f08:	701a      	strb	r2, [r3, #0]
 8003f0a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f0e:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8003f12:	4602      	mov	r2, r0
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f1a:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8003f1e:	460a      	mov	r2, r1
 8003f20:	701a      	strb	r2, [r3, #0]
	uint8_t temp_packet[MAX_LENGTH_DATA] = {STX};
 8003f22:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	22fb      	movs	r2, #251	; 0xfb
 8003f32:	2100      	movs	r1, #0
 8003f34:	4618      	mov	r0, r3
 8003f36:	f001 f86f 	bl	8005018 <memset>
	uint8_t packet_length = 1;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	if(FS_Data.device_state != FRAME_SYNC_READY_TO_TRANSMIT) return;
 8003f40:	4bc0      	ldr	r3, [pc, #768]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 8003f42:	785b      	ldrb	r3, [r3, #1]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f040 8176 	bne.w	8004236 <FRAME_SYNC_Transmit+0x34e>
	if(time_to_live <= 0) return;
 8003f4a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f4e:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8170 	beq.w	800423a <FRAME_SYNC_Transmit+0x352>
	FS_Data.tx_checksum = 0xFFFFFFFF;
 8003f5a:	4bba      	ldr	r3, [pc, #744]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 8003f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f60:	605a      	str	r2, [r3, #4]

	// Transmit STX
//	FRAME_SYNC_Byte_Transmit(STX);

	// Transmit final destination device id
	CRC_Update(&FS_Data.tx_checksum, final_des_id);
 8003f62:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f66:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	48b6      	ldr	r0, [pc, #728]	; (8004248 <FRAME_SYNC_Transmit+0x360>)
 8003f70:	f7ff fef0 	bl	8003d54 <CRC_Update>
//	FRAME_SYNC_Byte_Transmit(final_des_id);
	temp_packet[packet_length++] = final_des_id;
 8003f74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8003f7e:	4619      	mov	r1, r3
 8003f80:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f88:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003f8c:	f2a2 1211 	subw	r2, r2, #273	; 0x111
 8003f90:	7812      	ldrb	r2, [r2, #0]
 8003f92:	545a      	strb	r2, [r3, r1]

	// Transmit temporary destination device id
	CRC_Update(&FS_Data.tx_checksum, temp_des_id);
 8003f94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f98:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	48a9      	ldr	r0, [pc, #676]	; (8004248 <FRAME_SYNC_Transmit+0x360>)
 8003fa2:	f7ff fed7 	bl	8003d54 <CRC_Update>
//	FRAME_SYNC_Byte_Transmit(temp_des_id);
	temp_packet[packet_length++] = temp_des_id;
 8003fa6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003fb6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003fba:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003fbe:	f5a2 7289 	sub.w	r2, r2, #274	; 0x112
 8003fc2:	7812      	ldrb	r2, [r2, #0]
 8003fc4:	545a      	strb	r2, [r3, r1]

	// Transmit source device id
	CRC_Update(&FS_Data.tx_checksum, FS_Data.my_id);
 8003fc6:	4b9f      	ldr	r3, [pc, #636]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	489e      	ldr	r0, [pc, #632]	; (8004248 <FRAME_SYNC_Transmit+0x360>)
 8003fce:	f7ff fec1 	bl	8003d54 <CRC_Update>
//	FRAME_SYNC_Byte_Transmit(FS_Data.my_id);
	temp_packet[packet_length++] = FS_Data.my_id;
 8003fd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b99      	ldr	r3, [pc, #612]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 8003fe0:	7819      	ldrb	r1, [r3, #0]
 8003fe2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003fe6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003fea:	5499      	strb	r1, [r3, r2]

	// Transmit time to live
	CRC_Update(&FS_Data.tx_checksum, time_to_live);
 8003fec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ff0:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4893      	ldr	r0, [pc, #588]	; (8004248 <FRAME_SYNC_Transmit+0x360>)
 8003ffa:	f7ff feab 	bl	8003d54 <CRC_Update>
//	FRAME_SYNC_Byte_Transmit(time_to_live);
	temp_packet[packet_length++] = time_to_live;
 8003ffe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8004008:	4619      	mov	r1, r3
 800400a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800400e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004012:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004016:	f2a2 1213 	subw	r2, r2, #275	; 0x113
 800401a:	7812      	ldrb	r2, [r2, #0]
 800401c:	545a      	strb	r2, [r3, r1]

	// Transmit data length
	CRC_Update(&FS_Data.tx_checksum, size);
 800401e:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004022:	4619      	mov	r1, r3
 8004024:	4888      	ldr	r0, [pc, #544]	; (8004248 <FRAME_SYNC_Transmit+0x360>)
 8004026:	f7ff fe95 	bl	8003d54 <CRC_Update>
//	FRAME_SYNC_Byte_Transmit(size);
	temp_packet[packet_length++] = size;
 800402a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8004034:	4619      	mov	r1, r3
 8004036:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800403a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800403e:	f897 2128 	ldrb.w	r2, [r7, #296]	; 0x128
 8004042:	545a      	strb	r2, [r3, r1]

	// Transmit data
	for(int i = 0; i < size; i++)
 8004044:	2300      	movs	r3, #0
 8004046:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800404a:	e036      	b.n	80040ba <FRAME_SYNC_Transmit+0x1d2>
	{
		CRC_Update(&FS_Data.tx_checksum, tx_frame[i]);
 800404c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004050:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004054:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	4413      	add	r3, r2
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	4619      	mov	r1, r3
 8004060:	4879      	ldr	r0, [pc, #484]	; (8004248 <FRAME_SYNC_Transmit+0x360>)
 8004062:	f7ff fe77 	bl	8003d54 <CRC_Update>
//		FRAME_SYNC_Byte_Transmit(tx_frame[i]);
		FS_Data.stored_packet.buffer[i] = tx_frame[i];
 8004066:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800406a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800406e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	4413      	add	r3, r2
 8004076:	7819      	ldrb	r1, [r3, #0]
 8004078:	4a72      	ldr	r2, [pc, #456]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 800407a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800407e:	4413      	add	r3, r2
 8004080:	f203 132d 	addw	r3, r3, #301	; 0x12d
 8004084:	460a      	mov	r2, r1
 8004086:	701a      	strb	r2, [r3, #0]
		temp_packet[packet_length++] = tx_frame[i];
 8004088:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800408c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004090:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004094:	6812      	ldr	r2, [r2, #0]
 8004096:	441a      	add	r2, r3
 8004098:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800409c:	1c59      	adds	r1, r3, #1
 800409e:	f887 1117 	strb.w	r1, [r7, #279]	; 0x117
 80040a2:	4619      	mov	r1, r3
 80040a4:	7812      	ldrb	r2, [r2, #0]
 80040a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80040aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80040ae:	545a      	strb	r2, [r3, r1]
	for(int i = 0; i < size; i++)
 80040b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040b4:	3301      	adds	r3, #1
 80040b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80040ba:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80040be:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80040c2:	429a      	cmp	r2, r3
 80040c4:	dbc2      	blt.n	800404c <FRAME_SYNC_Transmit+0x164>
	}

	// Transmit crc
	FS_Data.tx_checksum = ~FS_Data.tx_checksum;
 80040c6:	4b5f      	ldr	r3, [pc, #380]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	4a5d      	ldr	r2, [pc, #372]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 80040ce:	6053      	str	r3, [r2, #4]
//	FRAME_SYNC_Byte_Transmit(*((uint8_t *)&FS_Data.tx_checksum + 0));
//	FRAME_SYNC_Byte_Transmit(*((uint8_t *)&FS_Data.tx_checksum + 1));
//	FRAME_SYNC_Byte_Transmit(*((uint8_t *)&FS_Data.tx_checksum + 2));
//	FRAME_SYNC_Byte_Transmit(*((uint8_t *)&FS_Data.tx_checksum + 3));
	temp_packet[packet_length++] = *((uint8_t *)&FS_Data.tx_checksum + 0);
 80040d0:	4a5d      	ldr	r2, [pc, #372]	; (8004248 <FRAME_SYNC_Transmit+0x360>)
 80040d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040d6:	1c59      	adds	r1, r3, #1
 80040d8:	f887 1117 	strb.w	r1, [r7, #279]	; 0x117
 80040dc:	4619      	mov	r1, r3
 80040de:	7812      	ldrb	r2, [r2, #0]
 80040e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80040e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80040e8:	545a      	strb	r2, [r3, r1]
	temp_packet[packet_length++] = *((uint8_t *)&FS_Data.tx_checksum + 1);
 80040ea:	4a58      	ldr	r2, [pc, #352]	; (800424c <FRAME_SYNC_Transmit+0x364>)
 80040ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040f0:	1c59      	adds	r1, r3, #1
 80040f2:	f887 1117 	strb.w	r1, [r7, #279]	; 0x117
 80040f6:	4619      	mov	r1, r3
 80040f8:	7812      	ldrb	r2, [r2, #0]
 80040fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80040fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004102:	545a      	strb	r2, [r3, r1]
	temp_packet[packet_length++] = *((uint8_t *)&FS_Data.tx_checksum + 2);
 8004104:	4a52      	ldr	r2, [pc, #328]	; (8004250 <FRAME_SYNC_Transmit+0x368>)
 8004106:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800410a:	1c59      	adds	r1, r3, #1
 800410c:	f887 1117 	strb.w	r1, [r7, #279]	; 0x117
 8004110:	4619      	mov	r1, r3
 8004112:	7812      	ldrb	r2, [r2, #0]
 8004114:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004118:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800411c:	545a      	strb	r2, [r3, r1]
	temp_packet[packet_length++] = *((uint8_t *)&FS_Data.tx_checksum + 3);
 800411e:	4a4d      	ldr	r2, [pc, #308]	; (8004254 <FRAME_SYNC_Transmit+0x36c>)
 8004120:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004124:	1c59      	adds	r1, r3, #1
 8004126:	f887 1117 	strb.w	r1, [r7, #279]	; 0x117
 800412a:	4619      	mov	r1, r3
 800412c:	7812      	ldrb	r2, [r2, #0]
 800412e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004132:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004136:	545a      	strb	r2, [r3, r1]

	// Transmit ETX
//	FRAME_SYNC_Byte_Transmit(ETX);
	temp_packet[packet_length++] = ETX;
 8004138:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8004142:	461a      	mov	r2, r3
 8004144:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004148:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800414c:	2103      	movs	r1, #3
 800414e:	5499      	strb	r1, [r3, r2]

	if(size != 1 && *tx_frame != ACK && *tx_frame != NACK)
 8004150:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004154:	2b01      	cmp	r3, #1
 8004156:	d05f      	beq.n	8004218 <FRAME_SYNC_Transmit+0x330>
 8004158:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800415c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2bff      	cmp	r3, #255	; 0xff
 8004166:	d057      	beq.n	8004218 <FRAME_SYNC_Transmit+0x330>
 8004168:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800416c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2bfe      	cmp	r3, #254	; 0xfe
 8004176:	d04f      	beq.n	8004218 <FRAME_SYNC_Transmit+0x330>
	{
		FS_Data.device_state = FRAME_SYNC_WAITING_ACK;
 8004178:	4b32      	ldr	r3, [pc, #200]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 800417a:	2201      	movs	r2, #1
 800417c:	705a      	strb	r2, [r3, #1]
		FS_Data.stored_packet.final_des_id = final_des_id;
 800417e:	4a31      	ldr	r2, [pc, #196]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 8004180:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004184:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
		FS_Data.stored_packet.temp_des_id = temp_des_id;
 800418e:	4a2d      	ldr	r2, [pc, #180]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 8004190:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004194:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	f882 3129 	strb.w	r3, [r2, #297]	; 0x129
		FS_Data.stored_packet.src_id = FS_Data.my_id;
 800419e:	4b29      	ldr	r3, [pc, #164]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 80041a0:	781a      	ldrb	r2, [r3, #0]
 80041a2:	4b28      	ldr	r3, [pc, #160]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 80041a4:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
		FS_Data.stored_packet.time_to_live = time_to_live;
 80041a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80041ac:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 80041b0:	f993 2000 	ldrsb.w	r2, [r3]
 80041b4:	4b23      	ldr	r3, [pc, #140]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 80041b6:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
		FS_Data.stored_packet.length = size;
 80041ba:	4a22      	ldr	r2, [pc, #136]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 80041bc:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80041c0:	f882 312c 	strb.w	r3, [r2, #300]	; 0x12c
		for(int i = 0; i < size; i++)
 80041c4:	2300      	movs	r3, #0
 80041c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80041ca:	e015      	b.n	80041f8 <FRAME_SYNC_Transmit+0x310>
		{
			FS_Data.stored_packet.buffer[i] = tx_frame[i];
 80041cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80041d4:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80041d8:	6812      	ldr	r2, [r2, #0]
 80041da:	4413      	add	r3, r2
 80041dc:	7819      	ldrb	r1, [r3, #0]
 80041de:	4a19      	ldr	r2, [pc, #100]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 80041e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e4:	4413      	add	r3, r2
 80041e6:	f203 132d 	addw	r3, r3, #301	; 0x12d
 80041ea:	460a      	mov	r2, r1
 80041ec:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < size; i++)
 80041ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f2:	3301      	adds	r3, #1
 80041f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80041f8:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80041fc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004200:	429a      	cmp	r2, r3
 8004202:	dbe3      	blt.n	80041cc <FRAME_SYNC_Transmit+0x2e4>
		}
		FS_Data.stored_packet.crc32 = FS_Data.tx_checksum;
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4a0e      	ldr	r2, [pc, #56]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 800420a:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
		FS_Data.stored_packet.is_requiring_reply = is_requiring_reply;
 800420e:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 8004210:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8004214:	f882 3230 	strb.w	r3, [r2, #560]	; 0x230
	}

	FS_Data.last_transmit_frame_timer = HAL_GetTick();
 8004218:	f7fc ff8c 	bl	8001134 <HAL_GetTick>
 800421c:	4603      	mov	r3, r0
 800421e:	4a09      	ldr	r2, [pc, #36]	; (8004244 <FRAME_SYNC_Transmit+0x35c>)
 8004220:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

	FRAME_SYNC_Packet_Transmit(temp_packet, packet_length);
 8004224:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8004228:	f107 030c 	add.w	r3, r7, #12
 800422c:	4611      	mov	r1, r2
 800422e:	4618      	mov	r0, r3
 8004230:	f7fc fa9a 	bl	8000768 <FRAME_SYNC_Packet_Transmit>
 8004234:	e002      	b.n	800423c <FRAME_SYNC_Transmit+0x354>
	if(FS_Data.device_state != FRAME_SYNC_READY_TO_TRANSMIT) return;
 8004236:	bf00      	nop
 8004238:	e000      	b.n	800423c <FRAME_SYNC_Transmit+0x354>
	if(time_to_live <= 0) return;
 800423a:	bf00      	nop
}
 800423c:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8004240:	46bd      	mov	sp, r7
 8004242:	bd90      	pop	{r4, r7, pc}
 8004244:	200009d0 	.word	0x200009d0
 8004248:	200009d4 	.word	0x200009d4
 800424c:	200009d5 	.word	0x200009d5
 8004250:	200009d6 	.word	0x200009d6
 8004254:	200009d7 	.word	0x200009d7

08004258 <FRAME_SYNC_Receive>:

void FRAME_SYNC_Receive(uint8_t rx_data)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	71fb      	strb	r3, [r7, #7]
	switch(FS_Data.rx_state)
 8004262:	4b61      	ldr	r3, [pc, #388]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 8004264:	7b1b      	ldrb	r3, [r3, #12]
 8004266:	2b08      	cmp	r3, #8
 8004268:	f200 80af 	bhi.w	80043ca <FRAME_SYNC_Receive+0x172>
 800426c:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <FRAME_SYNC_Receive+0x1c>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	08004299 	.word	0x08004299
 8004278:	080042c1 	.word	0x080042c1
 800427c:	080042d9 	.word	0x080042d9
 8004280:	080042f1 	.word	0x080042f1
 8004284:	08004309 	.word	0x08004309
 8004288:	08004323 	.word	0x08004323
 800428c:	0800433b 	.word	0x0800433b
 8004290:	0800436f 	.word	0x0800436f
 8004294:	080043ad 	.word	0x080043ad
	{
		case SEARCHING_STX:
			if(rx_data == STX)
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d107      	bne.n	80042ae <FRAME_SYNC_Receive+0x56>
			{
				FS_Data.rx_checksum = 0xFFFFFFFF;
 800429e:	4b52      	ldr	r3, [pc, #328]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 80042a0:	f04f 32ff 	mov.w	r2, #4294967295
 80042a4:	609a      	str	r2, [r3, #8]
				FS_Data.rx_state = RECEIVING_FINAL_DES_ID;
 80042a6:	4b50      	ldr	r3, [pc, #320]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	731a      	strb	r2, [r3, #12]
			else
			{
				Rx_Reset();
				FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
			}
			break;
 80042ac:	e092      	b.n	80043d4 <FRAME_SYNC_Receive+0x17c>
				Rx_Reset();
 80042ae:	f7ff fd35 	bl	8003d1c <Rx_Reset>
				FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
 80042b2:	4b4d      	ldr	r3, [pc, #308]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 80042b4:	7d1b      	ldrb	r3, [r3, #20]
 80042b6:	4619      	mov	r1, r3
 80042b8:	484c      	ldr	r0, [pc, #304]	; (80043ec <FRAME_SYNC_Receive+0x194>)
 80042ba:	f7fc f9ff 	bl	80006bc <FRAME_SYNC_RxFailCallback>
			break;
 80042be:	e089      	b.n	80043d4 <FRAME_SYNC_Receive+0x17c>
		case RECEIVING_FINAL_DES_ID:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	4619      	mov	r1, r3
 80042c4:	484a      	ldr	r0, [pc, #296]	; (80043f0 <FRAME_SYNC_Receive+0x198>)
 80042c6:	f7ff fd45 	bl	8003d54 <CRC_Update>
			FS_Data.rx_packet.final_des_id = rx_data;
 80042ca:	4a47      	ldr	r2, [pc, #284]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	7413      	strb	r3, [r2, #16]
			FS_Data.rx_state = RECEIVING_TEMP_DES_ID;
 80042d0:	4b45      	ldr	r3, [pc, #276]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 80042d2:	2202      	movs	r2, #2
 80042d4:	731a      	strb	r2, [r3, #12]
			break;
 80042d6:	e07d      	b.n	80043d4 <FRAME_SYNC_Receive+0x17c>
		case RECEIVING_TEMP_DES_ID:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	4619      	mov	r1, r3
 80042dc:	4844      	ldr	r0, [pc, #272]	; (80043f0 <FRAME_SYNC_Receive+0x198>)
 80042de:	f7ff fd39 	bl	8003d54 <CRC_Update>
			FS_Data.rx_packet.temp_des_id = rx_data;
 80042e2:	4a41      	ldr	r2, [pc, #260]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	7453      	strb	r3, [r2, #17]
			FS_Data.rx_state = RECEIVING_SRC_ID;
 80042e8:	4b3f      	ldr	r3, [pc, #252]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 80042ea:	2203      	movs	r2, #3
 80042ec:	731a      	strb	r2, [r3, #12]
			break;
 80042ee:	e071      	b.n	80043d4 <FRAME_SYNC_Receive+0x17c>
		case RECEIVING_SRC_ID:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	4619      	mov	r1, r3
 80042f4:	483e      	ldr	r0, [pc, #248]	; (80043f0 <FRAME_SYNC_Receive+0x198>)
 80042f6:	f7ff fd2d 	bl	8003d54 <CRC_Update>
			FS_Data.rx_packet.src_id = rx_data;
 80042fa:	4a3b      	ldr	r2, [pc, #236]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	7493      	strb	r3, [r2, #18]
			FS_Data.rx_state = RECEIVING_TIME_TO_LIVE;
 8004300:	4b39      	ldr	r3, [pc, #228]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 8004302:	2204      	movs	r2, #4
 8004304:	731a      	strb	r2, [r3, #12]
			break;
 8004306:	e065      	b.n	80043d4 <FRAME_SYNC_Receive+0x17c>
		case RECEIVING_TIME_TO_LIVE:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	4619      	mov	r1, r3
 800430c:	4838      	ldr	r0, [pc, #224]	; (80043f0 <FRAME_SYNC_Receive+0x198>)
 800430e:	f7ff fd21 	bl	8003d54 <CRC_Update>
			FS_Data.rx_packet.time_to_live = rx_data;
 8004312:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004316:	4b34      	ldr	r3, [pc, #208]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 8004318:	74da      	strb	r2, [r3, #19]
			FS_Data.rx_state = RECEIVING_DATA_LEN;
 800431a:	4b33      	ldr	r3, [pc, #204]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 800431c:	2205      	movs	r2, #5
 800431e:	731a      	strb	r2, [r3, #12]
			break;
 8004320:	e058      	b.n	80043d4 <FRAME_SYNC_Receive+0x17c>
		case RECEIVING_DATA_LEN:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	4619      	mov	r1, r3
 8004326:	4832      	ldr	r0, [pc, #200]	; (80043f0 <FRAME_SYNC_Receive+0x198>)
 8004328:	f7ff fd14 	bl	8003d54 <CRC_Update>
			FS_Data.rx_packet.length = rx_data;
 800432c:	4a2e      	ldr	r2, [pc, #184]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	7513      	strb	r3, [r2, #20]
			FS_Data.rx_state = RECEIVING_DATA;
 8004332:	4b2d      	ldr	r3, [pc, #180]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 8004334:	2206      	movs	r2, #6
 8004336:	731a      	strb	r2, [r3, #12]
			break;
 8004338:	e04c      	b.n	80043d4 <FRAME_SYNC_Receive+0x17c>
		case RECEIVING_DATA:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 800433a:	79fb      	ldrb	r3, [r7, #7]
 800433c:	4619      	mov	r1, r3
 800433e:	482c      	ldr	r0, [pc, #176]	; (80043f0 <FRAME_SYNC_Receive+0x198>)
 8004340:	f7ff fd08 	bl	8003d54 <CRC_Update>
			FS_Data.rx_packet.buffer[FS_Data.rx_pointer++] = rx_data;
 8004344:	4b28      	ldr	r3, [pc, #160]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 8004346:	7b5b      	ldrb	r3, [r3, #13]
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	b2d1      	uxtb	r1, r2
 800434c:	4a26      	ldr	r2, [pc, #152]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 800434e:	7351      	strb	r1, [r2, #13]
 8004350:	461a      	mov	r2, r3
 8004352:	4b25      	ldr	r3, [pc, #148]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 8004354:	4413      	add	r3, r2
 8004356:	79fa      	ldrb	r2, [r7, #7]
 8004358:	755a      	strb	r2, [r3, #21]
			if(FS_Data.rx_pointer == FS_Data.rx_packet.length)
 800435a:	4b23      	ldr	r3, [pc, #140]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 800435c:	7b5a      	ldrb	r2, [r3, #13]
 800435e:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 8004360:	7d1b      	ldrb	r3, [r3, #20]
 8004362:	429a      	cmp	r2, r3
 8004364:	d133      	bne.n	80043ce <FRAME_SYNC_Receive+0x176>
			{
				FS_Data.rx_state = RECEIVING_CRC;
 8004366:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 8004368:	2207      	movs	r2, #7
 800436a:	731a      	strb	r2, [r3, #12]
			}
			break;
 800436c:	e02f      	b.n	80043ce <FRAME_SYNC_Receive+0x176>
		case RECEIVING_CRC:
			FS_Data.rx_packet.crc32 |= (uint32_t)rx_data << ((FS_Data.rx_num_crc_byte) * 8);
 800436e:	4b1e      	ldr	r3, [pc, #120]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 8004370:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8004374:	79f9      	ldrb	r1, [r7, #7]
 8004376:	4b1c      	ldr	r3, [pc, #112]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 8004378:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	fa01 f303 	lsl.w	r3, r1, r3
 8004382:	4313      	orrs	r3, r2
 8004384:	4a18      	ldr	r2, [pc, #96]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 8004386:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
			FS_Data.rx_num_crc_byte++;
 800438a:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 800438c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8004390:	3301      	adds	r3, #1
 8004392:	b2da      	uxtb	r2, r3
 8004394:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 8004396:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
			if(FS_Data.rx_num_crc_byte == 4)
 800439a:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 800439c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d116      	bne.n	80043d2 <FRAME_SYNC_Receive+0x17a>
			{
				FS_Data.rx_state = RECEIVING_ETX;
 80043a4:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 80043a6:	2208      	movs	r2, #8
 80043a8:	731a      	strb	r2, [r3, #12]
			}
			break;
 80043aa:	e012      	b.n	80043d2 <FRAME_SYNC_Receive+0x17a>
		case RECEIVING_ETX:
			if(rx_data == ETX)
 80043ac:	79fb      	ldrb	r3, [r7, #7]
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d102      	bne.n	80043b8 <FRAME_SYNC_Receive+0x160>
			{
				validate_packet();
 80043b2:	f7ff fce3 	bl	8003d7c <validate_packet>
			else
			{
				Rx_Reset();
				FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
			}
			break;
 80043b6:	e00d      	b.n	80043d4 <FRAME_SYNC_Receive+0x17c>
				Rx_Reset();
 80043b8:	f7ff fcb0 	bl	8003d1c <Rx_Reset>
				FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 80043be:	7d1b      	ldrb	r3, [r3, #20]
 80043c0:	4619      	mov	r1, r3
 80043c2:	480a      	ldr	r0, [pc, #40]	; (80043ec <FRAME_SYNC_Receive+0x194>)
 80043c4:	f7fc f97a 	bl	80006bc <FRAME_SYNC_RxFailCallback>
			break;
 80043c8:	e004      	b.n	80043d4 <FRAME_SYNC_Receive+0x17c>
		default:
			break;
 80043ca:	bf00      	nop
 80043cc:	e002      	b.n	80043d4 <FRAME_SYNC_Receive+0x17c>
			break;
 80043ce:	bf00      	nop
 80043d0:	e000      	b.n	80043d4 <FRAME_SYNC_Receive+0x17c>
			break;
 80043d2:	bf00      	nop
	}

	FS_Data.last_receive_byte_timer = HAL_GetTick();
 80043d4:	f7fc feae 	bl	8001134 <HAL_GetTick>
 80043d8:	4603      	mov	r3, r0
 80043da:	4a03      	ldr	r2, [pc, #12]	; (80043e8 <FRAME_SYNC_Receive+0x190>)
 80043dc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
}
 80043e0:	bf00      	nop
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	200009d0 	.word	0x200009d0
 80043ec:	200009e5 	.word	0x200009e5
 80043f0:	200009d8 	.word	0x200009d8

080043f4 <FRAME_SYNC_Handle>:

void FRAME_SYNC_Handle(){
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af02      	add	r7, sp, #8
	if(FS_Data.rx_state != SEARCHING_STX && (HAL_GetTick() - FS_Data.last_receive_byte_timer > WAITING_NEXT_BYTE_TIME))
 80043fa:	4b30      	ldr	r3, [pc, #192]	; (80044bc <FRAME_SYNC_Handle+0xc8>)
 80043fc:	7b1b      	ldrb	r3, [r3, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d011      	beq.n	8004426 <FRAME_SYNC_Handle+0x32>
 8004402:	f7fc fe97 	bl	8001134 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <FRAME_SYNC_Handle+0xc8>)
 800440a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004414:	d907      	bls.n	8004426 <FRAME_SYNC_Handle+0x32>
	{
		Rx_Reset();
 8004416:	f7ff fc81 	bl	8003d1c <Rx_Reset>
		FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
 800441a:	4b28      	ldr	r3, [pc, #160]	; (80044bc <FRAME_SYNC_Handle+0xc8>)
 800441c:	7d1b      	ldrb	r3, [r3, #20]
 800441e:	4619      	mov	r1, r3
 8004420:	4827      	ldr	r0, [pc, #156]	; (80044c0 <FRAME_SYNC_Handle+0xcc>)
 8004422:	f7fc f94b 	bl	80006bc <FRAME_SYNC_RxFailCallback>
	}

	if(FS_Data.device_state == FRAME_SYNC_WAITING_ACK && (HAL_GetTick() - FS_Data.last_transmit_frame_timer > WAITING_ACK_TIME))
 8004426:	4b25      	ldr	r3, [pc, #148]	; (80044bc <FRAME_SYNC_Handle+0xc8>)
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d12e      	bne.n	800448c <FRAME_SYNC_Handle+0x98>
 800442e:	f7fc fe81 	bl	8001134 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	4b21      	ldr	r3, [pc, #132]	; (80044bc <FRAME_SYNC_Handle+0xc8>)
 8004436:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f242 7210 	movw	r2, #10000	; 0x2710
 8004440:	4293      	cmp	r3, r2
 8004442:	d923      	bls.n	800448c <FRAME_SYNC_Handle+0x98>
	{
		if(FS_Data.stored_packet.time_to_live - 1 != 0)
 8004444:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <FRAME_SYNC_Handle+0xc8>)
 8004446:	f993 312b 	ldrsb.w	r3, [r3, #299]	; 0x12b
 800444a:	2b01      	cmp	r3, #1
 800444c:	d01b      	beq.n	8004486 <FRAME_SYNC_Handle+0x92>
		{
			FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 800444e:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <FRAME_SYNC_Handle+0xc8>)
 8004450:	2200      	movs	r2, #0
 8004452:	705a      	strb	r2, [r3, #1]
			FRAME_SYNC_Transmit(FS_Data.stored_packet.final_des_id, FS_Data.stored_packet.temp_des_id, FS_Data.stored_packet.time_to_live - 1,
 8004454:	4b19      	ldr	r3, [pc, #100]	; (80044bc <FRAME_SYNC_Handle+0xc8>)
 8004456:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800445a:	4b18      	ldr	r3, [pc, #96]	; (80044bc <FRAME_SYNC_Handle+0xc8>)
 800445c:	f893 1129 	ldrb.w	r1, [r3, #297]	; 0x129
 8004460:	4b16      	ldr	r3, [pc, #88]	; (80044bc <FRAME_SYNC_Handle+0xc8>)
 8004462:	f993 312b 	ldrsb.w	r3, [r3, #299]	; 0x12b
 8004466:	b2db      	uxtb	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b2dc      	uxtb	r4, r3
 800446c:	4b13      	ldr	r3, [pc, #76]	; (80044bc <FRAME_SYNC_Handle+0xc8>)
 800446e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8004472:	4a12      	ldr	r2, [pc, #72]	; (80044bc <FRAME_SYNC_Handle+0xc8>)
 8004474:	f892 2230 	ldrb.w	r2, [r2, #560]	; 0x230
 8004478:	9201      	str	r2, [sp, #4]
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <FRAME_SYNC_Handle+0xd0>)
 800447e:	4622      	mov	r2, r4
 8004480:	f7ff fd32 	bl	8003ee8 <FRAME_SYNC_Transmit>
 8004484:	e002      	b.n	800448c <FRAME_SYNC_Handle+0x98>
					FS_Data.stored_packet.buffer, FS_Data.stored_packet.length, FS_Data.stored_packet.is_requiring_reply);
		}
		else
		{
			FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 8004486:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <FRAME_SYNC_Handle+0xc8>)
 8004488:	2200      	movs	r2, #0
 800448a:	705a      	strb	r2, [r3, #1]
		}
	}

	if(FS_Data.device_state == FRAME_SYNC_WAITING_REPLY && (HAL_GetTick() - FS_Data.last_transmit_frame_timer > WAITING_REPLY_TIME))
 800448c:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <FRAME_SYNC_Handle+0xc8>)
 800448e:	785b      	ldrb	r3, [r3, #1]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d10d      	bne.n	80044b0 <FRAME_SYNC_Handle+0xbc>
 8004494:	f7fc fe4e 	bl	8001134 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <FRAME_SYNC_Handle+0xc8>)
 800449c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d902      	bls.n	80044b0 <FRAME_SYNC_Handle+0xbc>
	{
		FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 80044aa:	4b04      	ldr	r3, [pc, #16]	; (80044bc <FRAME_SYNC_Handle+0xc8>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	705a      	strb	r2, [r3, #1]
	}

	FRAME_SYNC_Packet_Receive();
 80044b0:	f7fc f96e 	bl	8000790 <FRAME_SYNC_Packet_Receive>
}
 80044b4:	bf00      	nop
 80044b6:	3704      	adds	r7, #4
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd90      	pop	{r4, r7, pc}
 80044bc:	200009d0 	.word	0x200009d0
 80044c0:	200009e5 	.word	0x200009e5
 80044c4:	20000afd 	.word	0x20000afd

080044c8 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	78fa      	ldrb	r2, [r7, #3]
 80044da:	4611      	mov	r1, r2
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fbee 	bl	8004cbe <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fc09 	bl	8004cfe <SX1278_hw_SPIReadByte>
 80044ec:	4603      	mov	r3, r0
 80044ee:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2101      	movs	r1, #1
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fba6 	bl	8004c48 <SX1278_hw_SetNSS>
	return tmp;
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	460b      	mov	r3, r1
 8004510:	70fb      	strb	r3, [r7, #3]
 8004512:	4613      	mov	r3, r2
 8004514:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2100      	movs	r1, #0
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fb93 	bl	8004c48 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	78fb      	ldrb	r3, [r7, #3]
 8004528:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800452c:	b2db      	uxtb	r3, r3
 800452e:	4619      	mov	r1, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f000 fbc4 	bl	8004cbe <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	78ba      	ldrb	r2, [r7, #2]
 800453c:	4611      	mov	r1, r2
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fbbd 	bl	8004cbe <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2101      	movs	r1, #1
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fb7c 	bl	8004c48 <SX1278_hw_SetNSS>
}
 8004550:	bf00      	nop
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8004558:	b590      	push	{r4, r7, lr}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	607a      	str	r2, [r7, #4]
 8004562:	461a      	mov	r2, r3
 8004564:	460b      	mov	r3, r1
 8004566:	72fb      	strb	r3, [r7, #11]
 8004568:	4613      	mov	r3, r2
 800456a:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 800456c:	7abb      	ldrb	r3, [r7, #10]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d927      	bls.n	80045c2 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2100      	movs	r1, #0
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fb65 	bl	8004c48 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	7afa      	ldrb	r2, [r7, #11]
 8004584:	4611      	mov	r1, r2
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fb99 	bl	8004cbe <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800458c:	2300      	movs	r3, #0
 800458e:	75fb      	strb	r3, [r7, #23]
 8004590:	e00c      	b.n	80045ac <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6819      	ldr	r1, [r3, #0]
 8004596:	7dfb      	ldrb	r3, [r7, #23]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	18d4      	adds	r4, r2, r3
 800459c:	4608      	mov	r0, r1
 800459e:	f000 fbae 	bl	8004cfe <SX1278_hw_SPIReadByte>
 80045a2:	4603      	mov	r3, r0
 80045a4:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 80045a6:	7dfb      	ldrb	r3, [r7, #23]
 80045a8:	3301      	adds	r3, #1
 80045aa:	75fb      	strb	r3, [r7, #23]
 80045ac:	7dfa      	ldrb	r2, [r7, #23]
 80045ae:	7abb      	ldrb	r3, [r7, #10]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d3ee      	bcc.n	8004592 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2101      	movs	r1, #1
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fb44 	bl	8004c48 <SX1278_hw_SetNSS>
 80045c0:	e000      	b.n	80045c4 <SX1278_SPIBurstRead+0x6c>
		return;
 80045c2:	bf00      	nop
	}
}
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd90      	pop	{r4, r7, pc}

080045ca <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b086      	sub	sp, #24
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	461a      	mov	r2, r3
 80045d6:	460b      	mov	r3, r1
 80045d8:	72fb      	strb	r3, [r7, #11]
 80045da:	4613      	mov	r3, r2
 80045dc:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 80045de:	7abb      	ldrb	r3, [r7, #10]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d929      	bls.n	8004638 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fb2c 	bl	8004c48 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	7afb      	ldrb	r3, [r7, #11]
 80045f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	4619      	mov	r1, r3
 80045fe:	4610      	mov	r0, r2
 8004600:	f000 fb5d 	bl	8004cbe <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8004604:	2300      	movs	r3, #0
 8004606:	75fb      	strb	r3, [r7, #23]
 8004608:	e00b      	b.n	8004622 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	7dfb      	ldrb	r3, [r7, #23]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	4413      	add	r3, r2
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	4619      	mov	r1, r3
 8004618:	f000 fb51 	bl	8004cbe <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	3301      	adds	r3, #1
 8004620:	75fb      	strb	r3, [r7, #23]
 8004622:	7dfa      	ldrb	r2, [r7, #23]
 8004624:	7abb      	ldrb	r3, [r7, #10]
 8004626:	429a      	cmp	r2, r3
 8004628:	d3ef      	bcc.n	800460a <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2101      	movs	r1, #1
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fb09 	bl	8004c48 <SX1278_hw_SetNSS>
 8004636:	e000      	b.n	800463a <SX1278_SPIBurstWrite+0x70>
		return;
 8004638:	bf00      	nop
	}
}
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f90d 	bl	8004868 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800464e:	200f      	movs	r0, #15
 8004650:	f000 fb7b 	bl	8004d4a <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f917 	bl	8004888 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004660:	f04f 0000 	mov.w	r0, #0
 8004664:	f04f 0100 	mov.w	r1, #0
 8004668:	04d9      	lsls	r1, r3, #19
 800466a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800466e:	04d0      	lsls	r0, r2, #19
 8004670:	4a6f      	ldr	r2, [pc, #444]	; (8004830 <SX1278_config+0x1f0>)
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	f7fb fe0b 	bl	8000290 <__aeabi_uldivmod>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8004682:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	0c02      	lsrs	r2, r0, #16
 8004690:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004694:	0c0b      	lsrs	r3, r1, #16
 8004696:	b2d3      	uxtb	r3, r2
 8004698:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800469a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	0a02      	lsrs	r2, r0, #8
 80046a8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80046ac:	0a0b      	lsrs	r3, r1, #8
 80046ae:	b2d3      	uxtb	r3, r2
 80046b0:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80046b2:	7c3b      	ldrb	r3, [r7, #16]
 80046b4:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 80046b6:	f107 020c 	add.w	r2, r7, #12
 80046ba:	2303      	movs	r3, #3
 80046bc:	2106      	movs	r1, #6
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff ff83 	bl	80045ca <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 80046c4:	2234      	movs	r2, #52	; 0x34
 80046c6:	2139      	movs	r1, #57	; 0x39
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff ff1c 	bl	8004506 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	7c1b      	ldrb	r3, [r3, #16]
 80046d2:	461a      	mov	r2, r3
 80046d4:	4b57      	ldr	r3, [pc, #348]	; (8004834 <SX1278_config+0x1f4>)
 80046d6:	5c9b      	ldrb	r3, [r3, r2]
 80046d8:	461a      	mov	r2, r3
 80046da:	2109      	movs	r1, #9
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff ff12 	bl	8004506 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80046e2:	220b      	movs	r2, #11
 80046e4:	210b      	movs	r1, #11
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7ff ff0d 	bl	8004506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80046ec:	2223      	movs	r2, #35	; 0x23
 80046ee:	210c      	movs	r1, #12
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7ff ff08 	bl	8004506 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	7c5b      	ldrb	r3, [r3, #17]
 80046fa:	461a      	mov	r2, r3
 80046fc:	4b4e      	ldr	r3, [pc, #312]	; (8004838 <SX1278_config+0x1f8>)
 80046fe:	5c9b      	ldrb	r3, [r3, r2]
 8004700:	2b06      	cmp	r3, #6
 8004702:	d147      	bne.n	8004794 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	7c9b      	ldrb	r3, [r3, #18]
 8004708:	461a      	mov	r2, r3
 800470a:	4b4c      	ldr	r3, [pc, #304]	; (800483c <SX1278_config+0x1fc>)
 800470c:	5c9b      	ldrb	r3, [r3, r2]
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	7cdb      	ldrb	r3, [r3, #19]
 8004716:	4619      	mov	r1, r3
 8004718:	4b49      	ldr	r3, [pc, #292]	; (8004840 <SX1278_config+0x200>)
 800471a:	5c5b      	ldrb	r3, [r3, r1]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	b2db      	uxtb	r3, r3
 8004720:	4413      	add	r3, r2
 8004722:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8004724:	3301      	adds	r3, #1
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	211d      	movs	r1, #29
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff feea 	bl	8004506 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	7c5b      	ldrb	r3, [r3, #17]
 8004736:	461a      	mov	r2, r3
 8004738:	4b3f      	ldr	r3, [pc, #252]	; (8004838 <SX1278_config+0x1f8>)
 800473a:	5c9b      	ldrb	r3, [r3, r2]
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	7d1b      	ldrb	r3, [r3, #20]
 8004744:	4619      	mov	r1, r3
 8004746:	4b3f      	ldr	r3, [pc, #252]	; (8004844 <SX1278_config+0x204>)
 8004748:	5c5b      	ldrb	r3, [r3, r1]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	b2db      	uxtb	r3, r3
 800474e:	4413      	add	r3, r2
 8004750:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8004752:	3303      	adds	r3, #3
 8004754:	b2db      	uxtb	r3, r3
 8004756:	461a      	mov	r2, r3
 8004758:	211e      	movs	r1, #30
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff fed3 	bl	8004506 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8004760:	2131      	movs	r1, #49	; 0x31
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff feb0 	bl	80044c8 <SX1278_SPIRead>
 8004768:	4603      	mov	r3, r0
 800476a:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800476c:	7bfb      	ldrb	r3, [r7, #15]
 800476e:	f023 0307 	bic.w	r3, r3, #7
 8004772:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	f043 0305 	orr.w	r3, r3, #5
 800477a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	461a      	mov	r2, r3
 8004780:	2131      	movs	r1, #49	; 0x31
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff febf 	bl	8004506 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8004788:	220c      	movs	r2, #12
 800478a:	2137      	movs	r1, #55	; 0x37
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff feba 	bl	8004506 <SX1278_SPIWrite>
 8004792:	e029      	b.n	80047e8 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	7c9b      	ldrb	r3, [r3, #18]
 8004798:	461a      	mov	r2, r3
 800479a:	4b28      	ldr	r3, [pc, #160]	; (800483c <SX1278_config+0x1fc>)
 800479c:	5c9b      	ldrb	r3, [r3, r2]
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	7cdb      	ldrb	r3, [r3, #19]
 80047a6:	4619      	mov	r1, r3
 80047a8:	4b25      	ldr	r3, [pc, #148]	; (8004840 <SX1278_config+0x200>)
 80047aa:	5c5b      	ldrb	r3, [r3, r1]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80047b0:	4413      	add	r3, r2
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	461a      	mov	r2, r3
 80047b6:	211d      	movs	r1, #29
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff fea4 	bl	8004506 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	7c5b      	ldrb	r3, [r3, #17]
 80047c2:	461a      	mov	r2, r3
 80047c4:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <SX1278_config+0x1f8>)
 80047c6:	5c9b      	ldrb	r3, [r3, r2]
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	7d1b      	ldrb	r3, [r3, #20]
 80047d0:	4619      	mov	r1, r3
 80047d2:	4b1c      	ldr	r3, [pc, #112]	; (8004844 <SX1278_config+0x204>)
 80047d4:	5c5b      	ldrb	r3, [r3, r1]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80047da:	4413      	add	r3, r2
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	461a      	mov	r2, r3
 80047e0:	211e      	movs	r1, #30
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff fe8f 	bl	8004506 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 80047e8:	2204      	movs	r2, #4
 80047ea:	2126      	movs	r1, #38	; 0x26
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff fe8a 	bl	8004506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 80047f2:	2208      	movs	r2, #8
 80047f4:	211f      	movs	r1, #31
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7ff fe85 	bl	8004506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 80047fc:	2200      	movs	r2, #0
 80047fe:	2120      	movs	r1, #32
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff fe80 	bl	8004506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8004806:	2208      	movs	r2, #8
 8004808:	2121      	movs	r1, #33	; 0x21
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff fe7b 	bl	8004506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8004810:	2201      	movs	r2, #1
 8004812:	2141      	movs	r1, #65	; 0x41
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7ff fe76 	bl	8004506 <SX1278_SPIWrite>
	module->readBytes = 0;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f810 	bl	8004848 <SX1278_standby>
}
 8004828:	bf00      	nop
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	01e84800 	.word	0x01e84800
 8004834:	080065e0 	.word	0x080065e0
 8004838:	080065e4 	.word	0x080065e4
 800483c:	080065ec 	.word	0x080065ec
 8004840:	080065f8 	.word	0x080065f8
 8004844:	080065fc 	.word	0x080065fc

08004848 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8004850:	2209      	movs	r2, #9
 8004852:	2101      	movs	r1, #1
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff fe56 	bl	8004506 <SX1278_SPIWrite>
	module->status = STANDBY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	759a      	strb	r2, [r3, #22]
}
 8004860:	bf00      	nop
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8004870:	2208      	movs	r2, #8
 8004872:	2101      	movs	r1, #1
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff fe46 	bl	8004506 <SX1278_SPIWrite>
	module->status = SLEEP;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	759a      	strb	r2, [r3, #22]
}
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8004890:	2288      	movs	r2, #136	; 0x88
 8004892:	2101      	movs	r1, #1
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff fe36 	bl	8004506 <SX1278_SPIWrite>
}
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b082      	sub	sp, #8
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80048aa:	22ff      	movs	r2, #255	; 0xff
 80048ac:	2112      	movs	r1, #18
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7ff fe29 	bl	8004506 <SX1278_SPIWrite>
}
 80048b4:	bf00      	nop
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	460b      	mov	r3, r1
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	7afa      	ldrb	r2, [r7, #11]
 80048ce:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f7ff feb5 	bl	8004640 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 80048d6:	2284      	movs	r2, #132	; 0x84
 80048d8:	214d      	movs	r1, #77	; 0x4d
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f7ff fe13 	bl	8004506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 80048e0:	22ff      	movs	r2, #255	; 0xff
 80048e2:	2124      	movs	r1, #36	; 0x24
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7ff fe0e 	bl	8004506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 80048ea:	2201      	movs	r2, #1
 80048ec:	2140      	movs	r1, #64	; 0x40
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f7ff fe09 	bl	8004506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 80048f4:	223f      	movs	r2, #63	; 0x3f
 80048f6:	2111      	movs	r1, #17
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f7ff fe04 	bl	8004506 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f7ff ffcf 	bl	80048a2 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8004904:	7afb      	ldrb	r3, [r7, #11]
 8004906:	461a      	mov	r2, r3
 8004908:	2122      	movs	r1, #34	; 0x22
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f7ff fdfb 	bl	8004506 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8004910:	210f      	movs	r1, #15
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f7ff fdd8 	bl	80044c8 <SX1278_SPIRead>
 8004918:	4603      	mov	r3, r0
 800491a:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 800491c:	7dfb      	ldrb	r3, [r7, #23]
 800491e:	461a      	mov	r2, r3
 8004920:	210d      	movs	r1, #13
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f7ff fdef 	bl	8004506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8004928:	228d      	movs	r2, #141	; 0x8d
 800492a:	2101      	movs	r1, #1
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f7ff fdea 	bl	8004506 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800493a:	2118      	movs	r1, #24
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f7ff fdc3 	bl	80044c8 <SX1278_SPIRead>
 8004942:	4603      	mov	r3, r0
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b04      	cmp	r3, #4
 800494a:	d104      	bne.n	8004956 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2203      	movs	r2, #3
 8004950:	759a      	strb	r2, [r3, #22]
			return 1;
 8004952:	2301      	movs	r3, #1
 8004954:	e013      	b.n	800497e <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3b01      	subs	r3, #1
 800495a:	607b      	str	r3, [r7, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f000 f985 	bl	8004c76 <SX1278_hw_Reset>
			SX1278_config(module);
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7ff fe67 	bl	8004640 <SX1278_config>
			return 0;
 8004972:	2300      	movs	r3, #0
 8004974:	e003      	b.n	800497e <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8004976:	2001      	movs	r0, #1
 8004978:	f000 f9e7 	bl	8004d4a <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800497c:	e7dd      	b.n	800493a <SX1278_LoRaEntryRx+0x7e>
	}
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f000 f9e4 	bl	8004d60 <SX1278_hw_GetDIO0>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d030      	beq.n	8004a00 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3317      	adds	r3, #23
 80049a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049a6:	2100      	movs	r1, #0
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fb35 	bl	8005018 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 80049ae:	2110      	movs	r1, #16
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff fd89 	bl	80044c8 <SX1278_SPIRead>
 80049b6:	4603      	mov	r3, r0
 80049b8:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 80049ba:	7bbb      	ldrb	r3, [r7, #14]
 80049bc:	461a      	mov	r2, r3
 80049be:	210d      	movs	r1, #13
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7ff fda0 	bl	8004506 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	7c5b      	ldrb	r3, [r3, #17]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d103      	bne.n	80049d6 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	7d5b      	ldrb	r3, [r3, #21]
 80049d2:	73fb      	strb	r3, [r7, #15]
 80049d4:	e005      	b.n	80049e2 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 80049d6:	2113      	movs	r1, #19
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff fd75 	bl	80044c8 <SX1278_SPIRead>
 80049de:	4603      	mov	r3, r0
 80049e0:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f103 0217 	add.w	r2, r3, #23
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	2100      	movs	r1, #0
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7ff fdb3 	bl	8004558 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	7bfa      	ldrb	r2, [r7, #15]
 80049f6:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff ff51 	bl	80048a2 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b086      	sub	sp, #24
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	460b      	mov	r3, r1
 8004a18:	607a      	str	r2, [r7, #4]
 8004a1a:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	7afa      	ldrb	r2, [r7, #11]
 8004a20:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f7ff fe0c 	bl	8004640 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8004a28:	2287      	movs	r2, #135	; 0x87
 8004a2a:	214d      	movs	r1, #77	; 0x4d
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f7ff fd6a 	bl	8004506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8004a32:	2200      	movs	r2, #0
 8004a34:	2124      	movs	r1, #36	; 0x24
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f7ff fd65 	bl	8004506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8004a3c:	2241      	movs	r2, #65	; 0x41
 8004a3e:	2140      	movs	r1, #64	; 0x40
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f7ff fd60 	bl	8004506 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f7ff ff2b 	bl	80048a2 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8004a4c:	22f7      	movs	r2, #247	; 0xf7
 8004a4e:	2111      	movs	r1, #17
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f7ff fd58 	bl	8004506 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8004a56:	7afb      	ldrb	r3, [r7, #11]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	2122      	movs	r1, #34	; 0x22
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f7ff fd52 	bl	8004506 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8004a62:	210e      	movs	r1, #14
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f7ff fd2f 	bl	80044c8 <SX1278_SPIRead>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8004a6e:	7dfb      	ldrb	r3, [r7, #23]
 8004a70:	461a      	mov	r2, r3
 8004a72:	210d      	movs	r1, #13
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f7ff fd46 	bl	8004506 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8004a7a:	2122      	movs	r1, #34	; 0x22
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7ff fd23 	bl	80044c8 <SX1278_SPIRead>
 8004a82:	4603      	mov	r3, r0
 8004a84:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8004a86:	7dba      	ldrb	r2, [r7, #22]
 8004a88:	7afb      	ldrb	r3, [r7, #11]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d104      	bne.n	8004a98 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2202      	movs	r2, #2
 8004a92:	759a      	strb	r2, [r3, #22]
			return 1;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e00e      	b.n	8004ab6 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	607b      	str	r3, [r7, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1ea      	bne.n	8004a7a <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 f8e4 	bl	8004c76 <SX1278_hw_Reset>
			SX1278_config(module);
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f7ff fdc6 	bl	8004640 <SX1278_config>
			return 0;
 8004ab4:	2300      	movs	r3, #0
		}
	}
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	603b      	str	r3, [r7, #0]
 8004aca:	4613      	mov	r3, r2
 8004acc:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff fd78 	bl	80045ca <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8004ada:	228b      	movs	r2, #139	; 0x8b
 8004adc:	2101      	movs	r1, #1
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7ff fd11 	bl	8004506 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 f939 	bl	8004d60 <SX1278_hw_GetDIO0>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00b      	beq.n	8004b0c <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8004af4:	2112      	movs	r1, #18
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f7ff fce6 	bl	80044c8 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f7ff fed0 	bl	80048a2 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f7ff fea0 	bl	8004848 <SX1278_standby>
			return 1;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e013      	b.n	8004b34 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	603b      	str	r3, [r7, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d109      	bne.n	8004b2c <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 f8aa 	bl	8004c76 <SX1278_hw_Reset>
			SX1278_config(module);
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f7ff fd8c 	bl	8004640 <SX1278_config>
			return 0;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e003      	b.n	8004b34 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	f000 f90c 	bl	8004d4a <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8004b32:	e7d7      	b.n	8004ae4 <SX1278_LoRaTxPacket+0x26>
	}
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 f866 	bl	8004c1e <SX1278_hw_init>
	module->frequency = frequency;
 8004b52:	68f9      	ldr	r1, [r7, #12]
 8004b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b58:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	7e3a      	ldrb	r2, [r7, #24]
 8004b60:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	7f3a      	ldrb	r2, [r7, #28]
 8004b66:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004b6e:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004b76:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004b7e:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004b86:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f7ff fd59 	bl	8004640 <SX1278_config>
}
 8004b8e:	bf00      	nop
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <SX1278_transmit>:

int SX1278_transmit(SX1278_t *module, uint8_t *txBuf, uint8_t length,
		uint32_t timeout) {
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	71fb      	strb	r3, [r7, #7]
	if (SX1278_LoRaEntryTx(module, length, timeout)) {
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	4619      	mov	r1, r3
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f7ff ff2e 	bl	8004a0e <SX1278_LoRaEntryTx>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <SX1278_transmit+0x32>
		return SX1278_LoRaTxPacket(module, txBuf, length, timeout);
 8004bb8:	79fa      	ldrb	r2, [r7, #7]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68b9      	ldr	r1, [r7, #8]
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f7ff ff7d 	bl	8004abe <SX1278_LoRaTxPacket>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	e000      	b.n	8004bca <SX1278_transmit+0x34>
	}
	return 0;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8004be6:	79fa      	ldrb	r2, [r7, #7]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d003      	beq.n	8004bf4 <SX1278_read+0x22>
		length = module->readBytes;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8004bf2:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3317      	adds	r3, #23
 8004bf8:	79fa      	ldrb	r2, [r7, #7]
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	68b8      	ldr	r0, [r7, #8]
 8004bfe:	f000 f9fd 	bl	8004ffc <memcpy>
	rxBuf[length] = '\0';
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	4413      	add	r3, r2
 8004c08:	2200      	movs	r2, #0
 8004c0a:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 8004c14:	79fb      	ldrb	r3, [r7, #7]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <SX1278_hw_init>:
//#include "gpio.h"
//#include "spi.h"

#include "main.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8004c26:	2101      	movs	r1, #1
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f80d 	bl	8004c48 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6858      	ldr	r0, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2201      	movs	r2, #1
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	f7fc fdea 	bl	8001814 <HAL_GPIO_WritePin>
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6958      	ldr	r0, [r3, #20]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	b299      	uxth	r1, r3
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	bf0c      	ite	eq
 8004c62:	2301      	moveq	r3, #1
 8004c64:	2300      	movne	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f7fc fdd3 	bl	8001814 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8004c6e:	bf00      	nop
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b082      	sub	sp, #8
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8004c7e:	2101      	movs	r1, #1
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff ffe1 	bl	8004c48 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6858      	ldr	r0, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2200      	movs	r2, #0
 8004c92:	4619      	mov	r1, r3
 8004c94:	f7fc fdbe 	bl	8001814 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8004c98:	2001      	movs	r0, #1
 8004c9a:	f000 f856 	bl	8004d4a <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6858      	ldr	r0, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2201      	movs	r2, #1
 8004caa:	4619      	mov	r1, r3
 8004cac:	f7fc fdb2 	bl	8001814 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8004cb0:	2064      	movs	r0, #100	; 0x64
 8004cb2:	f000 f84a 	bl	8004d4a <SX1278_hw_DelayMs>
}
 8004cb6:	bf00      	nop
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8004cca:	2100      	movs	r1, #0
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff ffbb 	bl	8004c48 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6998      	ldr	r0, [r3, #24]
 8004cd6:	1cf9      	adds	r1, r7, #3
 8004cd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f7fd fa94 	bl	800220a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8004ce2:	bf00      	nop
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fd fd6c 	bl	80027c6 <HAL_SPI_GetState>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d1f7      	bne.n	8004ce4 <SX1278_hw_SPICommand+0x26>
		;
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b086      	sub	sp, #24
 8004d02:	af02      	add	r7, sp, #8
 8004d04:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8004d0e:	2100      	movs	r1, #0
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff ff99 	bl	8004c48 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6998      	ldr	r0, [r3, #24]
 8004d1a:	f107 020e 	add.w	r2, r7, #14
 8004d1e:	f107 010f 	add.w	r1, r7, #15
 8004d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	2301      	movs	r3, #1
 8004d2a:	f7fd fbaa 	bl	8002482 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8004d2e:	bf00      	nop
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fd fd46 	bl	80027c6 <HAL_SPI_GetState>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d1f7      	bne.n	8004d30 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8004d40:	7bbb      	ldrb	r3, [r7, #14]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fc f9fa 	bl	800114c <HAL_Delay>
}
 8004d58:	bf00      	nop
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	4619      	mov	r1, r3
 8004d74:	4610      	mov	r0, r2
 8004d76:	f7fc fd35 	bl	80017e4 <HAL_GPIO_ReadPin>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <BUTTON_Handle>:
button_callback_function_t __BUTTON_Pressing_Callback = NULL;
button_callback_function_t __BUTTON_Releasing_Callback = NULL;
button_callback_function_t __BUTTON_Short_Pressing_Callback = NULL;
button_callback_function_t __BUTTON_Long_Pressing_Callback = NULL;

void BUTTON_Handle(BUTTON_HandleTypedef *ButtonX){
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
	uint8_t state = HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	695a      	ldr	r2, [r3, #20]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8b1b      	ldrh	r3, [r3, #24]
 8004da0:	4619      	mov	r1, r3
 8004da2:	4610      	mov	r0, r2
 8004da4:	f7fc fd1e 	bl	80017e4 <HAL_GPIO_ReadPin>
 8004da8:	4603      	mov	r3, r0
 8004daa:	73fb      	strb	r3, [r7, #15]
	if(state != ButtonX->BTN_Filter){
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	789b      	ldrb	r3, [r3, #2]
 8004db0:	7bfa      	ldrb	r2, [r7, #15]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d00a      	beq.n	8004dcc <BUTTON_Handle+0x3c>
		ButtonX->BTN_Filter = state;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	7bfa      	ldrb	r2, [r7, #15]
 8004dba:	709a      	strb	r2, [r3, #2]
		ButtonX->is_debouncing = 1;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	70da      	strb	r2, [r3, #3]
		ButtonX->time_debounce = HAL_GetTick();
 8004dc2:	f7fc f9b7 	bl	8001134 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	609a      	str	r2, [r3, #8]
	}

	if(ButtonX->is_debouncing && (HAL_GetTick() - ButtonX->time_debounce >= 15)){
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	78db      	ldrb	r3, [r3, #3]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00e      	beq.n	8004df2 <BUTTON_Handle+0x62>
 8004dd4:	f7fc f9ae 	bl	8001134 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b0e      	cmp	r3, #14
 8004de2:	d906      	bls.n	8004df2 <BUTTON_Handle+0x62>
		ButtonX->BTN_Current = ButtonX->BTN_Filter;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	789a      	ldrb	r2, [r3, #2]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	701a      	strb	r2, [r3, #0]
		ButtonX->is_debouncing = 0;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	70da      	strb	r2, [r3, #3]
	}

	if(ButtonX->BTN_Current != ButtonX->BTN_Last){
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	785b      	ldrb	r3, [r3, #1]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d03c      	beq.n	8004e78 <BUTTON_Handle+0xe8>
		if(ButtonX->BTN_Current == !ButtonX->releasing_state){
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	7c1b      	ldrb	r3, [r3, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bf0c      	ite	eq
 8004e0c:	2301      	moveq	r3, #1
 8004e0e:	2300      	movne	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d110      	bne.n	8004e38 <BUTTON_Handle+0xa8>
			if(__BUTTON_Pressing_Callback != NULL){
 8004e16:	4b26      	ldr	r3, [pc, #152]	; (8004eb0 <BUTTON_Handle+0x120>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <BUTTON_Handle+0x96>
				__BUTTON_Pressing_Callback(ButtonX);
 8004e1e:	4b24      	ldr	r3, [pc, #144]	; (8004eb0 <BUTTON_Handle+0x120>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	4798      	blx	r3
			}
			ButtonX->is_press = 1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	711a      	strb	r2, [r3, #4]
			ButtonX->time_start_press = HAL_GetTick();
 8004e2c:	f7fc f982 	bl	8001134 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	60da      	str	r2, [r3, #12]
 8004e36:	e01b      	b.n	8004e70 <BUTTON_Handle+0xe0>
		}
		else{
			ButtonX->is_press = 0;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	711a      	strb	r2, [r3, #4]
			if(HAL_GetTick() - ButtonX->time_start_press <= 1000){
 8004e3e:	f7fc f979 	bl	8001134 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e4e:	d807      	bhi.n	8004e60 <BUTTON_Handle+0xd0>
				if(__BUTTON_Short_Pressing_Callback != NULL){
 8004e50:	4b18      	ldr	r3, [pc, #96]	; (8004eb4 <BUTTON_Handle+0x124>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <BUTTON_Handle+0xd0>
					__BUTTON_Short_Pressing_Callback(ButtonX);
 8004e58:	4b16      	ldr	r3, [pc, #88]	; (8004eb4 <BUTTON_Handle+0x124>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	4798      	blx	r3
				}
			}
			if(__BUTTON_Releasing_Callback != NULL){
 8004e60:	4b15      	ldr	r3, [pc, #84]	; (8004eb8 <BUTTON_Handle+0x128>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <BUTTON_Handle+0xe0>
				__BUTTON_Releasing_Callback(ButtonX);
 8004e68:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <BUTTON_Handle+0x128>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	4798      	blx	r3
			}
		}
		ButtonX->BTN_Last = ButtonX->BTN_Current;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	781a      	ldrb	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	705a      	strb	r2, [r3, #1]
	}

	if(ButtonX->is_press && (HAL_GetTick() - ButtonX->time_start_press >= TIME_FOR_LONG_PRESSING)){
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	791b      	ldrb	r3, [r3, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d013      	beq.n	8004ea8 <BUTTON_Handle+0x118>
 8004e80:	f7fc f958 	bl	8001134 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004e90:	d30a      	bcc.n	8004ea8 <BUTTON_Handle+0x118>
		if(__BUTTON_Long_Pressing_Callback != NULL){
 8004e92:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <BUTTON_Handle+0x12c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <BUTTON_Handle+0x112>
			__BUTTON_Long_Pressing_Callback(ButtonX);
 8004e9a:	4b08      	ldr	r3, [pc, #32]	; (8004ebc <BUTTON_Handle+0x12c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	4798      	blx	r3
		}
		ButtonX->is_press = 0;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	711a      	strb	r2, [r3, #4]
	}
}
 8004ea8:	bf00      	nop
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20000c08 	.word	0x20000c08
 8004eb4:	20000c10 	.word	0x20000c10
 8004eb8:	20000c0c 	.word	0x20000c0c
 8004ebc:	20000c14 	.word	0x20000c14

08004ec0 <BUTTON_Init>:

void BUTTON_Init(BUTTON_HandleTypedef *ButtonX, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t releasing_state){
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	4611      	mov	r1, r2
 8004ecc:	461a      	mov	r2, r3
 8004ece:	460b      	mov	r3, r1
 8004ed0:	80fb      	strh	r3, [r7, #6]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	717b      	strb	r3, [r7, #5]
	ButtonX->GPIOx = GPIOx;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	615a      	str	r2, [r3, #20]
	ButtonX->GPIO_Pin = GPIO_Pin;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	88fa      	ldrh	r2, [r7, #6]
 8004ee0:	831a      	strh	r2, [r3, #24]
	ButtonX->releasing_state = releasing_state;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	797a      	ldrb	r2, [r7, #5]
 8004ee6:	741a      	strb	r2, [r3, #16]
	ButtonX->BTN_Current = releasing_state;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	797a      	ldrb	r2, [r7, #5]
 8004eec:	701a      	strb	r2, [r3, #0]
	ButtonX->BTN_Last = releasing_state;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	797a      	ldrb	r2, [r7, #5]
 8004ef2:	705a      	strb	r2, [r3, #1]
	ButtonX->BTN_Filter = releasing_state;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	797a      	ldrb	r2, [r7, #5]
 8004ef8:	709a      	strb	r2, [r3, #2]
	ButtonX->is_debouncing = 0;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	70da      	strb	r2, [r3, #3]
	ButtonX->is_press = 0;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	711a      	strb	r2, [r3, #4]
}
 8004f06:	bf00      	nop
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
	...

08004f14 <BUTTON_Set_Callback_Function>:

void BUTTON_Set_Callback_Function(button_callback_function_t p_pressing_callback_function,
								button_callback_function_t p_releasing_callback_function,
								button_callback_function_t p_short_pressing_callback_function,
								button_callback_function_t p_long_pressing_callback_function){
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
	__BUTTON_Pressing_Callback = p_pressing_callback_function;
 8004f22:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <BUTTON_Set_Callback_Function+0x34>)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6013      	str	r3, [r2, #0]
	__BUTTON_Releasing_Callback = p_releasing_callback_function;
 8004f28:	4a08      	ldr	r2, [pc, #32]	; (8004f4c <BUTTON_Set_Callback_Function+0x38>)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	6013      	str	r3, [r2, #0]
	__BUTTON_Short_Pressing_Callback = p_short_pressing_callback_function;
 8004f2e:	4a08      	ldr	r2, [pc, #32]	; (8004f50 <BUTTON_Set_Callback_Function+0x3c>)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6013      	str	r3, [r2, #0]
	__BUTTON_Long_Pressing_Callback = p_long_pressing_callback_function;
 8004f34:	4a07      	ldr	r2, [pc, #28]	; (8004f54 <BUTTON_Set_Callback_Function+0x40>)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	6013      	str	r3, [r2, #0]
}
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	20000c08 	.word	0x20000c08
 8004f4c:	20000c0c 	.word	0x20000c0c
 8004f50:	20000c10 	.word	0x20000c10
 8004f54:	20000c14 	.word	0x20000c14

08004f58 <RING_BUFFER_Init>:
#include "ring_buffer.h"

void RING_BUFFER_Init(RING_BUFFER_HandleTypeDef *p_ring_buffer, uint8_t * p_buffer, uint16_t p_max_length){
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	4613      	mov	r3, r2
 8004f64:	80fb      	strh	r3, [r7, #6]
	p_ring_buffer->buffer = p_buffer;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	601a      	str	r2, [r3, #0]
	p_ring_buffer->head = 0;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	809a      	strh	r2, [r3, #4]
	p_ring_buffer->tail = 0;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	80da      	strh	r2, [r3, #6]
	p_ring_buffer->max_length = p_max_length;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	88fa      	ldrh	r2, [r7, #6]
 8004f7c:	811a      	strh	r2, [r3, #8]
}
 8004f7e:	bf00      	nop
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
	...

08004f8c <UART_Init>:
static uint8_t uart_buffer[UART_MAX_LEN];
RING_BUFFER_HandleTypeDef uart_ring_buffer;

extern UART_HandleTypeDef huart2;

void UART_Init(){
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
	RING_BUFFER_Init(&uart_ring_buffer, uart_buffer, UART_MAX_LEN);
 8004f90:	22ff      	movs	r2, #255	; 0xff
 8004f92:	4903      	ldr	r1, [pc, #12]	; (8004fa0 <UART_Init+0x14>)
 8004f94:	4803      	ldr	r0, [pc, #12]	; (8004fa4 <UART_Init+0x18>)
 8004f96:	f7ff ffdf 	bl	8004f58 <RING_BUFFER_Init>
}
 8004f9a:	bf00      	nop
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000c18 	.word	0x20000c18
 8004fa4:	20000d18 	.word	0x20000d18

08004fa8 <__errno>:
 8004fa8:	4b01      	ldr	r3, [pc, #4]	; (8004fb0 <__errno+0x8>)
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	2000000c 	.word	0x2000000c

08004fb4 <__libc_init_array>:
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	4d0d      	ldr	r5, [pc, #52]	; (8004fec <__libc_init_array+0x38>)
 8004fb8:	4c0d      	ldr	r4, [pc, #52]	; (8004ff0 <__libc_init_array+0x3c>)
 8004fba:	1b64      	subs	r4, r4, r5
 8004fbc:	10a4      	asrs	r4, r4, #2
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	42a6      	cmp	r6, r4
 8004fc2:	d109      	bne.n	8004fd8 <__libc_init_array+0x24>
 8004fc4:	4d0b      	ldr	r5, [pc, #44]	; (8004ff4 <__libc_init_array+0x40>)
 8004fc6:	4c0c      	ldr	r4, [pc, #48]	; (8004ff8 <__libc_init_array+0x44>)
 8004fc8:	f001 fa78 	bl	80064bc <_init>
 8004fcc:	1b64      	subs	r4, r4, r5
 8004fce:	10a4      	asrs	r4, r4, #2
 8004fd0:	2600      	movs	r6, #0
 8004fd2:	42a6      	cmp	r6, r4
 8004fd4:	d105      	bne.n	8004fe2 <__libc_init_array+0x2e>
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fdc:	4798      	blx	r3
 8004fde:	3601      	adds	r6, #1
 8004fe0:	e7ee      	b.n	8004fc0 <__libc_init_array+0xc>
 8004fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe6:	4798      	blx	r3
 8004fe8:	3601      	adds	r6, #1
 8004fea:	e7f2      	b.n	8004fd2 <__libc_init_array+0x1e>
 8004fec:	08006750 	.word	0x08006750
 8004ff0:	08006750 	.word	0x08006750
 8004ff4:	08006750 	.word	0x08006750
 8004ff8:	08006754 	.word	0x08006754

08004ffc <memcpy>:
 8004ffc:	440a      	add	r2, r1
 8004ffe:	4291      	cmp	r1, r2
 8005000:	f100 33ff 	add.w	r3, r0, #4294967295
 8005004:	d100      	bne.n	8005008 <memcpy+0xc>
 8005006:	4770      	bx	lr
 8005008:	b510      	push	{r4, lr}
 800500a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800500e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005012:	4291      	cmp	r1, r2
 8005014:	d1f9      	bne.n	800500a <memcpy+0xe>
 8005016:	bd10      	pop	{r4, pc}

08005018 <memset>:
 8005018:	4402      	add	r2, r0
 800501a:	4603      	mov	r3, r0
 800501c:	4293      	cmp	r3, r2
 800501e:	d100      	bne.n	8005022 <memset+0xa>
 8005020:	4770      	bx	lr
 8005022:	f803 1b01 	strb.w	r1, [r3], #1
 8005026:	e7f9      	b.n	800501c <memset+0x4>

08005028 <siprintf>:
 8005028:	b40e      	push	{r1, r2, r3}
 800502a:	b500      	push	{lr}
 800502c:	b09c      	sub	sp, #112	; 0x70
 800502e:	ab1d      	add	r3, sp, #116	; 0x74
 8005030:	9002      	str	r0, [sp, #8]
 8005032:	9006      	str	r0, [sp, #24]
 8005034:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005038:	4809      	ldr	r0, [pc, #36]	; (8005060 <siprintf+0x38>)
 800503a:	9107      	str	r1, [sp, #28]
 800503c:	9104      	str	r1, [sp, #16]
 800503e:	4909      	ldr	r1, [pc, #36]	; (8005064 <siprintf+0x3c>)
 8005040:	f853 2b04 	ldr.w	r2, [r3], #4
 8005044:	9105      	str	r1, [sp, #20]
 8005046:	6800      	ldr	r0, [r0, #0]
 8005048:	9301      	str	r3, [sp, #4]
 800504a:	a902      	add	r1, sp, #8
 800504c:	f000 fa02 	bl	8005454 <_svfiprintf_r>
 8005050:	9b02      	ldr	r3, [sp, #8]
 8005052:	2200      	movs	r2, #0
 8005054:	701a      	strb	r2, [r3, #0]
 8005056:	b01c      	add	sp, #112	; 0x70
 8005058:	f85d eb04 	ldr.w	lr, [sp], #4
 800505c:	b003      	add	sp, #12
 800505e:	4770      	bx	lr
 8005060:	2000000c 	.word	0x2000000c
 8005064:	ffff0208 	.word	0xffff0208

08005068 <strcat>:
 8005068:	b510      	push	{r4, lr}
 800506a:	4602      	mov	r2, r0
 800506c:	7814      	ldrb	r4, [r2, #0]
 800506e:	4613      	mov	r3, r2
 8005070:	3201      	adds	r2, #1
 8005072:	2c00      	cmp	r4, #0
 8005074:	d1fa      	bne.n	800506c <strcat+0x4>
 8005076:	3b01      	subs	r3, #1
 8005078:	f811 2b01 	ldrb.w	r2, [r1], #1
 800507c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005080:	2a00      	cmp	r2, #0
 8005082:	d1f9      	bne.n	8005078 <strcat+0x10>
 8005084:	bd10      	pop	{r4, pc}

08005086 <strstr>:
 8005086:	780a      	ldrb	r2, [r1, #0]
 8005088:	b570      	push	{r4, r5, r6, lr}
 800508a:	b96a      	cbnz	r2, 80050a8 <strstr+0x22>
 800508c:	bd70      	pop	{r4, r5, r6, pc}
 800508e:	429a      	cmp	r2, r3
 8005090:	d109      	bne.n	80050a6 <strstr+0x20>
 8005092:	460c      	mov	r4, r1
 8005094:	4605      	mov	r5, r0
 8005096:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f6      	beq.n	800508c <strstr+0x6>
 800509e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80050a2:	429e      	cmp	r6, r3
 80050a4:	d0f7      	beq.n	8005096 <strstr+0x10>
 80050a6:	3001      	adds	r0, #1
 80050a8:	7803      	ldrb	r3, [r0, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1ef      	bne.n	800508e <strstr+0x8>
 80050ae:	4618      	mov	r0, r3
 80050b0:	e7ec      	b.n	800508c <strstr+0x6>
	...

080050b4 <strtok>:
 80050b4:	4b16      	ldr	r3, [pc, #88]	; (8005110 <strtok+0x5c>)
 80050b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050b8:	681e      	ldr	r6, [r3, #0]
 80050ba:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80050bc:	4605      	mov	r5, r0
 80050be:	b9fc      	cbnz	r4, 8005100 <strtok+0x4c>
 80050c0:	2050      	movs	r0, #80	; 0x50
 80050c2:	9101      	str	r1, [sp, #4]
 80050c4:	f000 f882 	bl	80051cc <malloc>
 80050c8:	9901      	ldr	r1, [sp, #4]
 80050ca:	65b0      	str	r0, [r6, #88]	; 0x58
 80050cc:	4602      	mov	r2, r0
 80050ce:	b920      	cbnz	r0, 80050da <strtok+0x26>
 80050d0:	4b10      	ldr	r3, [pc, #64]	; (8005114 <strtok+0x60>)
 80050d2:	4811      	ldr	r0, [pc, #68]	; (8005118 <strtok+0x64>)
 80050d4:	2157      	movs	r1, #87	; 0x57
 80050d6:	f000 f849 	bl	800516c <__assert_func>
 80050da:	e9c0 4400 	strd	r4, r4, [r0]
 80050de:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80050e2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80050e6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80050ea:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80050ee:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80050f2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80050f6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80050fa:	6184      	str	r4, [r0, #24]
 80050fc:	7704      	strb	r4, [r0, #28]
 80050fe:	6244      	str	r4, [r0, #36]	; 0x24
 8005100:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005102:	2301      	movs	r3, #1
 8005104:	4628      	mov	r0, r5
 8005106:	b002      	add	sp, #8
 8005108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800510c:	f000 b806 	b.w	800511c <__strtok_r>
 8005110:	2000000c 	.word	0x2000000c
 8005114:	08006604 	.word	0x08006604
 8005118:	0800661b 	.word	0x0800661b

0800511c <__strtok_r>:
 800511c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800511e:	b908      	cbnz	r0, 8005124 <__strtok_r+0x8>
 8005120:	6810      	ldr	r0, [r2, #0]
 8005122:	b188      	cbz	r0, 8005148 <__strtok_r+0x2c>
 8005124:	4604      	mov	r4, r0
 8005126:	4620      	mov	r0, r4
 8005128:	f814 5b01 	ldrb.w	r5, [r4], #1
 800512c:	460f      	mov	r7, r1
 800512e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005132:	b91e      	cbnz	r6, 800513c <__strtok_r+0x20>
 8005134:	b965      	cbnz	r5, 8005150 <__strtok_r+0x34>
 8005136:	6015      	str	r5, [r2, #0]
 8005138:	4628      	mov	r0, r5
 800513a:	e005      	b.n	8005148 <__strtok_r+0x2c>
 800513c:	42b5      	cmp	r5, r6
 800513e:	d1f6      	bne.n	800512e <__strtok_r+0x12>
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1f0      	bne.n	8005126 <__strtok_r+0xa>
 8005144:	6014      	str	r4, [r2, #0]
 8005146:	7003      	strb	r3, [r0, #0]
 8005148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800514a:	461c      	mov	r4, r3
 800514c:	e00c      	b.n	8005168 <__strtok_r+0x4c>
 800514e:	b915      	cbnz	r5, 8005156 <__strtok_r+0x3a>
 8005150:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005154:	460e      	mov	r6, r1
 8005156:	f816 5b01 	ldrb.w	r5, [r6], #1
 800515a:	42ab      	cmp	r3, r5
 800515c:	d1f7      	bne.n	800514e <__strtok_r+0x32>
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0f3      	beq.n	800514a <__strtok_r+0x2e>
 8005162:	2300      	movs	r3, #0
 8005164:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005168:	6014      	str	r4, [r2, #0]
 800516a:	e7ed      	b.n	8005148 <__strtok_r+0x2c>

0800516c <__assert_func>:
 800516c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800516e:	4614      	mov	r4, r2
 8005170:	461a      	mov	r2, r3
 8005172:	4b09      	ldr	r3, [pc, #36]	; (8005198 <__assert_func+0x2c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4605      	mov	r5, r0
 8005178:	68d8      	ldr	r0, [r3, #12]
 800517a:	b14c      	cbz	r4, 8005190 <__assert_func+0x24>
 800517c:	4b07      	ldr	r3, [pc, #28]	; (800519c <__assert_func+0x30>)
 800517e:	9100      	str	r1, [sp, #0]
 8005180:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005184:	4906      	ldr	r1, [pc, #24]	; (80051a0 <__assert_func+0x34>)
 8005186:	462b      	mov	r3, r5
 8005188:	f000 f80e 	bl	80051a8 <fiprintf>
 800518c:	f000 fe20 	bl	8005dd0 <abort>
 8005190:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <__assert_func+0x38>)
 8005192:	461c      	mov	r4, r3
 8005194:	e7f3      	b.n	800517e <__assert_func+0x12>
 8005196:	bf00      	nop
 8005198:	2000000c 	.word	0x2000000c
 800519c:	08006678 	.word	0x08006678
 80051a0:	08006685 	.word	0x08006685
 80051a4:	080066b3 	.word	0x080066b3

080051a8 <fiprintf>:
 80051a8:	b40e      	push	{r1, r2, r3}
 80051aa:	b503      	push	{r0, r1, lr}
 80051ac:	4601      	mov	r1, r0
 80051ae:	ab03      	add	r3, sp, #12
 80051b0:	4805      	ldr	r0, [pc, #20]	; (80051c8 <fiprintf+0x20>)
 80051b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80051b6:	6800      	ldr	r0, [r0, #0]
 80051b8:	9301      	str	r3, [sp, #4]
 80051ba:	f000 fa75 	bl	80056a8 <_vfiprintf_r>
 80051be:	b002      	add	sp, #8
 80051c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051c4:	b003      	add	sp, #12
 80051c6:	4770      	bx	lr
 80051c8:	2000000c 	.word	0x2000000c

080051cc <malloc>:
 80051cc:	4b02      	ldr	r3, [pc, #8]	; (80051d8 <malloc+0xc>)
 80051ce:	4601      	mov	r1, r0
 80051d0:	6818      	ldr	r0, [r3, #0]
 80051d2:	f000 b86f 	b.w	80052b4 <_malloc_r>
 80051d6:	bf00      	nop
 80051d8:	2000000c 	.word	0x2000000c

080051dc <_free_r>:
 80051dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051de:	2900      	cmp	r1, #0
 80051e0:	d044      	beq.n	800526c <_free_r+0x90>
 80051e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051e6:	9001      	str	r0, [sp, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f1a1 0404 	sub.w	r4, r1, #4
 80051ee:	bfb8      	it	lt
 80051f0:	18e4      	addlt	r4, r4, r3
 80051f2:	f001 f82f 	bl	8006254 <__malloc_lock>
 80051f6:	4a1e      	ldr	r2, [pc, #120]	; (8005270 <_free_r+0x94>)
 80051f8:	9801      	ldr	r0, [sp, #4]
 80051fa:	6813      	ldr	r3, [r2, #0]
 80051fc:	b933      	cbnz	r3, 800520c <_free_r+0x30>
 80051fe:	6063      	str	r3, [r4, #4]
 8005200:	6014      	str	r4, [r2, #0]
 8005202:	b003      	add	sp, #12
 8005204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005208:	f001 b82a 	b.w	8006260 <__malloc_unlock>
 800520c:	42a3      	cmp	r3, r4
 800520e:	d908      	bls.n	8005222 <_free_r+0x46>
 8005210:	6825      	ldr	r5, [r4, #0]
 8005212:	1961      	adds	r1, r4, r5
 8005214:	428b      	cmp	r3, r1
 8005216:	bf01      	itttt	eq
 8005218:	6819      	ldreq	r1, [r3, #0]
 800521a:	685b      	ldreq	r3, [r3, #4]
 800521c:	1949      	addeq	r1, r1, r5
 800521e:	6021      	streq	r1, [r4, #0]
 8005220:	e7ed      	b.n	80051fe <_free_r+0x22>
 8005222:	461a      	mov	r2, r3
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	b10b      	cbz	r3, 800522c <_free_r+0x50>
 8005228:	42a3      	cmp	r3, r4
 800522a:	d9fa      	bls.n	8005222 <_free_r+0x46>
 800522c:	6811      	ldr	r1, [r2, #0]
 800522e:	1855      	adds	r5, r2, r1
 8005230:	42a5      	cmp	r5, r4
 8005232:	d10b      	bne.n	800524c <_free_r+0x70>
 8005234:	6824      	ldr	r4, [r4, #0]
 8005236:	4421      	add	r1, r4
 8005238:	1854      	adds	r4, r2, r1
 800523a:	42a3      	cmp	r3, r4
 800523c:	6011      	str	r1, [r2, #0]
 800523e:	d1e0      	bne.n	8005202 <_free_r+0x26>
 8005240:	681c      	ldr	r4, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	6053      	str	r3, [r2, #4]
 8005246:	4421      	add	r1, r4
 8005248:	6011      	str	r1, [r2, #0]
 800524a:	e7da      	b.n	8005202 <_free_r+0x26>
 800524c:	d902      	bls.n	8005254 <_free_r+0x78>
 800524e:	230c      	movs	r3, #12
 8005250:	6003      	str	r3, [r0, #0]
 8005252:	e7d6      	b.n	8005202 <_free_r+0x26>
 8005254:	6825      	ldr	r5, [r4, #0]
 8005256:	1961      	adds	r1, r4, r5
 8005258:	428b      	cmp	r3, r1
 800525a:	bf04      	itt	eq
 800525c:	6819      	ldreq	r1, [r3, #0]
 800525e:	685b      	ldreq	r3, [r3, #4]
 8005260:	6063      	str	r3, [r4, #4]
 8005262:	bf04      	itt	eq
 8005264:	1949      	addeq	r1, r1, r5
 8005266:	6021      	streq	r1, [r4, #0]
 8005268:	6054      	str	r4, [r2, #4]
 800526a:	e7ca      	b.n	8005202 <_free_r+0x26>
 800526c:	b003      	add	sp, #12
 800526e:	bd30      	pop	{r4, r5, pc}
 8005270:	20000d24 	.word	0x20000d24

08005274 <sbrk_aligned>:
 8005274:	b570      	push	{r4, r5, r6, lr}
 8005276:	4e0e      	ldr	r6, [pc, #56]	; (80052b0 <sbrk_aligned+0x3c>)
 8005278:	460c      	mov	r4, r1
 800527a:	6831      	ldr	r1, [r6, #0]
 800527c:	4605      	mov	r5, r0
 800527e:	b911      	cbnz	r1, 8005286 <sbrk_aligned+0x12>
 8005280:	f000 fcd6 	bl	8005c30 <_sbrk_r>
 8005284:	6030      	str	r0, [r6, #0]
 8005286:	4621      	mov	r1, r4
 8005288:	4628      	mov	r0, r5
 800528a:	f000 fcd1 	bl	8005c30 <_sbrk_r>
 800528e:	1c43      	adds	r3, r0, #1
 8005290:	d00a      	beq.n	80052a8 <sbrk_aligned+0x34>
 8005292:	1cc4      	adds	r4, r0, #3
 8005294:	f024 0403 	bic.w	r4, r4, #3
 8005298:	42a0      	cmp	r0, r4
 800529a:	d007      	beq.n	80052ac <sbrk_aligned+0x38>
 800529c:	1a21      	subs	r1, r4, r0
 800529e:	4628      	mov	r0, r5
 80052a0:	f000 fcc6 	bl	8005c30 <_sbrk_r>
 80052a4:	3001      	adds	r0, #1
 80052a6:	d101      	bne.n	80052ac <sbrk_aligned+0x38>
 80052a8:	f04f 34ff 	mov.w	r4, #4294967295
 80052ac:	4620      	mov	r0, r4
 80052ae:	bd70      	pop	{r4, r5, r6, pc}
 80052b0:	20000d28 	.word	0x20000d28

080052b4 <_malloc_r>:
 80052b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052b8:	1ccd      	adds	r5, r1, #3
 80052ba:	f025 0503 	bic.w	r5, r5, #3
 80052be:	3508      	adds	r5, #8
 80052c0:	2d0c      	cmp	r5, #12
 80052c2:	bf38      	it	cc
 80052c4:	250c      	movcc	r5, #12
 80052c6:	2d00      	cmp	r5, #0
 80052c8:	4607      	mov	r7, r0
 80052ca:	db01      	blt.n	80052d0 <_malloc_r+0x1c>
 80052cc:	42a9      	cmp	r1, r5
 80052ce:	d905      	bls.n	80052dc <_malloc_r+0x28>
 80052d0:	230c      	movs	r3, #12
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	2600      	movs	r6, #0
 80052d6:	4630      	mov	r0, r6
 80052d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052dc:	4e2e      	ldr	r6, [pc, #184]	; (8005398 <_malloc_r+0xe4>)
 80052de:	f000 ffb9 	bl	8006254 <__malloc_lock>
 80052e2:	6833      	ldr	r3, [r6, #0]
 80052e4:	461c      	mov	r4, r3
 80052e6:	bb34      	cbnz	r4, 8005336 <_malloc_r+0x82>
 80052e8:	4629      	mov	r1, r5
 80052ea:	4638      	mov	r0, r7
 80052ec:	f7ff ffc2 	bl	8005274 <sbrk_aligned>
 80052f0:	1c43      	adds	r3, r0, #1
 80052f2:	4604      	mov	r4, r0
 80052f4:	d14d      	bne.n	8005392 <_malloc_r+0xde>
 80052f6:	6834      	ldr	r4, [r6, #0]
 80052f8:	4626      	mov	r6, r4
 80052fa:	2e00      	cmp	r6, #0
 80052fc:	d140      	bne.n	8005380 <_malloc_r+0xcc>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	4631      	mov	r1, r6
 8005302:	4638      	mov	r0, r7
 8005304:	eb04 0803 	add.w	r8, r4, r3
 8005308:	f000 fc92 	bl	8005c30 <_sbrk_r>
 800530c:	4580      	cmp	r8, r0
 800530e:	d13a      	bne.n	8005386 <_malloc_r+0xd2>
 8005310:	6821      	ldr	r1, [r4, #0]
 8005312:	3503      	adds	r5, #3
 8005314:	1a6d      	subs	r5, r5, r1
 8005316:	f025 0503 	bic.w	r5, r5, #3
 800531a:	3508      	adds	r5, #8
 800531c:	2d0c      	cmp	r5, #12
 800531e:	bf38      	it	cc
 8005320:	250c      	movcc	r5, #12
 8005322:	4629      	mov	r1, r5
 8005324:	4638      	mov	r0, r7
 8005326:	f7ff ffa5 	bl	8005274 <sbrk_aligned>
 800532a:	3001      	adds	r0, #1
 800532c:	d02b      	beq.n	8005386 <_malloc_r+0xd2>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	442b      	add	r3, r5
 8005332:	6023      	str	r3, [r4, #0]
 8005334:	e00e      	b.n	8005354 <_malloc_r+0xa0>
 8005336:	6822      	ldr	r2, [r4, #0]
 8005338:	1b52      	subs	r2, r2, r5
 800533a:	d41e      	bmi.n	800537a <_malloc_r+0xc6>
 800533c:	2a0b      	cmp	r2, #11
 800533e:	d916      	bls.n	800536e <_malloc_r+0xba>
 8005340:	1961      	adds	r1, r4, r5
 8005342:	42a3      	cmp	r3, r4
 8005344:	6025      	str	r5, [r4, #0]
 8005346:	bf18      	it	ne
 8005348:	6059      	strne	r1, [r3, #4]
 800534a:	6863      	ldr	r3, [r4, #4]
 800534c:	bf08      	it	eq
 800534e:	6031      	streq	r1, [r6, #0]
 8005350:	5162      	str	r2, [r4, r5]
 8005352:	604b      	str	r3, [r1, #4]
 8005354:	4638      	mov	r0, r7
 8005356:	f104 060b 	add.w	r6, r4, #11
 800535a:	f000 ff81 	bl	8006260 <__malloc_unlock>
 800535e:	f026 0607 	bic.w	r6, r6, #7
 8005362:	1d23      	adds	r3, r4, #4
 8005364:	1af2      	subs	r2, r6, r3
 8005366:	d0b6      	beq.n	80052d6 <_malloc_r+0x22>
 8005368:	1b9b      	subs	r3, r3, r6
 800536a:	50a3      	str	r3, [r4, r2]
 800536c:	e7b3      	b.n	80052d6 <_malloc_r+0x22>
 800536e:	6862      	ldr	r2, [r4, #4]
 8005370:	42a3      	cmp	r3, r4
 8005372:	bf0c      	ite	eq
 8005374:	6032      	streq	r2, [r6, #0]
 8005376:	605a      	strne	r2, [r3, #4]
 8005378:	e7ec      	b.n	8005354 <_malloc_r+0xa0>
 800537a:	4623      	mov	r3, r4
 800537c:	6864      	ldr	r4, [r4, #4]
 800537e:	e7b2      	b.n	80052e6 <_malloc_r+0x32>
 8005380:	4634      	mov	r4, r6
 8005382:	6876      	ldr	r6, [r6, #4]
 8005384:	e7b9      	b.n	80052fa <_malloc_r+0x46>
 8005386:	230c      	movs	r3, #12
 8005388:	603b      	str	r3, [r7, #0]
 800538a:	4638      	mov	r0, r7
 800538c:	f000 ff68 	bl	8006260 <__malloc_unlock>
 8005390:	e7a1      	b.n	80052d6 <_malloc_r+0x22>
 8005392:	6025      	str	r5, [r4, #0]
 8005394:	e7de      	b.n	8005354 <_malloc_r+0xa0>
 8005396:	bf00      	nop
 8005398:	20000d24 	.word	0x20000d24

0800539c <__ssputs_r>:
 800539c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a0:	688e      	ldr	r6, [r1, #8]
 80053a2:	429e      	cmp	r6, r3
 80053a4:	4682      	mov	sl, r0
 80053a6:	460c      	mov	r4, r1
 80053a8:	4690      	mov	r8, r2
 80053aa:	461f      	mov	r7, r3
 80053ac:	d838      	bhi.n	8005420 <__ssputs_r+0x84>
 80053ae:	898a      	ldrh	r2, [r1, #12]
 80053b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053b4:	d032      	beq.n	800541c <__ssputs_r+0x80>
 80053b6:	6825      	ldr	r5, [r4, #0]
 80053b8:	6909      	ldr	r1, [r1, #16]
 80053ba:	eba5 0901 	sub.w	r9, r5, r1
 80053be:	6965      	ldr	r5, [r4, #20]
 80053c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053c8:	3301      	adds	r3, #1
 80053ca:	444b      	add	r3, r9
 80053cc:	106d      	asrs	r5, r5, #1
 80053ce:	429d      	cmp	r5, r3
 80053d0:	bf38      	it	cc
 80053d2:	461d      	movcc	r5, r3
 80053d4:	0553      	lsls	r3, r2, #21
 80053d6:	d531      	bpl.n	800543c <__ssputs_r+0xa0>
 80053d8:	4629      	mov	r1, r5
 80053da:	f7ff ff6b 	bl	80052b4 <_malloc_r>
 80053de:	4606      	mov	r6, r0
 80053e0:	b950      	cbnz	r0, 80053f8 <__ssputs_r+0x5c>
 80053e2:	230c      	movs	r3, #12
 80053e4:	f8ca 3000 	str.w	r3, [sl]
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053ee:	81a3      	strh	r3, [r4, #12]
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295
 80053f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f8:	6921      	ldr	r1, [r4, #16]
 80053fa:	464a      	mov	r2, r9
 80053fc:	f7ff fdfe 	bl	8004ffc <memcpy>
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800540a:	81a3      	strh	r3, [r4, #12]
 800540c:	6126      	str	r6, [r4, #16]
 800540e:	6165      	str	r5, [r4, #20]
 8005410:	444e      	add	r6, r9
 8005412:	eba5 0509 	sub.w	r5, r5, r9
 8005416:	6026      	str	r6, [r4, #0]
 8005418:	60a5      	str	r5, [r4, #8]
 800541a:	463e      	mov	r6, r7
 800541c:	42be      	cmp	r6, r7
 800541e:	d900      	bls.n	8005422 <__ssputs_r+0x86>
 8005420:	463e      	mov	r6, r7
 8005422:	6820      	ldr	r0, [r4, #0]
 8005424:	4632      	mov	r2, r6
 8005426:	4641      	mov	r1, r8
 8005428:	f000 fefa 	bl	8006220 <memmove>
 800542c:	68a3      	ldr	r3, [r4, #8]
 800542e:	1b9b      	subs	r3, r3, r6
 8005430:	60a3      	str	r3, [r4, #8]
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	4433      	add	r3, r6
 8005436:	6023      	str	r3, [r4, #0]
 8005438:	2000      	movs	r0, #0
 800543a:	e7db      	b.n	80053f4 <__ssputs_r+0x58>
 800543c:	462a      	mov	r2, r5
 800543e:	f000 ff15 	bl	800626c <_realloc_r>
 8005442:	4606      	mov	r6, r0
 8005444:	2800      	cmp	r0, #0
 8005446:	d1e1      	bne.n	800540c <__ssputs_r+0x70>
 8005448:	6921      	ldr	r1, [r4, #16]
 800544a:	4650      	mov	r0, sl
 800544c:	f7ff fec6 	bl	80051dc <_free_r>
 8005450:	e7c7      	b.n	80053e2 <__ssputs_r+0x46>
	...

08005454 <_svfiprintf_r>:
 8005454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005458:	4698      	mov	r8, r3
 800545a:	898b      	ldrh	r3, [r1, #12]
 800545c:	061b      	lsls	r3, r3, #24
 800545e:	b09d      	sub	sp, #116	; 0x74
 8005460:	4607      	mov	r7, r0
 8005462:	460d      	mov	r5, r1
 8005464:	4614      	mov	r4, r2
 8005466:	d50e      	bpl.n	8005486 <_svfiprintf_r+0x32>
 8005468:	690b      	ldr	r3, [r1, #16]
 800546a:	b963      	cbnz	r3, 8005486 <_svfiprintf_r+0x32>
 800546c:	2140      	movs	r1, #64	; 0x40
 800546e:	f7ff ff21 	bl	80052b4 <_malloc_r>
 8005472:	6028      	str	r0, [r5, #0]
 8005474:	6128      	str	r0, [r5, #16]
 8005476:	b920      	cbnz	r0, 8005482 <_svfiprintf_r+0x2e>
 8005478:	230c      	movs	r3, #12
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	f04f 30ff 	mov.w	r0, #4294967295
 8005480:	e0d1      	b.n	8005626 <_svfiprintf_r+0x1d2>
 8005482:	2340      	movs	r3, #64	; 0x40
 8005484:	616b      	str	r3, [r5, #20]
 8005486:	2300      	movs	r3, #0
 8005488:	9309      	str	r3, [sp, #36]	; 0x24
 800548a:	2320      	movs	r3, #32
 800548c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005490:	f8cd 800c 	str.w	r8, [sp, #12]
 8005494:	2330      	movs	r3, #48	; 0x30
 8005496:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005640 <_svfiprintf_r+0x1ec>
 800549a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800549e:	f04f 0901 	mov.w	r9, #1
 80054a2:	4623      	mov	r3, r4
 80054a4:	469a      	mov	sl, r3
 80054a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054aa:	b10a      	cbz	r2, 80054b0 <_svfiprintf_r+0x5c>
 80054ac:	2a25      	cmp	r2, #37	; 0x25
 80054ae:	d1f9      	bne.n	80054a4 <_svfiprintf_r+0x50>
 80054b0:	ebba 0b04 	subs.w	fp, sl, r4
 80054b4:	d00b      	beq.n	80054ce <_svfiprintf_r+0x7a>
 80054b6:	465b      	mov	r3, fp
 80054b8:	4622      	mov	r2, r4
 80054ba:	4629      	mov	r1, r5
 80054bc:	4638      	mov	r0, r7
 80054be:	f7ff ff6d 	bl	800539c <__ssputs_r>
 80054c2:	3001      	adds	r0, #1
 80054c4:	f000 80aa 	beq.w	800561c <_svfiprintf_r+0x1c8>
 80054c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054ca:	445a      	add	r2, fp
 80054cc:	9209      	str	r2, [sp, #36]	; 0x24
 80054ce:	f89a 3000 	ldrb.w	r3, [sl]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 80a2 	beq.w	800561c <_svfiprintf_r+0x1c8>
 80054d8:	2300      	movs	r3, #0
 80054da:	f04f 32ff 	mov.w	r2, #4294967295
 80054de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054e2:	f10a 0a01 	add.w	sl, sl, #1
 80054e6:	9304      	str	r3, [sp, #16]
 80054e8:	9307      	str	r3, [sp, #28]
 80054ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054ee:	931a      	str	r3, [sp, #104]	; 0x68
 80054f0:	4654      	mov	r4, sl
 80054f2:	2205      	movs	r2, #5
 80054f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054f8:	4851      	ldr	r0, [pc, #324]	; (8005640 <_svfiprintf_r+0x1ec>)
 80054fa:	f7fa fe79 	bl	80001f0 <memchr>
 80054fe:	9a04      	ldr	r2, [sp, #16]
 8005500:	b9d8      	cbnz	r0, 800553a <_svfiprintf_r+0xe6>
 8005502:	06d0      	lsls	r0, r2, #27
 8005504:	bf44      	itt	mi
 8005506:	2320      	movmi	r3, #32
 8005508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800550c:	0711      	lsls	r1, r2, #28
 800550e:	bf44      	itt	mi
 8005510:	232b      	movmi	r3, #43	; 0x2b
 8005512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005516:	f89a 3000 	ldrb.w	r3, [sl]
 800551a:	2b2a      	cmp	r3, #42	; 0x2a
 800551c:	d015      	beq.n	800554a <_svfiprintf_r+0xf6>
 800551e:	9a07      	ldr	r2, [sp, #28]
 8005520:	4654      	mov	r4, sl
 8005522:	2000      	movs	r0, #0
 8005524:	f04f 0c0a 	mov.w	ip, #10
 8005528:	4621      	mov	r1, r4
 800552a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800552e:	3b30      	subs	r3, #48	; 0x30
 8005530:	2b09      	cmp	r3, #9
 8005532:	d94e      	bls.n	80055d2 <_svfiprintf_r+0x17e>
 8005534:	b1b0      	cbz	r0, 8005564 <_svfiprintf_r+0x110>
 8005536:	9207      	str	r2, [sp, #28]
 8005538:	e014      	b.n	8005564 <_svfiprintf_r+0x110>
 800553a:	eba0 0308 	sub.w	r3, r0, r8
 800553e:	fa09 f303 	lsl.w	r3, r9, r3
 8005542:	4313      	orrs	r3, r2
 8005544:	9304      	str	r3, [sp, #16]
 8005546:	46a2      	mov	sl, r4
 8005548:	e7d2      	b.n	80054f0 <_svfiprintf_r+0x9c>
 800554a:	9b03      	ldr	r3, [sp, #12]
 800554c:	1d19      	adds	r1, r3, #4
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	9103      	str	r1, [sp, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	bfbb      	ittet	lt
 8005556:	425b      	neglt	r3, r3
 8005558:	f042 0202 	orrlt.w	r2, r2, #2
 800555c:	9307      	strge	r3, [sp, #28]
 800555e:	9307      	strlt	r3, [sp, #28]
 8005560:	bfb8      	it	lt
 8005562:	9204      	strlt	r2, [sp, #16]
 8005564:	7823      	ldrb	r3, [r4, #0]
 8005566:	2b2e      	cmp	r3, #46	; 0x2e
 8005568:	d10c      	bne.n	8005584 <_svfiprintf_r+0x130>
 800556a:	7863      	ldrb	r3, [r4, #1]
 800556c:	2b2a      	cmp	r3, #42	; 0x2a
 800556e:	d135      	bne.n	80055dc <_svfiprintf_r+0x188>
 8005570:	9b03      	ldr	r3, [sp, #12]
 8005572:	1d1a      	adds	r2, r3, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	9203      	str	r2, [sp, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	bfb8      	it	lt
 800557c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005580:	3402      	adds	r4, #2
 8005582:	9305      	str	r3, [sp, #20]
 8005584:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005650 <_svfiprintf_r+0x1fc>
 8005588:	7821      	ldrb	r1, [r4, #0]
 800558a:	2203      	movs	r2, #3
 800558c:	4650      	mov	r0, sl
 800558e:	f7fa fe2f 	bl	80001f0 <memchr>
 8005592:	b140      	cbz	r0, 80055a6 <_svfiprintf_r+0x152>
 8005594:	2340      	movs	r3, #64	; 0x40
 8005596:	eba0 000a 	sub.w	r0, r0, sl
 800559a:	fa03 f000 	lsl.w	r0, r3, r0
 800559e:	9b04      	ldr	r3, [sp, #16]
 80055a0:	4303      	orrs	r3, r0
 80055a2:	3401      	adds	r4, #1
 80055a4:	9304      	str	r3, [sp, #16]
 80055a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055aa:	4826      	ldr	r0, [pc, #152]	; (8005644 <_svfiprintf_r+0x1f0>)
 80055ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055b0:	2206      	movs	r2, #6
 80055b2:	f7fa fe1d 	bl	80001f0 <memchr>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d038      	beq.n	800562c <_svfiprintf_r+0x1d8>
 80055ba:	4b23      	ldr	r3, [pc, #140]	; (8005648 <_svfiprintf_r+0x1f4>)
 80055bc:	bb1b      	cbnz	r3, 8005606 <_svfiprintf_r+0x1b2>
 80055be:	9b03      	ldr	r3, [sp, #12]
 80055c0:	3307      	adds	r3, #7
 80055c2:	f023 0307 	bic.w	r3, r3, #7
 80055c6:	3308      	adds	r3, #8
 80055c8:	9303      	str	r3, [sp, #12]
 80055ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055cc:	4433      	add	r3, r6
 80055ce:	9309      	str	r3, [sp, #36]	; 0x24
 80055d0:	e767      	b.n	80054a2 <_svfiprintf_r+0x4e>
 80055d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80055d6:	460c      	mov	r4, r1
 80055d8:	2001      	movs	r0, #1
 80055da:	e7a5      	b.n	8005528 <_svfiprintf_r+0xd4>
 80055dc:	2300      	movs	r3, #0
 80055de:	3401      	adds	r4, #1
 80055e0:	9305      	str	r3, [sp, #20]
 80055e2:	4619      	mov	r1, r3
 80055e4:	f04f 0c0a 	mov.w	ip, #10
 80055e8:	4620      	mov	r0, r4
 80055ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055ee:	3a30      	subs	r2, #48	; 0x30
 80055f0:	2a09      	cmp	r2, #9
 80055f2:	d903      	bls.n	80055fc <_svfiprintf_r+0x1a8>
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0c5      	beq.n	8005584 <_svfiprintf_r+0x130>
 80055f8:	9105      	str	r1, [sp, #20]
 80055fa:	e7c3      	b.n	8005584 <_svfiprintf_r+0x130>
 80055fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005600:	4604      	mov	r4, r0
 8005602:	2301      	movs	r3, #1
 8005604:	e7f0      	b.n	80055e8 <_svfiprintf_r+0x194>
 8005606:	ab03      	add	r3, sp, #12
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	462a      	mov	r2, r5
 800560c:	4b0f      	ldr	r3, [pc, #60]	; (800564c <_svfiprintf_r+0x1f8>)
 800560e:	a904      	add	r1, sp, #16
 8005610:	4638      	mov	r0, r7
 8005612:	f3af 8000 	nop.w
 8005616:	1c42      	adds	r2, r0, #1
 8005618:	4606      	mov	r6, r0
 800561a:	d1d6      	bne.n	80055ca <_svfiprintf_r+0x176>
 800561c:	89ab      	ldrh	r3, [r5, #12]
 800561e:	065b      	lsls	r3, r3, #25
 8005620:	f53f af2c 	bmi.w	800547c <_svfiprintf_r+0x28>
 8005624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005626:	b01d      	add	sp, #116	; 0x74
 8005628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800562c:	ab03      	add	r3, sp, #12
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	462a      	mov	r2, r5
 8005632:	4b06      	ldr	r3, [pc, #24]	; (800564c <_svfiprintf_r+0x1f8>)
 8005634:	a904      	add	r1, sp, #16
 8005636:	4638      	mov	r0, r7
 8005638:	f000 f9d4 	bl	80059e4 <_printf_i>
 800563c:	e7eb      	b.n	8005616 <_svfiprintf_r+0x1c2>
 800563e:	bf00      	nop
 8005640:	080066b4 	.word	0x080066b4
 8005644:	080066be 	.word	0x080066be
 8005648:	00000000 	.word	0x00000000
 800564c:	0800539d 	.word	0x0800539d
 8005650:	080066ba 	.word	0x080066ba

08005654 <__sfputc_r>:
 8005654:	6893      	ldr	r3, [r2, #8]
 8005656:	3b01      	subs	r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	b410      	push	{r4}
 800565c:	6093      	str	r3, [r2, #8]
 800565e:	da08      	bge.n	8005672 <__sfputc_r+0x1e>
 8005660:	6994      	ldr	r4, [r2, #24]
 8005662:	42a3      	cmp	r3, r4
 8005664:	db01      	blt.n	800566a <__sfputc_r+0x16>
 8005666:	290a      	cmp	r1, #10
 8005668:	d103      	bne.n	8005672 <__sfputc_r+0x1e>
 800566a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800566e:	f000 baef 	b.w	8005c50 <__swbuf_r>
 8005672:	6813      	ldr	r3, [r2, #0]
 8005674:	1c58      	adds	r0, r3, #1
 8005676:	6010      	str	r0, [r2, #0]
 8005678:	7019      	strb	r1, [r3, #0]
 800567a:	4608      	mov	r0, r1
 800567c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005680:	4770      	bx	lr

08005682 <__sfputs_r>:
 8005682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005684:	4606      	mov	r6, r0
 8005686:	460f      	mov	r7, r1
 8005688:	4614      	mov	r4, r2
 800568a:	18d5      	adds	r5, r2, r3
 800568c:	42ac      	cmp	r4, r5
 800568e:	d101      	bne.n	8005694 <__sfputs_r+0x12>
 8005690:	2000      	movs	r0, #0
 8005692:	e007      	b.n	80056a4 <__sfputs_r+0x22>
 8005694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005698:	463a      	mov	r2, r7
 800569a:	4630      	mov	r0, r6
 800569c:	f7ff ffda 	bl	8005654 <__sfputc_r>
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d1f3      	bne.n	800568c <__sfputs_r+0xa>
 80056a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056a8 <_vfiprintf_r>:
 80056a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ac:	460d      	mov	r5, r1
 80056ae:	b09d      	sub	sp, #116	; 0x74
 80056b0:	4614      	mov	r4, r2
 80056b2:	4698      	mov	r8, r3
 80056b4:	4606      	mov	r6, r0
 80056b6:	b118      	cbz	r0, 80056c0 <_vfiprintf_r+0x18>
 80056b8:	6983      	ldr	r3, [r0, #24]
 80056ba:	b90b      	cbnz	r3, 80056c0 <_vfiprintf_r+0x18>
 80056bc:	f000 fcaa 	bl	8006014 <__sinit>
 80056c0:	4b89      	ldr	r3, [pc, #548]	; (80058e8 <_vfiprintf_r+0x240>)
 80056c2:	429d      	cmp	r5, r3
 80056c4:	d11b      	bne.n	80056fe <_vfiprintf_r+0x56>
 80056c6:	6875      	ldr	r5, [r6, #4]
 80056c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056ca:	07d9      	lsls	r1, r3, #31
 80056cc:	d405      	bmi.n	80056da <_vfiprintf_r+0x32>
 80056ce:	89ab      	ldrh	r3, [r5, #12]
 80056d0:	059a      	lsls	r2, r3, #22
 80056d2:	d402      	bmi.n	80056da <_vfiprintf_r+0x32>
 80056d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056d6:	f000 fd3b 	bl	8006150 <__retarget_lock_acquire_recursive>
 80056da:	89ab      	ldrh	r3, [r5, #12]
 80056dc:	071b      	lsls	r3, r3, #28
 80056de:	d501      	bpl.n	80056e4 <_vfiprintf_r+0x3c>
 80056e0:	692b      	ldr	r3, [r5, #16]
 80056e2:	b9eb      	cbnz	r3, 8005720 <_vfiprintf_r+0x78>
 80056e4:	4629      	mov	r1, r5
 80056e6:	4630      	mov	r0, r6
 80056e8:	f000 fb04 	bl	8005cf4 <__swsetup_r>
 80056ec:	b1c0      	cbz	r0, 8005720 <_vfiprintf_r+0x78>
 80056ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056f0:	07dc      	lsls	r4, r3, #31
 80056f2:	d50e      	bpl.n	8005712 <_vfiprintf_r+0x6a>
 80056f4:	f04f 30ff 	mov.w	r0, #4294967295
 80056f8:	b01d      	add	sp, #116	; 0x74
 80056fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056fe:	4b7b      	ldr	r3, [pc, #492]	; (80058ec <_vfiprintf_r+0x244>)
 8005700:	429d      	cmp	r5, r3
 8005702:	d101      	bne.n	8005708 <_vfiprintf_r+0x60>
 8005704:	68b5      	ldr	r5, [r6, #8]
 8005706:	e7df      	b.n	80056c8 <_vfiprintf_r+0x20>
 8005708:	4b79      	ldr	r3, [pc, #484]	; (80058f0 <_vfiprintf_r+0x248>)
 800570a:	429d      	cmp	r5, r3
 800570c:	bf08      	it	eq
 800570e:	68f5      	ldreq	r5, [r6, #12]
 8005710:	e7da      	b.n	80056c8 <_vfiprintf_r+0x20>
 8005712:	89ab      	ldrh	r3, [r5, #12]
 8005714:	0598      	lsls	r0, r3, #22
 8005716:	d4ed      	bmi.n	80056f4 <_vfiprintf_r+0x4c>
 8005718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800571a:	f000 fd1a 	bl	8006152 <__retarget_lock_release_recursive>
 800571e:	e7e9      	b.n	80056f4 <_vfiprintf_r+0x4c>
 8005720:	2300      	movs	r3, #0
 8005722:	9309      	str	r3, [sp, #36]	; 0x24
 8005724:	2320      	movs	r3, #32
 8005726:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800572a:	f8cd 800c 	str.w	r8, [sp, #12]
 800572e:	2330      	movs	r3, #48	; 0x30
 8005730:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80058f4 <_vfiprintf_r+0x24c>
 8005734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005738:	f04f 0901 	mov.w	r9, #1
 800573c:	4623      	mov	r3, r4
 800573e:	469a      	mov	sl, r3
 8005740:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005744:	b10a      	cbz	r2, 800574a <_vfiprintf_r+0xa2>
 8005746:	2a25      	cmp	r2, #37	; 0x25
 8005748:	d1f9      	bne.n	800573e <_vfiprintf_r+0x96>
 800574a:	ebba 0b04 	subs.w	fp, sl, r4
 800574e:	d00b      	beq.n	8005768 <_vfiprintf_r+0xc0>
 8005750:	465b      	mov	r3, fp
 8005752:	4622      	mov	r2, r4
 8005754:	4629      	mov	r1, r5
 8005756:	4630      	mov	r0, r6
 8005758:	f7ff ff93 	bl	8005682 <__sfputs_r>
 800575c:	3001      	adds	r0, #1
 800575e:	f000 80aa 	beq.w	80058b6 <_vfiprintf_r+0x20e>
 8005762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005764:	445a      	add	r2, fp
 8005766:	9209      	str	r2, [sp, #36]	; 0x24
 8005768:	f89a 3000 	ldrb.w	r3, [sl]
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 80a2 	beq.w	80058b6 <_vfiprintf_r+0x20e>
 8005772:	2300      	movs	r3, #0
 8005774:	f04f 32ff 	mov.w	r2, #4294967295
 8005778:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800577c:	f10a 0a01 	add.w	sl, sl, #1
 8005780:	9304      	str	r3, [sp, #16]
 8005782:	9307      	str	r3, [sp, #28]
 8005784:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005788:	931a      	str	r3, [sp, #104]	; 0x68
 800578a:	4654      	mov	r4, sl
 800578c:	2205      	movs	r2, #5
 800578e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005792:	4858      	ldr	r0, [pc, #352]	; (80058f4 <_vfiprintf_r+0x24c>)
 8005794:	f7fa fd2c 	bl	80001f0 <memchr>
 8005798:	9a04      	ldr	r2, [sp, #16]
 800579a:	b9d8      	cbnz	r0, 80057d4 <_vfiprintf_r+0x12c>
 800579c:	06d1      	lsls	r1, r2, #27
 800579e:	bf44      	itt	mi
 80057a0:	2320      	movmi	r3, #32
 80057a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057a6:	0713      	lsls	r3, r2, #28
 80057a8:	bf44      	itt	mi
 80057aa:	232b      	movmi	r3, #43	; 0x2b
 80057ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057b0:	f89a 3000 	ldrb.w	r3, [sl]
 80057b4:	2b2a      	cmp	r3, #42	; 0x2a
 80057b6:	d015      	beq.n	80057e4 <_vfiprintf_r+0x13c>
 80057b8:	9a07      	ldr	r2, [sp, #28]
 80057ba:	4654      	mov	r4, sl
 80057bc:	2000      	movs	r0, #0
 80057be:	f04f 0c0a 	mov.w	ip, #10
 80057c2:	4621      	mov	r1, r4
 80057c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057c8:	3b30      	subs	r3, #48	; 0x30
 80057ca:	2b09      	cmp	r3, #9
 80057cc:	d94e      	bls.n	800586c <_vfiprintf_r+0x1c4>
 80057ce:	b1b0      	cbz	r0, 80057fe <_vfiprintf_r+0x156>
 80057d0:	9207      	str	r2, [sp, #28]
 80057d2:	e014      	b.n	80057fe <_vfiprintf_r+0x156>
 80057d4:	eba0 0308 	sub.w	r3, r0, r8
 80057d8:	fa09 f303 	lsl.w	r3, r9, r3
 80057dc:	4313      	orrs	r3, r2
 80057de:	9304      	str	r3, [sp, #16]
 80057e0:	46a2      	mov	sl, r4
 80057e2:	e7d2      	b.n	800578a <_vfiprintf_r+0xe2>
 80057e4:	9b03      	ldr	r3, [sp, #12]
 80057e6:	1d19      	adds	r1, r3, #4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	9103      	str	r1, [sp, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bfbb      	ittet	lt
 80057f0:	425b      	neglt	r3, r3
 80057f2:	f042 0202 	orrlt.w	r2, r2, #2
 80057f6:	9307      	strge	r3, [sp, #28]
 80057f8:	9307      	strlt	r3, [sp, #28]
 80057fa:	bfb8      	it	lt
 80057fc:	9204      	strlt	r2, [sp, #16]
 80057fe:	7823      	ldrb	r3, [r4, #0]
 8005800:	2b2e      	cmp	r3, #46	; 0x2e
 8005802:	d10c      	bne.n	800581e <_vfiprintf_r+0x176>
 8005804:	7863      	ldrb	r3, [r4, #1]
 8005806:	2b2a      	cmp	r3, #42	; 0x2a
 8005808:	d135      	bne.n	8005876 <_vfiprintf_r+0x1ce>
 800580a:	9b03      	ldr	r3, [sp, #12]
 800580c:	1d1a      	adds	r2, r3, #4
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	9203      	str	r2, [sp, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	bfb8      	it	lt
 8005816:	f04f 33ff 	movlt.w	r3, #4294967295
 800581a:	3402      	adds	r4, #2
 800581c:	9305      	str	r3, [sp, #20]
 800581e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005904 <_vfiprintf_r+0x25c>
 8005822:	7821      	ldrb	r1, [r4, #0]
 8005824:	2203      	movs	r2, #3
 8005826:	4650      	mov	r0, sl
 8005828:	f7fa fce2 	bl	80001f0 <memchr>
 800582c:	b140      	cbz	r0, 8005840 <_vfiprintf_r+0x198>
 800582e:	2340      	movs	r3, #64	; 0x40
 8005830:	eba0 000a 	sub.w	r0, r0, sl
 8005834:	fa03 f000 	lsl.w	r0, r3, r0
 8005838:	9b04      	ldr	r3, [sp, #16]
 800583a:	4303      	orrs	r3, r0
 800583c:	3401      	adds	r4, #1
 800583e:	9304      	str	r3, [sp, #16]
 8005840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005844:	482c      	ldr	r0, [pc, #176]	; (80058f8 <_vfiprintf_r+0x250>)
 8005846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800584a:	2206      	movs	r2, #6
 800584c:	f7fa fcd0 	bl	80001f0 <memchr>
 8005850:	2800      	cmp	r0, #0
 8005852:	d03f      	beq.n	80058d4 <_vfiprintf_r+0x22c>
 8005854:	4b29      	ldr	r3, [pc, #164]	; (80058fc <_vfiprintf_r+0x254>)
 8005856:	bb1b      	cbnz	r3, 80058a0 <_vfiprintf_r+0x1f8>
 8005858:	9b03      	ldr	r3, [sp, #12]
 800585a:	3307      	adds	r3, #7
 800585c:	f023 0307 	bic.w	r3, r3, #7
 8005860:	3308      	adds	r3, #8
 8005862:	9303      	str	r3, [sp, #12]
 8005864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005866:	443b      	add	r3, r7
 8005868:	9309      	str	r3, [sp, #36]	; 0x24
 800586a:	e767      	b.n	800573c <_vfiprintf_r+0x94>
 800586c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005870:	460c      	mov	r4, r1
 8005872:	2001      	movs	r0, #1
 8005874:	e7a5      	b.n	80057c2 <_vfiprintf_r+0x11a>
 8005876:	2300      	movs	r3, #0
 8005878:	3401      	adds	r4, #1
 800587a:	9305      	str	r3, [sp, #20]
 800587c:	4619      	mov	r1, r3
 800587e:	f04f 0c0a 	mov.w	ip, #10
 8005882:	4620      	mov	r0, r4
 8005884:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005888:	3a30      	subs	r2, #48	; 0x30
 800588a:	2a09      	cmp	r2, #9
 800588c:	d903      	bls.n	8005896 <_vfiprintf_r+0x1ee>
 800588e:	2b00      	cmp	r3, #0
 8005890:	d0c5      	beq.n	800581e <_vfiprintf_r+0x176>
 8005892:	9105      	str	r1, [sp, #20]
 8005894:	e7c3      	b.n	800581e <_vfiprintf_r+0x176>
 8005896:	fb0c 2101 	mla	r1, ip, r1, r2
 800589a:	4604      	mov	r4, r0
 800589c:	2301      	movs	r3, #1
 800589e:	e7f0      	b.n	8005882 <_vfiprintf_r+0x1da>
 80058a0:	ab03      	add	r3, sp, #12
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	462a      	mov	r2, r5
 80058a6:	4b16      	ldr	r3, [pc, #88]	; (8005900 <_vfiprintf_r+0x258>)
 80058a8:	a904      	add	r1, sp, #16
 80058aa:	4630      	mov	r0, r6
 80058ac:	f3af 8000 	nop.w
 80058b0:	4607      	mov	r7, r0
 80058b2:	1c78      	adds	r0, r7, #1
 80058b4:	d1d6      	bne.n	8005864 <_vfiprintf_r+0x1bc>
 80058b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058b8:	07d9      	lsls	r1, r3, #31
 80058ba:	d405      	bmi.n	80058c8 <_vfiprintf_r+0x220>
 80058bc:	89ab      	ldrh	r3, [r5, #12]
 80058be:	059a      	lsls	r2, r3, #22
 80058c0:	d402      	bmi.n	80058c8 <_vfiprintf_r+0x220>
 80058c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058c4:	f000 fc45 	bl	8006152 <__retarget_lock_release_recursive>
 80058c8:	89ab      	ldrh	r3, [r5, #12]
 80058ca:	065b      	lsls	r3, r3, #25
 80058cc:	f53f af12 	bmi.w	80056f4 <_vfiprintf_r+0x4c>
 80058d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058d2:	e711      	b.n	80056f8 <_vfiprintf_r+0x50>
 80058d4:	ab03      	add	r3, sp, #12
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	462a      	mov	r2, r5
 80058da:	4b09      	ldr	r3, [pc, #36]	; (8005900 <_vfiprintf_r+0x258>)
 80058dc:	a904      	add	r1, sp, #16
 80058de:	4630      	mov	r0, r6
 80058e0:	f000 f880 	bl	80059e4 <_printf_i>
 80058e4:	e7e4      	b.n	80058b0 <_vfiprintf_r+0x208>
 80058e6:	bf00      	nop
 80058e8:	08006708 	.word	0x08006708
 80058ec:	08006728 	.word	0x08006728
 80058f0:	080066e8 	.word	0x080066e8
 80058f4:	080066b4 	.word	0x080066b4
 80058f8:	080066be 	.word	0x080066be
 80058fc:	00000000 	.word	0x00000000
 8005900:	08005683 	.word	0x08005683
 8005904:	080066ba 	.word	0x080066ba

08005908 <_printf_common>:
 8005908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800590c:	4616      	mov	r6, r2
 800590e:	4699      	mov	r9, r3
 8005910:	688a      	ldr	r2, [r1, #8]
 8005912:	690b      	ldr	r3, [r1, #16]
 8005914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005918:	4293      	cmp	r3, r2
 800591a:	bfb8      	it	lt
 800591c:	4613      	movlt	r3, r2
 800591e:	6033      	str	r3, [r6, #0]
 8005920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005924:	4607      	mov	r7, r0
 8005926:	460c      	mov	r4, r1
 8005928:	b10a      	cbz	r2, 800592e <_printf_common+0x26>
 800592a:	3301      	adds	r3, #1
 800592c:	6033      	str	r3, [r6, #0]
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	0699      	lsls	r1, r3, #26
 8005932:	bf42      	ittt	mi
 8005934:	6833      	ldrmi	r3, [r6, #0]
 8005936:	3302      	addmi	r3, #2
 8005938:	6033      	strmi	r3, [r6, #0]
 800593a:	6825      	ldr	r5, [r4, #0]
 800593c:	f015 0506 	ands.w	r5, r5, #6
 8005940:	d106      	bne.n	8005950 <_printf_common+0x48>
 8005942:	f104 0a19 	add.w	sl, r4, #25
 8005946:	68e3      	ldr	r3, [r4, #12]
 8005948:	6832      	ldr	r2, [r6, #0]
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	42ab      	cmp	r3, r5
 800594e:	dc26      	bgt.n	800599e <_printf_common+0x96>
 8005950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005954:	1e13      	subs	r3, r2, #0
 8005956:	6822      	ldr	r2, [r4, #0]
 8005958:	bf18      	it	ne
 800595a:	2301      	movne	r3, #1
 800595c:	0692      	lsls	r2, r2, #26
 800595e:	d42b      	bmi.n	80059b8 <_printf_common+0xb0>
 8005960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005964:	4649      	mov	r1, r9
 8005966:	4638      	mov	r0, r7
 8005968:	47c0      	blx	r8
 800596a:	3001      	adds	r0, #1
 800596c:	d01e      	beq.n	80059ac <_printf_common+0xa4>
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	68e5      	ldr	r5, [r4, #12]
 8005972:	6832      	ldr	r2, [r6, #0]
 8005974:	f003 0306 	and.w	r3, r3, #6
 8005978:	2b04      	cmp	r3, #4
 800597a:	bf08      	it	eq
 800597c:	1aad      	subeq	r5, r5, r2
 800597e:	68a3      	ldr	r3, [r4, #8]
 8005980:	6922      	ldr	r2, [r4, #16]
 8005982:	bf0c      	ite	eq
 8005984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005988:	2500      	movne	r5, #0
 800598a:	4293      	cmp	r3, r2
 800598c:	bfc4      	itt	gt
 800598e:	1a9b      	subgt	r3, r3, r2
 8005990:	18ed      	addgt	r5, r5, r3
 8005992:	2600      	movs	r6, #0
 8005994:	341a      	adds	r4, #26
 8005996:	42b5      	cmp	r5, r6
 8005998:	d11a      	bne.n	80059d0 <_printf_common+0xc8>
 800599a:	2000      	movs	r0, #0
 800599c:	e008      	b.n	80059b0 <_printf_common+0xa8>
 800599e:	2301      	movs	r3, #1
 80059a0:	4652      	mov	r2, sl
 80059a2:	4649      	mov	r1, r9
 80059a4:	4638      	mov	r0, r7
 80059a6:	47c0      	blx	r8
 80059a8:	3001      	adds	r0, #1
 80059aa:	d103      	bne.n	80059b4 <_printf_common+0xac>
 80059ac:	f04f 30ff 	mov.w	r0, #4294967295
 80059b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b4:	3501      	adds	r5, #1
 80059b6:	e7c6      	b.n	8005946 <_printf_common+0x3e>
 80059b8:	18e1      	adds	r1, r4, r3
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	2030      	movs	r0, #48	; 0x30
 80059be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059c2:	4422      	add	r2, r4
 80059c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059cc:	3302      	adds	r3, #2
 80059ce:	e7c7      	b.n	8005960 <_printf_common+0x58>
 80059d0:	2301      	movs	r3, #1
 80059d2:	4622      	mov	r2, r4
 80059d4:	4649      	mov	r1, r9
 80059d6:	4638      	mov	r0, r7
 80059d8:	47c0      	blx	r8
 80059da:	3001      	adds	r0, #1
 80059dc:	d0e6      	beq.n	80059ac <_printf_common+0xa4>
 80059de:	3601      	adds	r6, #1
 80059e0:	e7d9      	b.n	8005996 <_printf_common+0x8e>
	...

080059e4 <_printf_i>:
 80059e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059e8:	7e0f      	ldrb	r7, [r1, #24]
 80059ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059ec:	2f78      	cmp	r7, #120	; 0x78
 80059ee:	4691      	mov	r9, r2
 80059f0:	4680      	mov	r8, r0
 80059f2:	460c      	mov	r4, r1
 80059f4:	469a      	mov	sl, r3
 80059f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059fa:	d807      	bhi.n	8005a0c <_printf_i+0x28>
 80059fc:	2f62      	cmp	r7, #98	; 0x62
 80059fe:	d80a      	bhi.n	8005a16 <_printf_i+0x32>
 8005a00:	2f00      	cmp	r7, #0
 8005a02:	f000 80d8 	beq.w	8005bb6 <_printf_i+0x1d2>
 8005a06:	2f58      	cmp	r7, #88	; 0x58
 8005a08:	f000 80a3 	beq.w	8005b52 <_printf_i+0x16e>
 8005a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a14:	e03a      	b.n	8005a8c <_printf_i+0xa8>
 8005a16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a1a:	2b15      	cmp	r3, #21
 8005a1c:	d8f6      	bhi.n	8005a0c <_printf_i+0x28>
 8005a1e:	a101      	add	r1, pc, #4	; (adr r1, 8005a24 <_printf_i+0x40>)
 8005a20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a24:	08005a7d 	.word	0x08005a7d
 8005a28:	08005a91 	.word	0x08005a91
 8005a2c:	08005a0d 	.word	0x08005a0d
 8005a30:	08005a0d 	.word	0x08005a0d
 8005a34:	08005a0d 	.word	0x08005a0d
 8005a38:	08005a0d 	.word	0x08005a0d
 8005a3c:	08005a91 	.word	0x08005a91
 8005a40:	08005a0d 	.word	0x08005a0d
 8005a44:	08005a0d 	.word	0x08005a0d
 8005a48:	08005a0d 	.word	0x08005a0d
 8005a4c:	08005a0d 	.word	0x08005a0d
 8005a50:	08005b9d 	.word	0x08005b9d
 8005a54:	08005ac1 	.word	0x08005ac1
 8005a58:	08005b7f 	.word	0x08005b7f
 8005a5c:	08005a0d 	.word	0x08005a0d
 8005a60:	08005a0d 	.word	0x08005a0d
 8005a64:	08005bbf 	.word	0x08005bbf
 8005a68:	08005a0d 	.word	0x08005a0d
 8005a6c:	08005ac1 	.word	0x08005ac1
 8005a70:	08005a0d 	.word	0x08005a0d
 8005a74:	08005a0d 	.word	0x08005a0d
 8005a78:	08005b87 	.word	0x08005b87
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	1d1a      	adds	r2, r3, #4
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	602a      	str	r2, [r5, #0]
 8005a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e0a3      	b.n	8005bd8 <_printf_i+0x1f4>
 8005a90:	6820      	ldr	r0, [r4, #0]
 8005a92:	6829      	ldr	r1, [r5, #0]
 8005a94:	0606      	lsls	r6, r0, #24
 8005a96:	f101 0304 	add.w	r3, r1, #4
 8005a9a:	d50a      	bpl.n	8005ab2 <_printf_i+0xce>
 8005a9c:	680e      	ldr	r6, [r1, #0]
 8005a9e:	602b      	str	r3, [r5, #0]
 8005aa0:	2e00      	cmp	r6, #0
 8005aa2:	da03      	bge.n	8005aac <_printf_i+0xc8>
 8005aa4:	232d      	movs	r3, #45	; 0x2d
 8005aa6:	4276      	negs	r6, r6
 8005aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aac:	485e      	ldr	r0, [pc, #376]	; (8005c28 <_printf_i+0x244>)
 8005aae:	230a      	movs	r3, #10
 8005ab0:	e019      	b.n	8005ae6 <_printf_i+0x102>
 8005ab2:	680e      	ldr	r6, [r1, #0]
 8005ab4:	602b      	str	r3, [r5, #0]
 8005ab6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005aba:	bf18      	it	ne
 8005abc:	b236      	sxthne	r6, r6
 8005abe:	e7ef      	b.n	8005aa0 <_printf_i+0xbc>
 8005ac0:	682b      	ldr	r3, [r5, #0]
 8005ac2:	6820      	ldr	r0, [r4, #0]
 8005ac4:	1d19      	adds	r1, r3, #4
 8005ac6:	6029      	str	r1, [r5, #0]
 8005ac8:	0601      	lsls	r1, r0, #24
 8005aca:	d501      	bpl.n	8005ad0 <_printf_i+0xec>
 8005acc:	681e      	ldr	r6, [r3, #0]
 8005ace:	e002      	b.n	8005ad6 <_printf_i+0xf2>
 8005ad0:	0646      	lsls	r6, r0, #25
 8005ad2:	d5fb      	bpl.n	8005acc <_printf_i+0xe8>
 8005ad4:	881e      	ldrh	r6, [r3, #0]
 8005ad6:	4854      	ldr	r0, [pc, #336]	; (8005c28 <_printf_i+0x244>)
 8005ad8:	2f6f      	cmp	r7, #111	; 0x6f
 8005ada:	bf0c      	ite	eq
 8005adc:	2308      	moveq	r3, #8
 8005ade:	230a      	movne	r3, #10
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ae6:	6865      	ldr	r5, [r4, #4]
 8005ae8:	60a5      	str	r5, [r4, #8]
 8005aea:	2d00      	cmp	r5, #0
 8005aec:	bfa2      	ittt	ge
 8005aee:	6821      	ldrge	r1, [r4, #0]
 8005af0:	f021 0104 	bicge.w	r1, r1, #4
 8005af4:	6021      	strge	r1, [r4, #0]
 8005af6:	b90e      	cbnz	r6, 8005afc <_printf_i+0x118>
 8005af8:	2d00      	cmp	r5, #0
 8005afa:	d04d      	beq.n	8005b98 <_printf_i+0x1b4>
 8005afc:	4615      	mov	r5, r2
 8005afe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b02:	fb03 6711 	mls	r7, r3, r1, r6
 8005b06:	5dc7      	ldrb	r7, [r0, r7]
 8005b08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b0c:	4637      	mov	r7, r6
 8005b0e:	42bb      	cmp	r3, r7
 8005b10:	460e      	mov	r6, r1
 8005b12:	d9f4      	bls.n	8005afe <_printf_i+0x11a>
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d10b      	bne.n	8005b30 <_printf_i+0x14c>
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	07de      	lsls	r6, r3, #31
 8005b1c:	d508      	bpl.n	8005b30 <_printf_i+0x14c>
 8005b1e:	6923      	ldr	r3, [r4, #16]
 8005b20:	6861      	ldr	r1, [r4, #4]
 8005b22:	4299      	cmp	r1, r3
 8005b24:	bfde      	ittt	le
 8005b26:	2330      	movle	r3, #48	; 0x30
 8005b28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b30:	1b52      	subs	r2, r2, r5
 8005b32:	6122      	str	r2, [r4, #16]
 8005b34:	f8cd a000 	str.w	sl, [sp]
 8005b38:	464b      	mov	r3, r9
 8005b3a:	aa03      	add	r2, sp, #12
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	4640      	mov	r0, r8
 8005b40:	f7ff fee2 	bl	8005908 <_printf_common>
 8005b44:	3001      	adds	r0, #1
 8005b46:	d14c      	bne.n	8005be2 <_printf_i+0x1fe>
 8005b48:	f04f 30ff 	mov.w	r0, #4294967295
 8005b4c:	b004      	add	sp, #16
 8005b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b52:	4835      	ldr	r0, [pc, #212]	; (8005c28 <_printf_i+0x244>)
 8005b54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b58:	6829      	ldr	r1, [r5, #0]
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b60:	6029      	str	r1, [r5, #0]
 8005b62:	061d      	lsls	r5, r3, #24
 8005b64:	d514      	bpl.n	8005b90 <_printf_i+0x1ac>
 8005b66:	07df      	lsls	r7, r3, #31
 8005b68:	bf44      	itt	mi
 8005b6a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b6e:	6023      	strmi	r3, [r4, #0]
 8005b70:	b91e      	cbnz	r6, 8005b7a <_printf_i+0x196>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	f023 0320 	bic.w	r3, r3, #32
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	2310      	movs	r3, #16
 8005b7c:	e7b0      	b.n	8005ae0 <_printf_i+0xfc>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	f043 0320 	orr.w	r3, r3, #32
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	2378      	movs	r3, #120	; 0x78
 8005b88:	4828      	ldr	r0, [pc, #160]	; (8005c2c <_printf_i+0x248>)
 8005b8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b8e:	e7e3      	b.n	8005b58 <_printf_i+0x174>
 8005b90:	0659      	lsls	r1, r3, #25
 8005b92:	bf48      	it	mi
 8005b94:	b2b6      	uxthmi	r6, r6
 8005b96:	e7e6      	b.n	8005b66 <_printf_i+0x182>
 8005b98:	4615      	mov	r5, r2
 8005b9a:	e7bb      	b.n	8005b14 <_printf_i+0x130>
 8005b9c:	682b      	ldr	r3, [r5, #0]
 8005b9e:	6826      	ldr	r6, [r4, #0]
 8005ba0:	6961      	ldr	r1, [r4, #20]
 8005ba2:	1d18      	adds	r0, r3, #4
 8005ba4:	6028      	str	r0, [r5, #0]
 8005ba6:	0635      	lsls	r5, r6, #24
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	d501      	bpl.n	8005bb0 <_printf_i+0x1cc>
 8005bac:	6019      	str	r1, [r3, #0]
 8005bae:	e002      	b.n	8005bb6 <_printf_i+0x1d2>
 8005bb0:	0670      	lsls	r0, r6, #25
 8005bb2:	d5fb      	bpl.n	8005bac <_printf_i+0x1c8>
 8005bb4:	8019      	strh	r1, [r3, #0]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	6123      	str	r3, [r4, #16]
 8005bba:	4615      	mov	r5, r2
 8005bbc:	e7ba      	b.n	8005b34 <_printf_i+0x150>
 8005bbe:	682b      	ldr	r3, [r5, #0]
 8005bc0:	1d1a      	adds	r2, r3, #4
 8005bc2:	602a      	str	r2, [r5, #0]
 8005bc4:	681d      	ldr	r5, [r3, #0]
 8005bc6:	6862      	ldr	r2, [r4, #4]
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4628      	mov	r0, r5
 8005bcc:	f7fa fb10 	bl	80001f0 <memchr>
 8005bd0:	b108      	cbz	r0, 8005bd6 <_printf_i+0x1f2>
 8005bd2:	1b40      	subs	r0, r0, r5
 8005bd4:	6060      	str	r0, [r4, #4]
 8005bd6:	6863      	ldr	r3, [r4, #4]
 8005bd8:	6123      	str	r3, [r4, #16]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005be0:	e7a8      	b.n	8005b34 <_printf_i+0x150>
 8005be2:	6923      	ldr	r3, [r4, #16]
 8005be4:	462a      	mov	r2, r5
 8005be6:	4649      	mov	r1, r9
 8005be8:	4640      	mov	r0, r8
 8005bea:	47d0      	blx	sl
 8005bec:	3001      	adds	r0, #1
 8005bee:	d0ab      	beq.n	8005b48 <_printf_i+0x164>
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	079b      	lsls	r3, r3, #30
 8005bf4:	d413      	bmi.n	8005c1e <_printf_i+0x23a>
 8005bf6:	68e0      	ldr	r0, [r4, #12]
 8005bf8:	9b03      	ldr	r3, [sp, #12]
 8005bfa:	4298      	cmp	r0, r3
 8005bfc:	bfb8      	it	lt
 8005bfe:	4618      	movlt	r0, r3
 8005c00:	e7a4      	b.n	8005b4c <_printf_i+0x168>
 8005c02:	2301      	movs	r3, #1
 8005c04:	4632      	mov	r2, r6
 8005c06:	4649      	mov	r1, r9
 8005c08:	4640      	mov	r0, r8
 8005c0a:	47d0      	blx	sl
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d09b      	beq.n	8005b48 <_printf_i+0x164>
 8005c10:	3501      	adds	r5, #1
 8005c12:	68e3      	ldr	r3, [r4, #12]
 8005c14:	9903      	ldr	r1, [sp, #12]
 8005c16:	1a5b      	subs	r3, r3, r1
 8005c18:	42ab      	cmp	r3, r5
 8005c1a:	dcf2      	bgt.n	8005c02 <_printf_i+0x21e>
 8005c1c:	e7eb      	b.n	8005bf6 <_printf_i+0x212>
 8005c1e:	2500      	movs	r5, #0
 8005c20:	f104 0619 	add.w	r6, r4, #25
 8005c24:	e7f5      	b.n	8005c12 <_printf_i+0x22e>
 8005c26:	bf00      	nop
 8005c28:	080066c5 	.word	0x080066c5
 8005c2c:	080066d6 	.word	0x080066d6

08005c30 <_sbrk_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4d06      	ldr	r5, [pc, #24]	; (8005c4c <_sbrk_r+0x1c>)
 8005c34:	2300      	movs	r3, #0
 8005c36:	4604      	mov	r4, r0
 8005c38:	4608      	mov	r0, r1
 8005c3a:	602b      	str	r3, [r5, #0]
 8005c3c:	f7fb f9a2 	bl	8000f84 <_sbrk>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d102      	bne.n	8005c4a <_sbrk_r+0x1a>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	b103      	cbz	r3, 8005c4a <_sbrk_r+0x1a>
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	20000d30 	.word	0x20000d30

08005c50 <__swbuf_r>:
 8005c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c52:	460e      	mov	r6, r1
 8005c54:	4614      	mov	r4, r2
 8005c56:	4605      	mov	r5, r0
 8005c58:	b118      	cbz	r0, 8005c62 <__swbuf_r+0x12>
 8005c5a:	6983      	ldr	r3, [r0, #24]
 8005c5c:	b90b      	cbnz	r3, 8005c62 <__swbuf_r+0x12>
 8005c5e:	f000 f9d9 	bl	8006014 <__sinit>
 8005c62:	4b21      	ldr	r3, [pc, #132]	; (8005ce8 <__swbuf_r+0x98>)
 8005c64:	429c      	cmp	r4, r3
 8005c66:	d12b      	bne.n	8005cc0 <__swbuf_r+0x70>
 8005c68:	686c      	ldr	r4, [r5, #4]
 8005c6a:	69a3      	ldr	r3, [r4, #24]
 8005c6c:	60a3      	str	r3, [r4, #8]
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	071a      	lsls	r2, r3, #28
 8005c72:	d52f      	bpl.n	8005cd4 <__swbuf_r+0x84>
 8005c74:	6923      	ldr	r3, [r4, #16]
 8005c76:	b36b      	cbz	r3, 8005cd4 <__swbuf_r+0x84>
 8005c78:	6923      	ldr	r3, [r4, #16]
 8005c7a:	6820      	ldr	r0, [r4, #0]
 8005c7c:	1ac0      	subs	r0, r0, r3
 8005c7e:	6963      	ldr	r3, [r4, #20]
 8005c80:	b2f6      	uxtb	r6, r6
 8005c82:	4283      	cmp	r3, r0
 8005c84:	4637      	mov	r7, r6
 8005c86:	dc04      	bgt.n	8005c92 <__swbuf_r+0x42>
 8005c88:	4621      	mov	r1, r4
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f000 f92e 	bl	8005eec <_fflush_r>
 8005c90:	bb30      	cbnz	r0, 8005ce0 <__swbuf_r+0x90>
 8005c92:	68a3      	ldr	r3, [r4, #8]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	60a3      	str	r3, [r4, #8]
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	6022      	str	r2, [r4, #0]
 8005c9e:	701e      	strb	r6, [r3, #0]
 8005ca0:	6963      	ldr	r3, [r4, #20]
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	4283      	cmp	r3, r0
 8005ca6:	d004      	beq.n	8005cb2 <__swbuf_r+0x62>
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	07db      	lsls	r3, r3, #31
 8005cac:	d506      	bpl.n	8005cbc <__swbuf_r+0x6c>
 8005cae:	2e0a      	cmp	r6, #10
 8005cb0:	d104      	bne.n	8005cbc <__swbuf_r+0x6c>
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	f000 f919 	bl	8005eec <_fflush_r>
 8005cba:	b988      	cbnz	r0, 8005ce0 <__swbuf_r+0x90>
 8005cbc:	4638      	mov	r0, r7
 8005cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cc0:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <__swbuf_r+0x9c>)
 8005cc2:	429c      	cmp	r4, r3
 8005cc4:	d101      	bne.n	8005cca <__swbuf_r+0x7a>
 8005cc6:	68ac      	ldr	r4, [r5, #8]
 8005cc8:	e7cf      	b.n	8005c6a <__swbuf_r+0x1a>
 8005cca:	4b09      	ldr	r3, [pc, #36]	; (8005cf0 <__swbuf_r+0xa0>)
 8005ccc:	429c      	cmp	r4, r3
 8005cce:	bf08      	it	eq
 8005cd0:	68ec      	ldreq	r4, [r5, #12]
 8005cd2:	e7ca      	b.n	8005c6a <__swbuf_r+0x1a>
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	f000 f80c 	bl	8005cf4 <__swsetup_r>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d0cb      	beq.n	8005c78 <__swbuf_r+0x28>
 8005ce0:	f04f 37ff 	mov.w	r7, #4294967295
 8005ce4:	e7ea      	b.n	8005cbc <__swbuf_r+0x6c>
 8005ce6:	bf00      	nop
 8005ce8:	08006708 	.word	0x08006708
 8005cec:	08006728 	.word	0x08006728
 8005cf0:	080066e8 	.word	0x080066e8

08005cf4 <__swsetup_r>:
 8005cf4:	4b32      	ldr	r3, [pc, #200]	; (8005dc0 <__swsetup_r+0xcc>)
 8005cf6:	b570      	push	{r4, r5, r6, lr}
 8005cf8:	681d      	ldr	r5, [r3, #0]
 8005cfa:	4606      	mov	r6, r0
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	b125      	cbz	r5, 8005d0a <__swsetup_r+0x16>
 8005d00:	69ab      	ldr	r3, [r5, #24]
 8005d02:	b913      	cbnz	r3, 8005d0a <__swsetup_r+0x16>
 8005d04:	4628      	mov	r0, r5
 8005d06:	f000 f985 	bl	8006014 <__sinit>
 8005d0a:	4b2e      	ldr	r3, [pc, #184]	; (8005dc4 <__swsetup_r+0xd0>)
 8005d0c:	429c      	cmp	r4, r3
 8005d0e:	d10f      	bne.n	8005d30 <__swsetup_r+0x3c>
 8005d10:	686c      	ldr	r4, [r5, #4]
 8005d12:	89a3      	ldrh	r3, [r4, #12]
 8005d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d18:	0719      	lsls	r1, r3, #28
 8005d1a:	d42c      	bmi.n	8005d76 <__swsetup_r+0x82>
 8005d1c:	06dd      	lsls	r5, r3, #27
 8005d1e:	d411      	bmi.n	8005d44 <__swsetup_r+0x50>
 8005d20:	2309      	movs	r3, #9
 8005d22:	6033      	str	r3, [r6, #0]
 8005d24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d28:	81a3      	strh	r3, [r4, #12]
 8005d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d2e:	e03e      	b.n	8005dae <__swsetup_r+0xba>
 8005d30:	4b25      	ldr	r3, [pc, #148]	; (8005dc8 <__swsetup_r+0xd4>)
 8005d32:	429c      	cmp	r4, r3
 8005d34:	d101      	bne.n	8005d3a <__swsetup_r+0x46>
 8005d36:	68ac      	ldr	r4, [r5, #8]
 8005d38:	e7eb      	b.n	8005d12 <__swsetup_r+0x1e>
 8005d3a:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <__swsetup_r+0xd8>)
 8005d3c:	429c      	cmp	r4, r3
 8005d3e:	bf08      	it	eq
 8005d40:	68ec      	ldreq	r4, [r5, #12]
 8005d42:	e7e6      	b.n	8005d12 <__swsetup_r+0x1e>
 8005d44:	0758      	lsls	r0, r3, #29
 8005d46:	d512      	bpl.n	8005d6e <__swsetup_r+0x7a>
 8005d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d4a:	b141      	cbz	r1, 8005d5e <__swsetup_r+0x6a>
 8005d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d50:	4299      	cmp	r1, r3
 8005d52:	d002      	beq.n	8005d5a <__swsetup_r+0x66>
 8005d54:	4630      	mov	r0, r6
 8005d56:	f7ff fa41 	bl	80051dc <_free_r>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	6363      	str	r3, [r4, #52]	; 0x34
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d64:	81a3      	strh	r3, [r4, #12]
 8005d66:	2300      	movs	r3, #0
 8005d68:	6063      	str	r3, [r4, #4]
 8005d6a:	6923      	ldr	r3, [r4, #16]
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	89a3      	ldrh	r3, [r4, #12]
 8005d70:	f043 0308 	orr.w	r3, r3, #8
 8005d74:	81a3      	strh	r3, [r4, #12]
 8005d76:	6923      	ldr	r3, [r4, #16]
 8005d78:	b94b      	cbnz	r3, 8005d8e <__swsetup_r+0x9a>
 8005d7a:	89a3      	ldrh	r3, [r4, #12]
 8005d7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d84:	d003      	beq.n	8005d8e <__swsetup_r+0x9a>
 8005d86:	4621      	mov	r1, r4
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f000 fa09 	bl	80061a0 <__smakebuf_r>
 8005d8e:	89a0      	ldrh	r0, [r4, #12]
 8005d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d94:	f010 0301 	ands.w	r3, r0, #1
 8005d98:	d00a      	beq.n	8005db0 <__swsetup_r+0xbc>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60a3      	str	r3, [r4, #8]
 8005d9e:	6963      	ldr	r3, [r4, #20]
 8005da0:	425b      	negs	r3, r3
 8005da2:	61a3      	str	r3, [r4, #24]
 8005da4:	6923      	ldr	r3, [r4, #16]
 8005da6:	b943      	cbnz	r3, 8005dba <__swsetup_r+0xc6>
 8005da8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005dac:	d1ba      	bne.n	8005d24 <__swsetup_r+0x30>
 8005dae:	bd70      	pop	{r4, r5, r6, pc}
 8005db0:	0781      	lsls	r1, r0, #30
 8005db2:	bf58      	it	pl
 8005db4:	6963      	ldrpl	r3, [r4, #20]
 8005db6:	60a3      	str	r3, [r4, #8]
 8005db8:	e7f4      	b.n	8005da4 <__swsetup_r+0xb0>
 8005dba:	2000      	movs	r0, #0
 8005dbc:	e7f7      	b.n	8005dae <__swsetup_r+0xba>
 8005dbe:	bf00      	nop
 8005dc0:	2000000c 	.word	0x2000000c
 8005dc4:	08006708 	.word	0x08006708
 8005dc8:	08006728 	.word	0x08006728
 8005dcc:	080066e8 	.word	0x080066e8

08005dd0 <abort>:
 8005dd0:	b508      	push	{r3, lr}
 8005dd2:	2006      	movs	r0, #6
 8005dd4:	f000 faa2 	bl	800631c <raise>
 8005dd8:	2001      	movs	r0, #1
 8005dda:	f7fb f85b 	bl	8000e94 <_exit>
	...

08005de0 <__sflush_r>:
 8005de0:	898a      	ldrh	r2, [r1, #12]
 8005de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005de6:	4605      	mov	r5, r0
 8005de8:	0710      	lsls	r0, r2, #28
 8005dea:	460c      	mov	r4, r1
 8005dec:	d458      	bmi.n	8005ea0 <__sflush_r+0xc0>
 8005dee:	684b      	ldr	r3, [r1, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	dc05      	bgt.n	8005e00 <__sflush_r+0x20>
 8005df4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	dc02      	bgt.n	8005e00 <__sflush_r+0x20>
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e02:	2e00      	cmp	r6, #0
 8005e04:	d0f9      	beq.n	8005dfa <__sflush_r+0x1a>
 8005e06:	2300      	movs	r3, #0
 8005e08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e0c:	682f      	ldr	r7, [r5, #0]
 8005e0e:	602b      	str	r3, [r5, #0]
 8005e10:	d032      	beq.n	8005e78 <__sflush_r+0x98>
 8005e12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	075a      	lsls	r2, r3, #29
 8005e18:	d505      	bpl.n	8005e26 <__sflush_r+0x46>
 8005e1a:	6863      	ldr	r3, [r4, #4]
 8005e1c:	1ac0      	subs	r0, r0, r3
 8005e1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e20:	b10b      	cbz	r3, 8005e26 <__sflush_r+0x46>
 8005e22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e24:	1ac0      	subs	r0, r0, r3
 8005e26:	2300      	movs	r3, #0
 8005e28:	4602      	mov	r2, r0
 8005e2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e2c:	6a21      	ldr	r1, [r4, #32]
 8005e2e:	4628      	mov	r0, r5
 8005e30:	47b0      	blx	r6
 8005e32:	1c43      	adds	r3, r0, #1
 8005e34:	89a3      	ldrh	r3, [r4, #12]
 8005e36:	d106      	bne.n	8005e46 <__sflush_r+0x66>
 8005e38:	6829      	ldr	r1, [r5, #0]
 8005e3a:	291d      	cmp	r1, #29
 8005e3c:	d82c      	bhi.n	8005e98 <__sflush_r+0xb8>
 8005e3e:	4a2a      	ldr	r2, [pc, #168]	; (8005ee8 <__sflush_r+0x108>)
 8005e40:	40ca      	lsrs	r2, r1
 8005e42:	07d6      	lsls	r6, r2, #31
 8005e44:	d528      	bpl.n	8005e98 <__sflush_r+0xb8>
 8005e46:	2200      	movs	r2, #0
 8005e48:	6062      	str	r2, [r4, #4]
 8005e4a:	04d9      	lsls	r1, r3, #19
 8005e4c:	6922      	ldr	r2, [r4, #16]
 8005e4e:	6022      	str	r2, [r4, #0]
 8005e50:	d504      	bpl.n	8005e5c <__sflush_r+0x7c>
 8005e52:	1c42      	adds	r2, r0, #1
 8005e54:	d101      	bne.n	8005e5a <__sflush_r+0x7a>
 8005e56:	682b      	ldr	r3, [r5, #0]
 8005e58:	b903      	cbnz	r3, 8005e5c <__sflush_r+0x7c>
 8005e5a:	6560      	str	r0, [r4, #84]	; 0x54
 8005e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e5e:	602f      	str	r7, [r5, #0]
 8005e60:	2900      	cmp	r1, #0
 8005e62:	d0ca      	beq.n	8005dfa <__sflush_r+0x1a>
 8005e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e68:	4299      	cmp	r1, r3
 8005e6a:	d002      	beq.n	8005e72 <__sflush_r+0x92>
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	f7ff f9b5 	bl	80051dc <_free_r>
 8005e72:	2000      	movs	r0, #0
 8005e74:	6360      	str	r0, [r4, #52]	; 0x34
 8005e76:	e7c1      	b.n	8005dfc <__sflush_r+0x1c>
 8005e78:	6a21      	ldr	r1, [r4, #32]
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	47b0      	blx	r6
 8005e80:	1c41      	adds	r1, r0, #1
 8005e82:	d1c7      	bne.n	8005e14 <__sflush_r+0x34>
 8005e84:	682b      	ldr	r3, [r5, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0c4      	beq.n	8005e14 <__sflush_r+0x34>
 8005e8a:	2b1d      	cmp	r3, #29
 8005e8c:	d001      	beq.n	8005e92 <__sflush_r+0xb2>
 8005e8e:	2b16      	cmp	r3, #22
 8005e90:	d101      	bne.n	8005e96 <__sflush_r+0xb6>
 8005e92:	602f      	str	r7, [r5, #0]
 8005e94:	e7b1      	b.n	8005dfa <__sflush_r+0x1a>
 8005e96:	89a3      	ldrh	r3, [r4, #12]
 8005e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e9c:	81a3      	strh	r3, [r4, #12]
 8005e9e:	e7ad      	b.n	8005dfc <__sflush_r+0x1c>
 8005ea0:	690f      	ldr	r7, [r1, #16]
 8005ea2:	2f00      	cmp	r7, #0
 8005ea4:	d0a9      	beq.n	8005dfa <__sflush_r+0x1a>
 8005ea6:	0793      	lsls	r3, r2, #30
 8005ea8:	680e      	ldr	r6, [r1, #0]
 8005eaa:	bf08      	it	eq
 8005eac:	694b      	ldreq	r3, [r1, #20]
 8005eae:	600f      	str	r7, [r1, #0]
 8005eb0:	bf18      	it	ne
 8005eb2:	2300      	movne	r3, #0
 8005eb4:	eba6 0807 	sub.w	r8, r6, r7
 8005eb8:	608b      	str	r3, [r1, #8]
 8005eba:	f1b8 0f00 	cmp.w	r8, #0
 8005ebe:	dd9c      	ble.n	8005dfa <__sflush_r+0x1a>
 8005ec0:	6a21      	ldr	r1, [r4, #32]
 8005ec2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ec4:	4643      	mov	r3, r8
 8005ec6:	463a      	mov	r2, r7
 8005ec8:	4628      	mov	r0, r5
 8005eca:	47b0      	blx	r6
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	dc06      	bgt.n	8005ede <__sflush_r+0xfe>
 8005ed0:	89a3      	ldrh	r3, [r4, #12]
 8005ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ed6:	81a3      	strh	r3, [r4, #12]
 8005ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8005edc:	e78e      	b.n	8005dfc <__sflush_r+0x1c>
 8005ede:	4407      	add	r7, r0
 8005ee0:	eba8 0800 	sub.w	r8, r8, r0
 8005ee4:	e7e9      	b.n	8005eba <__sflush_r+0xda>
 8005ee6:	bf00      	nop
 8005ee8:	20400001 	.word	0x20400001

08005eec <_fflush_r>:
 8005eec:	b538      	push	{r3, r4, r5, lr}
 8005eee:	690b      	ldr	r3, [r1, #16]
 8005ef0:	4605      	mov	r5, r0
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	b913      	cbnz	r3, 8005efc <_fflush_r+0x10>
 8005ef6:	2500      	movs	r5, #0
 8005ef8:	4628      	mov	r0, r5
 8005efa:	bd38      	pop	{r3, r4, r5, pc}
 8005efc:	b118      	cbz	r0, 8005f06 <_fflush_r+0x1a>
 8005efe:	6983      	ldr	r3, [r0, #24]
 8005f00:	b90b      	cbnz	r3, 8005f06 <_fflush_r+0x1a>
 8005f02:	f000 f887 	bl	8006014 <__sinit>
 8005f06:	4b14      	ldr	r3, [pc, #80]	; (8005f58 <_fflush_r+0x6c>)
 8005f08:	429c      	cmp	r4, r3
 8005f0a:	d11b      	bne.n	8005f44 <_fflush_r+0x58>
 8005f0c:	686c      	ldr	r4, [r5, #4]
 8005f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0ef      	beq.n	8005ef6 <_fflush_r+0xa>
 8005f16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f18:	07d0      	lsls	r0, r2, #31
 8005f1a:	d404      	bmi.n	8005f26 <_fflush_r+0x3a>
 8005f1c:	0599      	lsls	r1, r3, #22
 8005f1e:	d402      	bmi.n	8005f26 <_fflush_r+0x3a>
 8005f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f22:	f000 f915 	bl	8006150 <__retarget_lock_acquire_recursive>
 8005f26:	4628      	mov	r0, r5
 8005f28:	4621      	mov	r1, r4
 8005f2a:	f7ff ff59 	bl	8005de0 <__sflush_r>
 8005f2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f30:	07da      	lsls	r2, r3, #31
 8005f32:	4605      	mov	r5, r0
 8005f34:	d4e0      	bmi.n	8005ef8 <_fflush_r+0xc>
 8005f36:	89a3      	ldrh	r3, [r4, #12]
 8005f38:	059b      	lsls	r3, r3, #22
 8005f3a:	d4dd      	bmi.n	8005ef8 <_fflush_r+0xc>
 8005f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f3e:	f000 f908 	bl	8006152 <__retarget_lock_release_recursive>
 8005f42:	e7d9      	b.n	8005ef8 <_fflush_r+0xc>
 8005f44:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <_fflush_r+0x70>)
 8005f46:	429c      	cmp	r4, r3
 8005f48:	d101      	bne.n	8005f4e <_fflush_r+0x62>
 8005f4a:	68ac      	ldr	r4, [r5, #8]
 8005f4c:	e7df      	b.n	8005f0e <_fflush_r+0x22>
 8005f4e:	4b04      	ldr	r3, [pc, #16]	; (8005f60 <_fflush_r+0x74>)
 8005f50:	429c      	cmp	r4, r3
 8005f52:	bf08      	it	eq
 8005f54:	68ec      	ldreq	r4, [r5, #12]
 8005f56:	e7da      	b.n	8005f0e <_fflush_r+0x22>
 8005f58:	08006708 	.word	0x08006708
 8005f5c:	08006728 	.word	0x08006728
 8005f60:	080066e8 	.word	0x080066e8

08005f64 <std>:
 8005f64:	2300      	movs	r3, #0
 8005f66:	b510      	push	{r4, lr}
 8005f68:	4604      	mov	r4, r0
 8005f6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005f6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f72:	6083      	str	r3, [r0, #8]
 8005f74:	8181      	strh	r1, [r0, #12]
 8005f76:	6643      	str	r3, [r0, #100]	; 0x64
 8005f78:	81c2      	strh	r2, [r0, #14]
 8005f7a:	6183      	str	r3, [r0, #24]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	2208      	movs	r2, #8
 8005f80:	305c      	adds	r0, #92	; 0x5c
 8005f82:	f7ff f849 	bl	8005018 <memset>
 8005f86:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <std+0x38>)
 8005f88:	6263      	str	r3, [r4, #36]	; 0x24
 8005f8a:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <std+0x3c>)
 8005f8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f8e:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <std+0x40>)
 8005f90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f92:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <std+0x44>)
 8005f94:	6224      	str	r4, [r4, #32]
 8005f96:	6323      	str	r3, [r4, #48]	; 0x30
 8005f98:	bd10      	pop	{r4, pc}
 8005f9a:	bf00      	nop
 8005f9c:	08006355 	.word	0x08006355
 8005fa0:	08006377 	.word	0x08006377
 8005fa4:	080063af 	.word	0x080063af
 8005fa8:	080063d3 	.word	0x080063d3

08005fac <_cleanup_r>:
 8005fac:	4901      	ldr	r1, [pc, #4]	; (8005fb4 <_cleanup_r+0x8>)
 8005fae:	f000 b8af 	b.w	8006110 <_fwalk_reent>
 8005fb2:	bf00      	nop
 8005fb4:	08005eed 	.word	0x08005eed

08005fb8 <__sfmoreglue>:
 8005fb8:	b570      	push	{r4, r5, r6, lr}
 8005fba:	2268      	movs	r2, #104	; 0x68
 8005fbc:	1e4d      	subs	r5, r1, #1
 8005fbe:	4355      	muls	r5, r2
 8005fc0:	460e      	mov	r6, r1
 8005fc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005fc6:	f7ff f975 	bl	80052b4 <_malloc_r>
 8005fca:	4604      	mov	r4, r0
 8005fcc:	b140      	cbz	r0, 8005fe0 <__sfmoreglue+0x28>
 8005fce:	2100      	movs	r1, #0
 8005fd0:	e9c0 1600 	strd	r1, r6, [r0]
 8005fd4:	300c      	adds	r0, #12
 8005fd6:	60a0      	str	r0, [r4, #8]
 8005fd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005fdc:	f7ff f81c 	bl	8005018 <memset>
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	bd70      	pop	{r4, r5, r6, pc}

08005fe4 <__sfp_lock_acquire>:
 8005fe4:	4801      	ldr	r0, [pc, #4]	; (8005fec <__sfp_lock_acquire+0x8>)
 8005fe6:	f000 b8b3 	b.w	8006150 <__retarget_lock_acquire_recursive>
 8005fea:	bf00      	nop
 8005fec:	20000d2d 	.word	0x20000d2d

08005ff0 <__sfp_lock_release>:
 8005ff0:	4801      	ldr	r0, [pc, #4]	; (8005ff8 <__sfp_lock_release+0x8>)
 8005ff2:	f000 b8ae 	b.w	8006152 <__retarget_lock_release_recursive>
 8005ff6:	bf00      	nop
 8005ff8:	20000d2d 	.word	0x20000d2d

08005ffc <__sinit_lock_acquire>:
 8005ffc:	4801      	ldr	r0, [pc, #4]	; (8006004 <__sinit_lock_acquire+0x8>)
 8005ffe:	f000 b8a7 	b.w	8006150 <__retarget_lock_acquire_recursive>
 8006002:	bf00      	nop
 8006004:	20000d2e 	.word	0x20000d2e

08006008 <__sinit_lock_release>:
 8006008:	4801      	ldr	r0, [pc, #4]	; (8006010 <__sinit_lock_release+0x8>)
 800600a:	f000 b8a2 	b.w	8006152 <__retarget_lock_release_recursive>
 800600e:	bf00      	nop
 8006010:	20000d2e 	.word	0x20000d2e

08006014 <__sinit>:
 8006014:	b510      	push	{r4, lr}
 8006016:	4604      	mov	r4, r0
 8006018:	f7ff fff0 	bl	8005ffc <__sinit_lock_acquire>
 800601c:	69a3      	ldr	r3, [r4, #24]
 800601e:	b11b      	cbz	r3, 8006028 <__sinit+0x14>
 8006020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006024:	f7ff bff0 	b.w	8006008 <__sinit_lock_release>
 8006028:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800602c:	6523      	str	r3, [r4, #80]	; 0x50
 800602e:	4b13      	ldr	r3, [pc, #76]	; (800607c <__sinit+0x68>)
 8006030:	4a13      	ldr	r2, [pc, #76]	; (8006080 <__sinit+0x6c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	62a2      	str	r2, [r4, #40]	; 0x28
 8006036:	42a3      	cmp	r3, r4
 8006038:	bf04      	itt	eq
 800603a:	2301      	moveq	r3, #1
 800603c:	61a3      	streq	r3, [r4, #24]
 800603e:	4620      	mov	r0, r4
 8006040:	f000 f820 	bl	8006084 <__sfp>
 8006044:	6060      	str	r0, [r4, #4]
 8006046:	4620      	mov	r0, r4
 8006048:	f000 f81c 	bl	8006084 <__sfp>
 800604c:	60a0      	str	r0, [r4, #8]
 800604e:	4620      	mov	r0, r4
 8006050:	f000 f818 	bl	8006084 <__sfp>
 8006054:	2200      	movs	r2, #0
 8006056:	60e0      	str	r0, [r4, #12]
 8006058:	2104      	movs	r1, #4
 800605a:	6860      	ldr	r0, [r4, #4]
 800605c:	f7ff ff82 	bl	8005f64 <std>
 8006060:	68a0      	ldr	r0, [r4, #8]
 8006062:	2201      	movs	r2, #1
 8006064:	2109      	movs	r1, #9
 8006066:	f7ff ff7d 	bl	8005f64 <std>
 800606a:	68e0      	ldr	r0, [r4, #12]
 800606c:	2202      	movs	r2, #2
 800606e:	2112      	movs	r1, #18
 8006070:	f7ff ff78 	bl	8005f64 <std>
 8006074:	2301      	movs	r3, #1
 8006076:	61a3      	str	r3, [r4, #24]
 8006078:	e7d2      	b.n	8006020 <__sinit+0xc>
 800607a:	bf00      	nop
 800607c:	08006600 	.word	0x08006600
 8006080:	08005fad 	.word	0x08005fad

08006084 <__sfp>:
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	4607      	mov	r7, r0
 8006088:	f7ff ffac 	bl	8005fe4 <__sfp_lock_acquire>
 800608c:	4b1e      	ldr	r3, [pc, #120]	; (8006108 <__sfp+0x84>)
 800608e:	681e      	ldr	r6, [r3, #0]
 8006090:	69b3      	ldr	r3, [r6, #24]
 8006092:	b913      	cbnz	r3, 800609a <__sfp+0x16>
 8006094:	4630      	mov	r0, r6
 8006096:	f7ff ffbd 	bl	8006014 <__sinit>
 800609a:	3648      	adds	r6, #72	; 0x48
 800609c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060a0:	3b01      	subs	r3, #1
 80060a2:	d503      	bpl.n	80060ac <__sfp+0x28>
 80060a4:	6833      	ldr	r3, [r6, #0]
 80060a6:	b30b      	cbz	r3, 80060ec <__sfp+0x68>
 80060a8:	6836      	ldr	r6, [r6, #0]
 80060aa:	e7f7      	b.n	800609c <__sfp+0x18>
 80060ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060b0:	b9d5      	cbnz	r5, 80060e8 <__sfp+0x64>
 80060b2:	4b16      	ldr	r3, [pc, #88]	; (800610c <__sfp+0x88>)
 80060b4:	60e3      	str	r3, [r4, #12]
 80060b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060ba:	6665      	str	r5, [r4, #100]	; 0x64
 80060bc:	f000 f847 	bl	800614e <__retarget_lock_init_recursive>
 80060c0:	f7ff ff96 	bl	8005ff0 <__sfp_lock_release>
 80060c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80060c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80060cc:	6025      	str	r5, [r4, #0]
 80060ce:	61a5      	str	r5, [r4, #24]
 80060d0:	2208      	movs	r2, #8
 80060d2:	4629      	mov	r1, r5
 80060d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060d8:	f7fe ff9e 	bl	8005018 <memset>
 80060dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060e4:	4620      	mov	r0, r4
 80060e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060e8:	3468      	adds	r4, #104	; 0x68
 80060ea:	e7d9      	b.n	80060a0 <__sfp+0x1c>
 80060ec:	2104      	movs	r1, #4
 80060ee:	4638      	mov	r0, r7
 80060f0:	f7ff ff62 	bl	8005fb8 <__sfmoreglue>
 80060f4:	4604      	mov	r4, r0
 80060f6:	6030      	str	r0, [r6, #0]
 80060f8:	2800      	cmp	r0, #0
 80060fa:	d1d5      	bne.n	80060a8 <__sfp+0x24>
 80060fc:	f7ff ff78 	bl	8005ff0 <__sfp_lock_release>
 8006100:	230c      	movs	r3, #12
 8006102:	603b      	str	r3, [r7, #0]
 8006104:	e7ee      	b.n	80060e4 <__sfp+0x60>
 8006106:	bf00      	nop
 8006108:	08006600 	.word	0x08006600
 800610c:	ffff0001 	.word	0xffff0001

08006110 <_fwalk_reent>:
 8006110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006114:	4606      	mov	r6, r0
 8006116:	4688      	mov	r8, r1
 8006118:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800611c:	2700      	movs	r7, #0
 800611e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006122:	f1b9 0901 	subs.w	r9, r9, #1
 8006126:	d505      	bpl.n	8006134 <_fwalk_reent+0x24>
 8006128:	6824      	ldr	r4, [r4, #0]
 800612a:	2c00      	cmp	r4, #0
 800612c:	d1f7      	bne.n	800611e <_fwalk_reent+0xe>
 800612e:	4638      	mov	r0, r7
 8006130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006134:	89ab      	ldrh	r3, [r5, #12]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d907      	bls.n	800614a <_fwalk_reent+0x3a>
 800613a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800613e:	3301      	adds	r3, #1
 8006140:	d003      	beq.n	800614a <_fwalk_reent+0x3a>
 8006142:	4629      	mov	r1, r5
 8006144:	4630      	mov	r0, r6
 8006146:	47c0      	blx	r8
 8006148:	4307      	orrs	r7, r0
 800614a:	3568      	adds	r5, #104	; 0x68
 800614c:	e7e9      	b.n	8006122 <_fwalk_reent+0x12>

0800614e <__retarget_lock_init_recursive>:
 800614e:	4770      	bx	lr

08006150 <__retarget_lock_acquire_recursive>:
 8006150:	4770      	bx	lr

08006152 <__retarget_lock_release_recursive>:
 8006152:	4770      	bx	lr

08006154 <__swhatbuf_r>:
 8006154:	b570      	push	{r4, r5, r6, lr}
 8006156:	460e      	mov	r6, r1
 8006158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800615c:	2900      	cmp	r1, #0
 800615e:	b096      	sub	sp, #88	; 0x58
 8006160:	4614      	mov	r4, r2
 8006162:	461d      	mov	r5, r3
 8006164:	da08      	bge.n	8006178 <__swhatbuf_r+0x24>
 8006166:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	602a      	str	r2, [r5, #0]
 800616e:	061a      	lsls	r2, r3, #24
 8006170:	d410      	bmi.n	8006194 <__swhatbuf_r+0x40>
 8006172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006176:	e00e      	b.n	8006196 <__swhatbuf_r+0x42>
 8006178:	466a      	mov	r2, sp
 800617a:	f000 f951 	bl	8006420 <_fstat_r>
 800617e:	2800      	cmp	r0, #0
 8006180:	dbf1      	blt.n	8006166 <__swhatbuf_r+0x12>
 8006182:	9a01      	ldr	r2, [sp, #4]
 8006184:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006188:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800618c:	425a      	negs	r2, r3
 800618e:	415a      	adcs	r2, r3
 8006190:	602a      	str	r2, [r5, #0]
 8006192:	e7ee      	b.n	8006172 <__swhatbuf_r+0x1e>
 8006194:	2340      	movs	r3, #64	; 0x40
 8006196:	2000      	movs	r0, #0
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	b016      	add	sp, #88	; 0x58
 800619c:	bd70      	pop	{r4, r5, r6, pc}
	...

080061a0 <__smakebuf_r>:
 80061a0:	898b      	ldrh	r3, [r1, #12]
 80061a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061a4:	079d      	lsls	r5, r3, #30
 80061a6:	4606      	mov	r6, r0
 80061a8:	460c      	mov	r4, r1
 80061aa:	d507      	bpl.n	80061bc <__smakebuf_r+0x1c>
 80061ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	6123      	str	r3, [r4, #16]
 80061b4:	2301      	movs	r3, #1
 80061b6:	6163      	str	r3, [r4, #20]
 80061b8:	b002      	add	sp, #8
 80061ba:	bd70      	pop	{r4, r5, r6, pc}
 80061bc:	ab01      	add	r3, sp, #4
 80061be:	466a      	mov	r2, sp
 80061c0:	f7ff ffc8 	bl	8006154 <__swhatbuf_r>
 80061c4:	9900      	ldr	r1, [sp, #0]
 80061c6:	4605      	mov	r5, r0
 80061c8:	4630      	mov	r0, r6
 80061ca:	f7ff f873 	bl	80052b4 <_malloc_r>
 80061ce:	b948      	cbnz	r0, 80061e4 <__smakebuf_r+0x44>
 80061d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061d4:	059a      	lsls	r2, r3, #22
 80061d6:	d4ef      	bmi.n	80061b8 <__smakebuf_r+0x18>
 80061d8:	f023 0303 	bic.w	r3, r3, #3
 80061dc:	f043 0302 	orr.w	r3, r3, #2
 80061e0:	81a3      	strh	r3, [r4, #12]
 80061e2:	e7e3      	b.n	80061ac <__smakebuf_r+0xc>
 80061e4:	4b0d      	ldr	r3, [pc, #52]	; (800621c <__smakebuf_r+0x7c>)
 80061e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	6020      	str	r0, [r4, #0]
 80061ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f0:	81a3      	strh	r3, [r4, #12]
 80061f2:	9b00      	ldr	r3, [sp, #0]
 80061f4:	6163      	str	r3, [r4, #20]
 80061f6:	9b01      	ldr	r3, [sp, #4]
 80061f8:	6120      	str	r0, [r4, #16]
 80061fa:	b15b      	cbz	r3, 8006214 <__smakebuf_r+0x74>
 80061fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006200:	4630      	mov	r0, r6
 8006202:	f000 f91f 	bl	8006444 <_isatty_r>
 8006206:	b128      	cbz	r0, 8006214 <__smakebuf_r+0x74>
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	f023 0303 	bic.w	r3, r3, #3
 800620e:	f043 0301 	orr.w	r3, r3, #1
 8006212:	81a3      	strh	r3, [r4, #12]
 8006214:	89a0      	ldrh	r0, [r4, #12]
 8006216:	4305      	orrs	r5, r0
 8006218:	81a5      	strh	r5, [r4, #12]
 800621a:	e7cd      	b.n	80061b8 <__smakebuf_r+0x18>
 800621c:	08005fad 	.word	0x08005fad

08006220 <memmove>:
 8006220:	4288      	cmp	r0, r1
 8006222:	b510      	push	{r4, lr}
 8006224:	eb01 0402 	add.w	r4, r1, r2
 8006228:	d902      	bls.n	8006230 <memmove+0x10>
 800622a:	4284      	cmp	r4, r0
 800622c:	4623      	mov	r3, r4
 800622e:	d807      	bhi.n	8006240 <memmove+0x20>
 8006230:	1e43      	subs	r3, r0, #1
 8006232:	42a1      	cmp	r1, r4
 8006234:	d008      	beq.n	8006248 <memmove+0x28>
 8006236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800623a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800623e:	e7f8      	b.n	8006232 <memmove+0x12>
 8006240:	4402      	add	r2, r0
 8006242:	4601      	mov	r1, r0
 8006244:	428a      	cmp	r2, r1
 8006246:	d100      	bne.n	800624a <memmove+0x2a>
 8006248:	bd10      	pop	{r4, pc}
 800624a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800624e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006252:	e7f7      	b.n	8006244 <memmove+0x24>

08006254 <__malloc_lock>:
 8006254:	4801      	ldr	r0, [pc, #4]	; (800625c <__malloc_lock+0x8>)
 8006256:	f7ff bf7b 	b.w	8006150 <__retarget_lock_acquire_recursive>
 800625a:	bf00      	nop
 800625c:	20000d2c 	.word	0x20000d2c

08006260 <__malloc_unlock>:
 8006260:	4801      	ldr	r0, [pc, #4]	; (8006268 <__malloc_unlock+0x8>)
 8006262:	f7ff bf76 	b.w	8006152 <__retarget_lock_release_recursive>
 8006266:	bf00      	nop
 8006268:	20000d2c 	.word	0x20000d2c

0800626c <_realloc_r>:
 800626c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006270:	4680      	mov	r8, r0
 8006272:	4614      	mov	r4, r2
 8006274:	460e      	mov	r6, r1
 8006276:	b921      	cbnz	r1, 8006282 <_realloc_r+0x16>
 8006278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800627c:	4611      	mov	r1, r2
 800627e:	f7ff b819 	b.w	80052b4 <_malloc_r>
 8006282:	b92a      	cbnz	r2, 8006290 <_realloc_r+0x24>
 8006284:	f7fe ffaa 	bl	80051dc <_free_r>
 8006288:	4625      	mov	r5, r4
 800628a:	4628      	mov	r0, r5
 800628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006290:	f000 f8fa 	bl	8006488 <_malloc_usable_size_r>
 8006294:	4284      	cmp	r4, r0
 8006296:	4607      	mov	r7, r0
 8006298:	d802      	bhi.n	80062a0 <_realloc_r+0x34>
 800629a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800629e:	d812      	bhi.n	80062c6 <_realloc_r+0x5a>
 80062a0:	4621      	mov	r1, r4
 80062a2:	4640      	mov	r0, r8
 80062a4:	f7ff f806 	bl	80052b4 <_malloc_r>
 80062a8:	4605      	mov	r5, r0
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d0ed      	beq.n	800628a <_realloc_r+0x1e>
 80062ae:	42bc      	cmp	r4, r7
 80062b0:	4622      	mov	r2, r4
 80062b2:	4631      	mov	r1, r6
 80062b4:	bf28      	it	cs
 80062b6:	463a      	movcs	r2, r7
 80062b8:	f7fe fea0 	bl	8004ffc <memcpy>
 80062bc:	4631      	mov	r1, r6
 80062be:	4640      	mov	r0, r8
 80062c0:	f7fe ff8c 	bl	80051dc <_free_r>
 80062c4:	e7e1      	b.n	800628a <_realloc_r+0x1e>
 80062c6:	4635      	mov	r5, r6
 80062c8:	e7df      	b.n	800628a <_realloc_r+0x1e>

080062ca <_raise_r>:
 80062ca:	291f      	cmp	r1, #31
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4604      	mov	r4, r0
 80062d0:	460d      	mov	r5, r1
 80062d2:	d904      	bls.n	80062de <_raise_r+0x14>
 80062d4:	2316      	movs	r3, #22
 80062d6:	6003      	str	r3, [r0, #0]
 80062d8:	f04f 30ff 	mov.w	r0, #4294967295
 80062dc:	bd38      	pop	{r3, r4, r5, pc}
 80062de:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80062e0:	b112      	cbz	r2, 80062e8 <_raise_r+0x1e>
 80062e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062e6:	b94b      	cbnz	r3, 80062fc <_raise_r+0x32>
 80062e8:	4620      	mov	r0, r4
 80062ea:	f000 f831 	bl	8006350 <_getpid_r>
 80062ee:	462a      	mov	r2, r5
 80062f0:	4601      	mov	r1, r0
 80062f2:	4620      	mov	r0, r4
 80062f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062f8:	f000 b818 	b.w	800632c <_kill_r>
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d00a      	beq.n	8006316 <_raise_r+0x4c>
 8006300:	1c59      	adds	r1, r3, #1
 8006302:	d103      	bne.n	800630c <_raise_r+0x42>
 8006304:	2316      	movs	r3, #22
 8006306:	6003      	str	r3, [r0, #0]
 8006308:	2001      	movs	r0, #1
 800630a:	e7e7      	b.n	80062dc <_raise_r+0x12>
 800630c:	2400      	movs	r4, #0
 800630e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006312:	4628      	mov	r0, r5
 8006314:	4798      	blx	r3
 8006316:	2000      	movs	r0, #0
 8006318:	e7e0      	b.n	80062dc <_raise_r+0x12>
	...

0800631c <raise>:
 800631c:	4b02      	ldr	r3, [pc, #8]	; (8006328 <raise+0xc>)
 800631e:	4601      	mov	r1, r0
 8006320:	6818      	ldr	r0, [r3, #0]
 8006322:	f7ff bfd2 	b.w	80062ca <_raise_r>
 8006326:	bf00      	nop
 8006328:	2000000c 	.word	0x2000000c

0800632c <_kill_r>:
 800632c:	b538      	push	{r3, r4, r5, lr}
 800632e:	4d07      	ldr	r5, [pc, #28]	; (800634c <_kill_r+0x20>)
 8006330:	2300      	movs	r3, #0
 8006332:	4604      	mov	r4, r0
 8006334:	4608      	mov	r0, r1
 8006336:	4611      	mov	r1, r2
 8006338:	602b      	str	r3, [r5, #0]
 800633a:	f7fa fd9b 	bl	8000e74 <_kill>
 800633e:	1c43      	adds	r3, r0, #1
 8006340:	d102      	bne.n	8006348 <_kill_r+0x1c>
 8006342:	682b      	ldr	r3, [r5, #0]
 8006344:	b103      	cbz	r3, 8006348 <_kill_r+0x1c>
 8006346:	6023      	str	r3, [r4, #0]
 8006348:	bd38      	pop	{r3, r4, r5, pc}
 800634a:	bf00      	nop
 800634c:	20000d30 	.word	0x20000d30

08006350 <_getpid_r>:
 8006350:	f7fa bd88 	b.w	8000e64 <_getpid>

08006354 <__sread>:
 8006354:	b510      	push	{r4, lr}
 8006356:	460c      	mov	r4, r1
 8006358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800635c:	f000 f89c 	bl	8006498 <_read_r>
 8006360:	2800      	cmp	r0, #0
 8006362:	bfab      	itete	ge
 8006364:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006366:	89a3      	ldrhlt	r3, [r4, #12]
 8006368:	181b      	addge	r3, r3, r0
 800636a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800636e:	bfac      	ite	ge
 8006370:	6563      	strge	r3, [r4, #84]	; 0x54
 8006372:	81a3      	strhlt	r3, [r4, #12]
 8006374:	bd10      	pop	{r4, pc}

08006376 <__swrite>:
 8006376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800637a:	461f      	mov	r7, r3
 800637c:	898b      	ldrh	r3, [r1, #12]
 800637e:	05db      	lsls	r3, r3, #23
 8006380:	4605      	mov	r5, r0
 8006382:	460c      	mov	r4, r1
 8006384:	4616      	mov	r6, r2
 8006386:	d505      	bpl.n	8006394 <__swrite+0x1e>
 8006388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800638c:	2302      	movs	r3, #2
 800638e:	2200      	movs	r2, #0
 8006390:	f000 f868 	bl	8006464 <_lseek_r>
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800639a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800639e:	81a3      	strh	r3, [r4, #12]
 80063a0:	4632      	mov	r2, r6
 80063a2:	463b      	mov	r3, r7
 80063a4:	4628      	mov	r0, r5
 80063a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063aa:	f000 b817 	b.w	80063dc <_write_r>

080063ae <__sseek>:
 80063ae:	b510      	push	{r4, lr}
 80063b0:	460c      	mov	r4, r1
 80063b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b6:	f000 f855 	bl	8006464 <_lseek_r>
 80063ba:	1c43      	adds	r3, r0, #1
 80063bc:	89a3      	ldrh	r3, [r4, #12]
 80063be:	bf15      	itete	ne
 80063c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80063c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063ca:	81a3      	strheq	r3, [r4, #12]
 80063cc:	bf18      	it	ne
 80063ce:	81a3      	strhne	r3, [r4, #12]
 80063d0:	bd10      	pop	{r4, pc}

080063d2 <__sclose>:
 80063d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d6:	f000 b813 	b.w	8006400 <_close_r>
	...

080063dc <_write_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	4d07      	ldr	r5, [pc, #28]	; (80063fc <_write_r+0x20>)
 80063e0:	4604      	mov	r4, r0
 80063e2:	4608      	mov	r0, r1
 80063e4:	4611      	mov	r1, r2
 80063e6:	2200      	movs	r2, #0
 80063e8:	602a      	str	r2, [r5, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	f7fa fd79 	bl	8000ee2 <_write>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d102      	bne.n	80063fa <_write_r+0x1e>
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	b103      	cbz	r3, 80063fa <_write_r+0x1e>
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	bd38      	pop	{r3, r4, r5, pc}
 80063fc:	20000d30 	.word	0x20000d30

08006400 <_close_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4d06      	ldr	r5, [pc, #24]	; (800641c <_close_r+0x1c>)
 8006404:	2300      	movs	r3, #0
 8006406:	4604      	mov	r4, r0
 8006408:	4608      	mov	r0, r1
 800640a:	602b      	str	r3, [r5, #0]
 800640c:	f7fa fd85 	bl	8000f1a <_close>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d102      	bne.n	800641a <_close_r+0x1a>
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	b103      	cbz	r3, 800641a <_close_r+0x1a>
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	bd38      	pop	{r3, r4, r5, pc}
 800641c:	20000d30 	.word	0x20000d30

08006420 <_fstat_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	4d07      	ldr	r5, [pc, #28]	; (8006440 <_fstat_r+0x20>)
 8006424:	2300      	movs	r3, #0
 8006426:	4604      	mov	r4, r0
 8006428:	4608      	mov	r0, r1
 800642a:	4611      	mov	r1, r2
 800642c:	602b      	str	r3, [r5, #0]
 800642e:	f7fa fd80 	bl	8000f32 <_fstat>
 8006432:	1c43      	adds	r3, r0, #1
 8006434:	d102      	bne.n	800643c <_fstat_r+0x1c>
 8006436:	682b      	ldr	r3, [r5, #0]
 8006438:	b103      	cbz	r3, 800643c <_fstat_r+0x1c>
 800643a:	6023      	str	r3, [r4, #0]
 800643c:	bd38      	pop	{r3, r4, r5, pc}
 800643e:	bf00      	nop
 8006440:	20000d30 	.word	0x20000d30

08006444 <_isatty_r>:
 8006444:	b538      	push	{r3, r4, r5, lr}
 8006446:	4d06      	ldr	r5, [pc, #24]	; (8006460 <_isatty_r+0x1c>)
 8006448:	2300      	movs	r3, #0
 800644a:	4604      	mov	r4, r0
 800644c:	4608      	mov	r0, r1
 800644e:	602b      	str	r3, [r5, #0]
 8006450:	f7fa fd7f 	bl	8000f52 <_isatty>
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	d102      	bne.n	800645e <_isatty_r+0x1a>
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	b103      	cbz	r3, 800645e <_isatty_r+0x1a>
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	bd38      	pop	{r3, r4, r5, pc}
 8006460:	20000d30 	.word	0x20000d30

08006464 <_lseek_r>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4d07      	ldr	r5, [pc, #28]	; (8006484 <_lseek_r+0x20>)
 8006468:	4604      	mov	r4, r0
 800646a:	4608      	mov	r0, r1
 800646c:	4611      	mov	r1, r2
 800646e:	2200      	movs	r2, #0
 8006470:	602a      	str	r2, [r5, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	f7fa fd78 	bl	8000f68 <_lseek>
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	d102      	bne.n	8006482 <_lseek_r+0x1e>
 800647c:	682b      	ldr	r3, [r5, #0]
 800647e:	b103      	cbz	r3, 8006482 <_lseek_r+0x1e>
 8006480:	6023      	str	r3, [r4, #0]
 8006482:	bd38      	pop	{r3, r4, r5, pc}
 8006484:	20000d30 	.word	0x20000d30

08006488 <_malloc_usable_size_r>:
 8006488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800648c:	1f18      	subs	r0, r3, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	bfbc      	itt	lt
 8006492:	580b      	ldrlt	r3, [r1, r0]
 8006494:	18c0      	addlt	r0, r0, r3
 8006496:	4770      	bx	lr

08006498 <_read_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	4d07      	ldr	r5, [pc, #28]	; (80064b8 <_read_r+0x20>)
 800649c:	4604      	mov	r4, r0
 800649e:	4608      	mov	r0, r1
 80064a0:	4611      	mov	r1, r2
 80064a2:	2200      	movs	r2, #0
 80064a4:	602a      	str	r2, [r5, #0]
 80064a6:	461a      	mov	r2, r3
 80064a8:	f7fa fcfe 	bl	8000ea8 <_read>
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d102      	bne.n	80064b6 <_read_r+0x1e>
 80064b0:	682b      	ldr	r3, [r5, #0]
 80064b2:	b103      	cbz	r3, 80064b6 <_read_r+0x1e>
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	bd38      	pop	{r3, r4, r5, pc}
 80064b8:	20000d30 	.word	0x20000d30

080064bc <_init>:
 80064bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064be:	bf00      	nop
 80064c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c2:	bc08      	pop	{r3}
 80064c4:	469e      	mov	lr, r3
 80064c6:	4770      	bx	lr

080064c8 <_fini>:
 80064c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ca:	bf00      	nop
 80064cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ce:	bc08      	pop	{r3}
 80064d0:	469e      	mov	lr, r3
 80064d2:	4770      	bx	lr
