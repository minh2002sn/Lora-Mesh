
Lora Mesh_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000447c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800458c  0800458c  0001458c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046fc  080046fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080046fc  080046fc  000146fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004704  08004704  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004704  08004704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004708  08004708  00014708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800470c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e44  20000070  0800477c  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001eb4  0800477c  00021eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000953d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e37  00000000  00000000  000295d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002b410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002be10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018066  00000000  00000000  0002c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3e9  00000000  00000000  0004479e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085525  00000000  00000000  0004fb87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d50ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d34  00000000  00000000  000d50fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004574 	.word	0x08004574

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004574 	.word	0x08004574

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_uldivmod>:
 8000160:	b953      	cbnz	r3, 8000178 <__aeabi_uldivmod+0x18>
 8000162:	b94a      	cbnz	r2, 8000178 <__aeabi_uldivmod+0x18>
 8000164:	2900      	cmp	r1, #0
 8000166:	bf08      	it	eq
 8000168:	2800      	cmpeq	r0, #0
 800016a:	bf1c      	itt	ne
 800016c:	f04f 31ff 	movne.w	r1, #4294967295
 8000170:	f04f 30ff 	movne.w	r0, #4294967295
 8000174:	f000 b976 	b.w	8000464 <__aeabi_idiv0>
 8000178:	f1ad 0c08 	sub.w	ip, sp, #8
 800017c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000180:	f000 f806 	bl	8000190 <__udivmoddi4>
 8000184:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018c:	b004      	add	sp, #16
 800018e:	4770      	bx	lr

08000190 <__udivmoddi4>:
 8000190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000194:	9e08      	ldr	r6, [sp, #32]
 8000196:	460d      	mov	r5, r1
 8000198:	4604      	mov	r4, r0
 800019a:	4688      	mov	r8, r1
 800019c:	2b00      	cmp	r3, #0
 800019e:	d14d      	bne.n	800023c <__udivmoddi4+0xac>
 80001a0:	428a      	cmp	r2, r1
 80001a2:	4694      	mov	ip, r2
 80001a4:	d968      	bls.n	8000278 <__udivmoddi4+0xe8>
 80001a6:	fab2 f282 	clz	r2, r2
 80001aa:	b152      	cbz	r2, 80001c2 <__udivmoddi4+0x32>
 80001ac:	fa01 f302 	lsl.w	r3, r1, r2
 80001b0:	f1c2 0120 	rsb	r1, r2, #32
 80001b4:	fa20 f101 	lsr.w	r1, r0, r1
 80001b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001bc:	ea41 0803 	orr.w	r8, r1, r3
 80001c0:	4094      	lsls	r4, r2
 80001c2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001c6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ca:	fa1f fe8c 	uxth.w	lr, ip
 80001ce:	fb01 8817 	mls	r8, r1, r7, r8
 80001d2:	fb07 f00e 	mul.w	r0, r7, lr
 80001d6:	0c23      	lsrs	r3, r4, #16
 80001d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001dc:	4298      	cmp	r0, r3
 80001de:	d90a      	bls.n	80001f6 <__udivmoddi4+0x66>
 80001e0:	eb1c 0303 	adds.w	r3, ip, r3
 80001e4:	f107 35ff 	add.w	r5, r7, #4294967295
 80001e8:	f080 811e 	bcs.w	8000428 <__udivmoddi4+0x298>
 80001ec:	4298      	cmp	r0, r3
 80001ee:	f240 811b 	bls.w	8000428 <__udivmoddi4+0x298>
 80001f2:	3f02      	subs	r7, #2
 80001f4:	4463      	add	r3, ip
 80001f6:	1a1b      	subs	r3, r3, r0
 80001f8:	fbb3 f0f1 	udiv	r0, r3, r1
 80001fc:	fb01 3310 	mls	r3, r1, r0, r3
 8000200:	fb00 fe0e 	mul.w	lr, r0, lr
 8000204:	b2a4      	uxth	r4, r4
 8000206:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800020a:	45a6      	cmp	lr, r4
 800020c:	d90a      	bls.n	8000224 <__udivmoddi4+0x94>
 800020e:	eb1c 0404 	adds.w	r4, ip, r4
 8000212:	f100 33ff 	add.w	r3, r0, #4294967295
 8000216:	f080 8109 	bcs.w	800042c <__udivmoddi4+0x29c>
 800021a:	45a6      	cmp	lr, r4
 800021c:	f240 8106 	bls.w	800042c <__udivmoddi4+0x29c>
 8000220:	4464      	add	r4, ip
 8000222:	3802      	subs	r0, #2
 8000224:	2100      	movs	r1, #0
 8000226:	eba4 040e 	sub.w	r4, r4, lr
 800022a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800022e:	b11e      	cbz	r6, 8000238 <__udivmoddi4+0xa8>
 8000230:	2300      	movs	r3, #0
 8000232:	40d4      	lsrs	r4, r2
 8000234:	e9c6 4300 	strd	r4, r3, [r6]
 8000238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800023c:	428b      	cmp	r3, r1
 800023e:	d908      	bls.n	8000252 <__udivmoddi4+0xc2>
 8000240:	2e00      	cmp	r6, #0
 8000242:	f000 80ee 	beq.w	8000422 <__udivmoddi4+0x292>
 8000246:	2100      	movs	r1, #0
 8000248:	e9c6 0500 	strd	r0, r5, [r6]
 800024c:	4608      	mov	r0, r1
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	fab3 f183 	clz	r1, r3
 8000256:	2900      	cmp	r1, #0
 8000258:	d14a      	bne.n	80002f0 <__udivmoddi4+0x160>
 800025a:	42ab      	cmp	r3, r5
 800025c:	d302      	bcc.n	8000264 <__udivmoddi4+0xd4>
 800025e:	4282      	cmp	r2, r0
 8000260:	f200 80fc 	bhi.w	800045c <__udivmoddi4+0x2cc>
 8000264:	1a84      	subs	r4, r0, r2
 8000266:	eb65 0303 	sbc.w	r3, r5, r3
 800026a:	2001      	movs	r0, #1
 800026c:	4698      	mov	r8, r3
 800026e:	2e00      	cmp	r6, #0
 8000270:	d0e2      	beq.n	8000238 <__udivmoddi4+0xa8>
 8000272:	e9c6 4800 	strd	r4, r8, [r6]
 8000276:	e7df      	b.n	8000238 <__udivmoddi4+0xa8>
 8000278:	b902      	cbnz	r2, 800027c <__udivmoddi4+0xec>
 800027a:	deff      	udf	#255	; 0xff
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	2a00      	cmp	r2, #0
 8000282:	f040 8091 	bne.w	80003a8 <__udivmoddi4+0x218>
 8000286:	eba1 000c 	sub.w	r0, r1, ip
 800028a:	2101      	movs	r1, #1
 800028c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000290:	fa1f fe8c 	uxth.w	lr, ip
 8000294:	fbb0 f3f7 	udiv	r3, r0, r7
 8000298:	fb07 0013 	mls	r0, r7, r3, r0
 800029c:	0c25      	lsrs	r5, r4, #16
 800029e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002a2:	fb0e f003 	mul.w	r0, lr, r3
 80002a6:	42a8      	cmp	r0, r5
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0x12c>
 80002aa:	eb1c 0505 	adds.w	r5, ip, r5
 80002ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80002b2:	d202      	bcs.n	80002ba <__udivmoddi4+0x12a>
 80002b4:	42a8      	cmp	r0, r5
 80002b6:	f200 80ce 	bhi.w	8000456 <__udivmoddi4+0x2c6>
 80002ba:	4643      	mov	r3, r8
 80002bc:	1a2d      	subs	r5, r5, r0
 80002be:	fbb5 f0f7 	udiv	r0, r5, r7
 80002c2:	fb07 5510 	mls	r5, r7, r0, r5
 80002c6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002d0:	45a6      	cmp	lr, r4
 80002d2:	d908      	bls.n	80002e6 <__udivmoddi4+0x156>
 80002d4:	eb1c 0404 	adds.w	r4, ip, r4
 80002d8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002dc:	d202      	bcs.n	80002e4 <__udivmoddi4+0x154>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f200 80b6 	bhi.w	8000450 <__udivmoddi4+0x2c0>
 80002e4:	4628      	mov	r0, r5
 80002e6:	eba4 040e 	sub.w	r4, r4, lr
 80002ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002ee:	e79e      	b.n	800022e <__udivmoddi4+0x9e>
 80002f0:	f1c1 0720 	rsb	r7, r1, #32
 80002f4:	408b      	lsls	r3, r1
 80002f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80002fe:	fa25 fa07 	lsr.w	sl, r5, r7
 8000302:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000306:	fbba f8f9 	udiv	r8, sl, r9
 800030a:	fa20 f307 	lsr.w	r3, r0, r7
 800030e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000312:	408d      	lsls	r5, r1
 8000314:	fa1f fe8c 	uxth.w	lr, ip
 8000318:	431d      	orrs	r5, r3
 800031a:	fa00 f301 	lsl.w	r3, r0, r1
 800031e:	fb08 f00e 	mul.w	r0, r8, lr
 8000322:	0c2c      	lsrs	r4, r5, #16
 8000324:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000328:	42a0      	cmp	r0, r4
 800032a:	fa02 f201 	lsl.w	r2, r2, r1
 800032e:	d90b      	bls.n	8000348 <__udivmoddi4+0x1b8>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f108 3aff 	add.w	sl, r8, #4294967295
 8000338:	f080 8088 	bcs.w	800044c <__udivmoddi4+0x2bc>
 800033c:	42a0      	cmp	r0, r4
 800033e:	f240 8085 	bls.w	800044c <__udivmoddi4+0x2bc>
 8000342:	f1a8 0802 	sub.w	r8, r8, #2
 8000346:	4464      	add	r4, ip
 8000348:	1a24      	subs	r4, r4, r0
 800034a:	fbb4 f0f9 	udiv	r0, r4, r9
 800034e:	fb09 4410 	mls	r4, r9, r0, r4
 8000352:	fb00 fe0e 	mul.w	lr, r0, lr
 8000356:	b2ad      	uxth	r5, r5
 8000358:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x1e2>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 35ff 	add.w	r5, r0, #4294967295
 8000368:	d26c      	bcs.n	8000444 <__udivmoddi4+0x2b4>
 800036a:	45a6      	cmp	lr, r4
 800036c:	d96a      	bls.n	8000444 <__udivmoddi4+0x2b4>
 800036e:	3802      	subs	r0, #2
 8000370:	4464      	add	r4, ip
 8000372:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000376:	fba0 9502 	umull	r9, r5, r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	42ac      	cmp	r4, r5
 8000380:	46c8      	mov	r8, r9
 8000382:	46ae      	mov	lr, r5
 8000384:	d356      	bcc.n	8000434 <__udivmoddi4+0x2a4>
 8000386:	d053      	beq.n	8000430 <__udivmoddi4+0x2a0>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d069      	beq.n	8000460 <__udivmoddi4+0x2d0>
 800038c:	ebb3 0208 	subs.w	r2, r3, r8
 8000390:	eb64 040e 	sbc.w	r4, r4, lr
 8000394:	fa22 f301 	lsr.w	r3, r2, r1
 8000398:	fa04 f707 	lsl.w	r7, r4, r7
 800039c:	431f      	orrs	r7, r3
 800039e:	40cc      	lsrs	r4, r1
 80003a0:	e9c6 7400 	strd	r7, r4, [r6]
 80003a4:	2100      	movs	r1, #0
 80003a6:	e747      	b.n	8000238 <__udivmoddi4+0xa8>
 80003a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ac:	f1c2 0120 	rsb	r1, r2, #32
 80003b0:	fa25 f301 	lsr.w	r3, r5, r1
 80003b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b8:	fa20 f101 	lsr.w	r1, r0, r1
 80003bc:	4095      	lsls	r5, r2
 80003be:	430d      	orrs	r5, r1
 80003c0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003c4:	fb07 3311 	mls	r3, r7, r1, r3
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	0c28      	lsrs	r0, r5, #16
 80003ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d2:	fb01 f30e 	mul.w	r3, r1, lr
 80003d6:	4283      	cmp	r3, r0
 80003d8:	fa04 f402 	lsl.w	r4, r4, r2
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x260>
 80003de:	eb1c 0000 	adds.w	r0, ip, r0
 80003e2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003e6:	d22f      	bcs.n	8000448 <__udivmoddi4+0x2b8>
 80003e8:	4283      	cmp	r3, r0
 80003ea:	d92d      	bls.n	8000448 <__udivmoddi4+0x2b8>
 80003ec:	3902      	subs	r1, #2
 80003ee:	4460      	add	r0, ip
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	fbb0 f3f7 	udiv	r3, r0, r7
 80003f6:	fb07 0013 	mls	r0, r7, r3, r0
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000400:	fb03 f00e 	mul.w	r0, r3, lr
 8000404:	42a8      	cmp	r0, r5
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x28a>
 8000408:	eb1c 0505 	adds.w	r5, ip, r5
 800040c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000410:	d216      	bcs.n	8000440 <__udivmoddi4+0x2b0>
 8000412:	42a8      	cmp	r0, r5
 8000414:	d914      	bls.n	8000440 <__udivmoddi4+0x2b0>
 8000416:	3b02      	subs	r3, #2
 8000418:	4465      	add	r5, ip
 800041a:	1a28      	subs	r0, r5, r0
 800041c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000420:	e738      	b.n	8000294 <__udivmoddi4+0x104>
 8000422:	4631      	mov	r1, r6
 8000424:	4630      	mov	r0, r6
 8000426:	e707      	b.n	8000238 <__udivmoddi4+0xa8>
 8000428:	462f      	mov	r7, r5
 800042a:	e6e4      	b.n	80001f6 <__udivmoddi4+0x66>
 800042c:	4618      	mov	r0, r3
 800042e:	e6f9      	b.n	8000224 <__udivmoddi4+0x94>
 8000430:	454b      	cmp	r3, r9
 8000432:	d2a9      	bcs.n	8000388 <__udivmoddi4+0x1f8>
 8000434:	ebb9 0802 	subs.w	r8, r9, r2
 8000438:	eb65 0e0c 	sbc.w	lr, r5, ip
 800043c:	3801      	subs	r0, #1
 800043e:	e7a3      	b.n	8000388 <__udivmoddi4+0x1f8>
 8000440:	4643      	mov	r3, r8
 8000442:	e7ea      	b.n	800041a <__udivmoddi4+0x28a>
 8000444:	4628      	mov	r0, r5
 8000446:	e794      	b.n	8000372 <__udivmoddi4+0x1e2>
 8000448:	4641      	mov	r1, r8
 800044a:	e7d1      	b.n	80003f0 <__udivmoddi4+0x260>
 800044c:	46d0      	mov	r8, sl
 800044e:	e77b      	b.n	8000348 <__udivmoddi4+0x1b8>
 8000450:	4464      	add	r4, ip
 8000452:	3802      	subs	r0, #2
 8000454:	e747      	b.n	80002e6 <__udivmoddi4+0x156>
 8000456:	3b02      	subs	r3, #2
 8000458:	4465      	add	r5, ip
 800045a:	e72f      	b.n	80002bc <__udivmoddi4+0x12c>
 800045c:	4608      	mov	r0, r1
 800045e:	e706      	b.n	800026e <__udivmoddi4+0xde>
 8000460:	4631      	mov	r1, r6
 8000462:	e6e9      	b.n	8000238 <__udivmoddi4+0xa8>

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <Push_Command_To_Ring_Buffer>:
BUTTON_HandleTypedef btn;
uint8_t tx_frame_data[255];
uint8_t tx_frame_len = 0;

void Push_Command_To_Ring_Buffer(uint8_t final_des_id, uint8_t temp_des_id, uint8_t time_to_live, uint8_t is_requiring_reply, uint8_t length, uint8_t buffer[])
{
 8000468:	b5b0      	push	{r4, r5, r7, lr}
 800046a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800046e:	af40      	add	r7, sp, #256	; 0x100
 8000470:	4605      	mov	r5, r0
 8000472:	460c      	mov	r4, r1
 8000474:	4610      	mov	r0, r2
 8000476:	4619      	mov	r1, r3
 8000478:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800047c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000480:	462a      	mov	r2, r5
 8000482:	701a      	strb	r2, [r3, #0]
 8000484:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000488:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 800048c:	4622      	mov	r2, r4
 800048e:	701a      	strb	r2, [r3, #0]
 8000490:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000494:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8000498:	4602      	mov	r2, r0
 800049a:	701a      	strb	r2, [r3, #0]
 800049c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80004a4:	460a      	mov	r2, r1
 80004a6:	701a      	strb	r2, [r3, #0]
	PACKET_STRUCTURE temp_data = {final_des_id, temp_des_id, FS_Data.my_id, time_to_live, length};
 80004a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80004b0:	4618      	mov	r0, r3
 80004b2:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80004b6:	461a      	mov	r2, r3
 80004b8:	2100      	movs	r1, #0
 80004ba:	f003 fbd7 	bl	8003c6c <memset>
 80004be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004c2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80004c6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80004ca:	f2a2 1211 	subw	r2, r2, #273	; 0x111
 80004ce:	7812      	ldrb	r2, [r2, #0]
 80004d0:	701a      	strb	r2, [r3, #0]
 80004d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80004da:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80004de:	f5a2 7289 	sub.w	r2, r2, #274	; 0x112
 80004e2:	7812      	ldrb	r2, [r2, #0]
 80004e4:	705a      	strb	r2, [r3, #1]
 80004e6:	4b2c      	ldr	r3, [pc, #176]	; (8000598 <Push_Command_To_Ring_Buffer+0x130>)
 80004e8:	781a      	ldrb	r2, [r3, #0]
 80004ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004ee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80004f2:	709a      	strb	r2, [r3, #2]
 80004f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004f8:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 80004fc:	f993 2000 	ldrsb.w	r2, [r3]
 8000500:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000504:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000508:	70da      	strb	r2, [r3, #3]
 800050a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800050e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000512:	f897 2128 	ldrb.w	r2, [r7, #296]	; 0x128
 8000516:	711a      	strb	r2, [r3, #4]
	for(int i = 0; i < length; i++)
 8000518:	2300      	movs	r3, #0
 800051a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800051e:	e014      	b.n	800054a <Push_Command_To_Ring_Buffer+0xe2>
	{
		temp_data.buffer[i] = buffer[i];
 8000520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000524:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000528:	4413      	add	r3, r2
 800052a:	7819      	ldrb	r1, [r3, #0]
 800052c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000530:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8000534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000538:	4413      	add	r3, r2
 800053a:	3305      	adds	r3, #5
 800053c:	460a      	mov	r2, r1
 800053e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < length; i++)
 8000540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000544:	3301      	adds	r3, #1
 8000546:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800054a:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 800054e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000552:	429a      	cmp	r2, r3
 8000554:	dbe4      	blt.n	8000520 <Push_Command_To_Ring_Buffer+0xb8>
	}
	temp_data.is_requiring_reply = is_requiring_reply;
 8000556:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800055a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800055e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000562:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	RING_BUFFER_Push(&ring_buffer, temp_data);
 800056c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000570:	f5a3 7488 	sub.w	r4, r3, #272	; 0x110
 8000574:	4668      	mov	r0, sp
 8000576:	f104 030c 	add.w	r3, r4, #12
 800057a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800057e:	4619      	mov	r1, r3
 8000580:	f003 fb66 	bl	8003c50 <memcpy>
 8000584:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <Push_Command_To_Ring_Buffer+0x134>)
 800058a:	f003 fab8 	bl	8003afe <RING_BUFFER_Push>
}
 800058e:	bf00      	nop
 8000590:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000594:	46bd      	mov	sp, r7
 8000596:	bdb0      	pop	{r4, r5, r7, pc}
 8000598:	200011f4 	.word	0x200011f4
 800059c:	20000ba0 	.word	0x20000ba0

080005a0 <Command_Sending_Handle>:

void Command_Sending_Handle()
{
 80005a0:	b5b0      	push	{r4, r5, r7, lr}
 80005a2:	b0c6      	sub	sp, #280	; 0x118
 80005a4:	af02      	add	r7, sp, #8
	if(RING_BUFFER_Available(&ring_buffer) && FRAME_SYNC_Is_Ready_Transmit())
 80005a6:	481d      	ldr	r0, [pc, #116]	; (800061c <Command_Sending_Handle+0x7c>)
 80005a8:	f003 fb15 	bl	8003bd6 <RING_BUFFER_Available>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d02e      	beq.n	8000610 <Command_Sending_Handle+0x70>
 80005b2:	f002 fe19 	bl	80031e8 <FRAME_SYNC_Is_Ready_Transmit>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d029      	beq.n	8000610 <Command_Sending_Handle+0x70>
	{
		PACKET_STRUCTURE temp_data;
		RING_BUFFER_Pop(&ring_buffer, &temp_data);
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	4619      	mov	r1, r3
 80005c0:	4816      	ldr	r0, [pc, #88]	; (800061c <Command_Sending_Handle+0x7c>)
 80005c2:	f003 fad5 	bl	8003b70 <RING_BUFFER_Pop>
		FRAME_SYNC_Send_Frame(temp_data.final_des_id, temp_data.temp_des_id, temp_data.time_to_live, temp_data.buffer, temp_data.length, temp_data.is_requiring_reply);
 80005c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80005ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005ce:	7818      	ldrb	r0, [r3, #0]
 80005d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80005d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005d8:	785c      	ldrb	r4, [r3, #1]
 80005da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80005de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005e2:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80005e6:	b2dd      	uxtb	r5, r3
 80005e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80005ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80005f6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80005fa:	f892 2108 	ldrb.w	r2, [r2, #264]	; 0x108
 80005fe:	1d39      	adds	r1, r7, #4
 8000600:	3105      	adds	r1, #5
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	460b      	mov	r3, r1
 8000608:	462a      	mov	r2, r5
 800060a:	4621      	mov	r1, r4
 800060c:	f002 fae0 	bl	8002bd0 <FRAME_SYNC_Send_Frame>
	}
}
 8000610:	bf00      	nop
 8000612:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000616:	46bd      	mov	sp, r7
 8000618:	bdb0      	pop	{r4, r5, r7, pc}
 800061a:	bf00      	nop
 800061c:	20000ba0 	.word	0x20000ba0

08000620 <FRAME_SYNC_RxCpltCallback>:

void FRAME_SYNC_RxCpltCallback(PACKET_STRUCTURE rx_packet)
{
 8000620:	b084      	sub	sp, #16
 8000622:	b590      	push	{r4, r7, lr}
 8000624:	b09d      	sub	sp, #116	; 0x74
 8000626:	af00      	add	r7, sp, #0
 8000628:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800062c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		uint8_t temp_cmd[] = {rx_packet.buffer[0], FS_Data.my_id, counter};
		Push_Command_To_Ring_Buffer(0, FS_Data.my_id - 1, 7, 0, sizeof(temp_cmd), temp_cmd);
	}
#endif

	char tx_str[100] = {};
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2260      	movs	r2, #96	; 0x60
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f003 fb15 	bl	8003c6c <memset>
	sprintf(tx_str, "\nSource ID: %02X\nData: ", rx_packet.src_id);
 8000642:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8000646:	461a      	mov	r2, r3
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	4924      	ldr	r1, [pc, #144]	; (80006e0 <FRAME_SYNC_RxCpltCallback+0xc0>)
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fb14 	bl	8003c7c <siprintf>
	for(int i = 0; i < rx_packet.length; i++)
 8000654:	2300      	movs	r3, #0
 8000656:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000658:	e014      	b.n	8000684 <FRAME_SYNC_RxCpltCallback+0x64>
	{
		char temp_str[4];
		sprintf(temp_str, "%02X ", rx_packet.buffer[i]);
 800065a:	f107 0285 	add.w	r2, r7, #133	; 0x85
 800065e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	491e      	ldr	r1, [pc, #120]	; (80006e4 <FRAME_SYNC_RxCpltCallback+0xc4>)
 800066a:	4618      	mov	r0, r3
 800066c:	f003 fb06 	bl	8003c7c <siprintf>
		strcat(tx_str, temp_str);
 8000670:	1d3a      	adds	r2, r7, #4
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	4611      	mov	r1, r2
 8000678:	4618      	mov	r0, r3
 800067a:	f003 fb1f 	bl	8003cbc <strcat>
	for(int i = 0; i < rx_packet.length; i++)
 800067e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000680:	3301      	adds	r3, #1
 8000682:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000684:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000688:	461a      	mov	r2, r3
 800068a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800068c:	4293      	cmp	r3, r2
 800068e:	dbe4      	blt.n	800065a <FRAME_SYNC_RxCpltCallback+0x3a>
	}
	strcat(tx_str, "\nCRC Correct\n");
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fd5b 	bl	8000150 <strlen>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	4413      	add	r3, r2
 80006a4:	4a10      	ldr	r2, [pc, #64]	; (80006e8 <FRAME_SYNC_RxCpltCallback+0xc8>)
 80006a6:	461c      	mov	r4, r3
 80006a8:	4613      	mov	r3, r2
 80006aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80006ac:	6020      	str	r0, [r4, #0]
 80006ae:	6061      	str	r1, [r4, #4]
 80006b0:	60a2      	str	r2, [r4, #8]
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	81a3      	strh	r3, [r4, #12]
	HAL_UART_Transmit(&huart1, (uint8_t *)tx_str, strlen(tx_str), 1000);
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd48 	bl	8000150 <strlen>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	f107 0108 	add.w	r1, r7, #8
 80006c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006cc:	4807      	ldr	r0, [pc, #28]	; (80006ec <FRAME_SYNC_RxCpltCallback+0xcc>)
 80006ce:	f001 ff04 	bl	80024da <HAL_UART_Transmit>

}
 80006d2:	bf00      	nop
 80006d4:	3774      	adds	r7, #116	; 0x74
 80006d6:	46bd      	mov	sp, r7
 80006d8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80006dc:	b004      	add	sp, #16
 80006de:	4770      	bx	lr
 80006e0:	0800458c 	.word	0x0800458c
 80006e4:	080045a4 	.word	0x080045a4
 80006e8:	080045ac 	.word	0x080045ac
 80006ec:	200000e4 	.word	0x200000e4

080006f0 <FRAME_SYNC_RxFailCallback>:

void FRAME_SYNC_RxFailCallback(uint8_t *p_rx_data, uint8_t data_size)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b09c      	sub	sp, #112	; 0x70
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	70fb      	strb	r3, [r7, #3]
	char tx_str[100] = "\nCRC Fail\n";
 80006fc:	4a10      	ldr	r2, [pc, #64]	; (8000740 <FRAME_SYNC_RxFailCallback+0x50>)
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	ca07      	ldmia	r2, {r0, r1, r2}
 8000704:	c303      	stmia	r3!, {r0, r1}
 8000706:	801a      	strh	r2, [r3, #0]
 8000708:	3302      	adds	r3, #2
 800070a:	0c12      	lsrs	r2, r2, #16
 800070c:	701a      	strb	r2, [r3, #0]
 800070e:	f107 0317 	add.w	r3, r7, #23
 8000712:	2259      	movs	r2, #89	; 0x59
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f003 faa8 	bl	8003c6c <memset>
	HAL_UART_Transmit(&huart1, (uint8_t *)tx_str, strlen(tx_str), 1000);
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fd15 	bl	8000150 <strlen>
 8000726:	4603      	mov	r3, r0
 8000728:	b29a      	uxth	r2, r3
 800072a:	f107 010c 	add.w	r1, r7, #12
 800072e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000732:	4804      	ldr	r0, [pc, #16]	; (8000744 <FRAME_SYNC_RxFailCallback+0x54>)
 8000734:	f001 fed1 	bl	80024da <HAL_UART_Transmit>
}
 8000738:	bf00      	nop
 800073a:	3770      	adds	r7, #112	; 0x70
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	080045bc 	.word	0x080045bc
 8000744:	200000e4 	.word	0x200000e4

08000748 <FRAME_SYNC_Packet_Transmit>:
		HAL_UART_Receive_IT(&huart1, &uart_rx_buf, 1);
	}
}

void FRAME_SYNC_Packet_Transmit(uint8_t* tx_buffer, uint8_t tx_buffer_length)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	460b      	mov	r3, r1
 8000752:	70fb      	strb	r3, [r7, #3]
	SX1278_transmit(&hlora, tx_buffer, tx_buffer_length, 2000);
 8000754:	78fa      	ldrb	r2, [r7, #3]
 8000756:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	4806      	ldr	r0, [pc, #24]	; (8000778 <FRAME_SYNC_Packet_Transmit+0x30>)
 800075e:	f003 f8ba 	bl	80038d6 <SX1278_transmit>
	SX1278_LoRaEntryRx(&hlora, 0, 2000);
 8000762:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000766:	2100      	movs	r1, #0
 8000768:	4803      	ldr	r0, [pc, #12]	; (8000778 <FRAME_SYNC_Packet_Transmit+0x30>)
 800076a:	f002 ff47 	bl	80035fc <SX1278_LoRaEntryRx>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000bc8 	.word	0x20000bc8

0800077c <FRAME_SYNC_Packet_Receive>:

void FRAME_SYNC_Packet_Receive()
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
  	if(hlora.status != RX)
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <FRAME_SYNC_Packet_Receive+0x6c>)
 8000784:	7d9b      	ldrb	r3, [r3, #22]
 8000786:	2b03      	cmp	r3, #3
 8000788:	d005      	beq.n	8000796 <FRAME_SYNC_Packet_Receive+0x1a>
  	{
  		SX1278_LoRaEntryRx(&hlora, 0, 2000);
 800078a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800078e:	2100      	movs	r1, #0
 8000790:	4815      	ldr	r0, [pc, #84]	; (80007e8 <FRAME_SYNC_Packet_Receive+0x6c>)
 8000792:	f002 ff33 	bl	80035fc <SX1278_LoRaEntryRx>
  	}

	num_rx_byte = SX1278_LoRaRxPacket(&hlora);
 8000796:	4814      	ldr	r0, [pc, #80]	; (80007e8 <FRAME_SYNC_Packet_Receive+0x6c>)
 8000798:	f002 ff95 	bl	80036c6 <SX1278_LoRaRxPacket>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <FRAME_SYNC_Packet_Receive+0x70>)
 80007a2:	701a      	strb	r2, [r3, #0]
	if(num_rx_byte > 0)
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <FRAME_SYNC_Packet_Receive+0x70>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d019      	beq.n	80007e0 <FRAME_SYNC_Packet_Receive+0x64>
	{
		SX1278_read(&hlora, LoRa_Rx_Buffer, num_rx_byte);
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <FRAME_SYNC_Packet_Receive+0x70>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	490f      	ldr	r1, [pc, #60]	; (80007f0 <FRAME_SYNC_Packet_Receive+0x74>)
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <FRAME_SYNC_Packet_Receive+0x6c>)
 80007b6:	f003 f8ac 	bl	8003912 <SX1278_read>
		for(int i = 0; i < num_rx_byte; i++)
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	e009      	b.n	80007d4 <FRAME_SYNC_Packet_Receive+0x58>
		{
			FRAME_SYNC_Receive(LoRa_Rx_Buffer[i]);
 80007c0:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <FRAME_SYNC_Packet_Receive+0x74>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f002 fbbf 	bl	8002f4c <FRAME_SYNC_Receive>
		for(int i = 0; i < num_rx_byte; i++)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3301      	adds	r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <FRAME_SYNC_Packet_Receive+0x70>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4293      	cmp	r3, r2
 80007de:	dbef      	blt.n	80007c0 <FRAME_SYNC_Packet_Receive+0x44>
		}
	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000bc8 	.word	0x20000bc8
 80007ec:	20000ddf 	.word	0x20000ddf
 80007f0:	20000ce0 	.word	0x20000ce0
 80007f4:	00000000 	.word	0x00000000

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fe:	f000 fad1 	bl	8000da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f897 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000806:	f000 f93b 	bl	8000a80 <MX_GPIO_Init>
  MX_SPI1_Init();
 800080a:	f000 f8d9 	bl	80009c0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800080e:	f000 f90d 	bl	8000a2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  hlora_hw.dio0.port = D0_GPIO_Port;
 8000812:	4b3f      	ldr	r3, [pc, #252]	; (8000910 <main+0x118>)
 8000814:	4a3f      	ldr	r2, [pc, #252]	; (8000914 <main+0x11c>)
 8000816:	60da      	str	r2, [r3, #12]
  hlora_hw.dio0.pin = D0_Pin;
 8000818:	4b3d      	ldr	r3, [pc, #244]	; (8000910 <main+0x118>)
 800081a:	2204      	movs	r2, #4
 800081c:	609a      	str	r2, [r3, #8]
  hlora_hw.nss.port = NSS_GPIO_Port;
 800081e:	4b3c      	ldr	r3, [pc, #240]	; (8000910 <main+0x118>)
 8000820:	4a3c      	ldr	r2, [pc, #240]	; (8000914 <main+0x11c>)
 8000822:	615a      	str	r2, [r3, #20]
  hlora_hw.nss.pin = NSS_Pin;
 8000824:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <main+0x118>)
 8000826:	2210      	movs	r2, #16
 8000828:	611a      	str	r2, [r3, #16]
  hlora_hw.reset.port = RST_GPIO_Port;
 800082a:	4b39      	ldr	r3, [pc, #228]	; (8000910 <main+0x118>)
 800082c:	4a39      	ldr	r2, [pc, #228]	; (8000914 <main+0x11c>)
 800082e:	605a      	str	r2, [r3, #4]
  hlora_hw.reset.pin = RST_Pin;
 8000830:	4b37      	ldr	r3, [pc, #220]	; (8000910 <main+0x118>)
 8000832:	2208      	movs	r2, #8
 8000834:	601a      	str	r2, [r3, #0]
  hlora_hw.spi = &hspi1;
 8000836:	4b36      	ldr	r3, [pc, #216]	; (8000910 <main+0x118>)
 8000838:	4a37      	ldr	r2, [pc, #220]	; (8000918 <main+0x120>)
 800083a:	619a      	str	r2, [r3, #24]

  hlora.hw = &hlora_hw;
 800083c:	4b37      	ldr	r3, [pc, #220]	; (800091c <main+0x124>)
 800083e:	4a34      	ldr	r2, [pc, #208]	; (8000910 <main+0x118>)
 8000840:	601a      	str	r2, [r3, #0]
  SX1278_init(&hlora, 434000000, SX1278_POWER_20DBM, SX1278_LORA_SF_12,
 8000842:	230a      	movs	r3, #10
 8000844:	9305      	str	r3, [sp, #20]
 8000846:	2300      	movs	r3, #0
 8000848:	9304      	str	r3, [sp, #16]
 800084a:	2303      	movs	r3, #3
 800084c:	9303      	str	r3, [sp, #12]
 800084e:	2309      	movs	r3, #9
 8000850:	9302      	str	r3, [sp, #8]
 8000852:	2306      	movs	r3, #6
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	2300      	movs	r3, #0
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	a32b      	add	r3, pc, #172	; (adr r3, 8000908 <main+0x110>)
 800085c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000860:	482e      	ldr	r0, [pc, #184]	; (800091c <main+0x124>)
 8000862:	f003 f80b 	bl	800387c <SX1278_init>
		  SX1278_LORA_BW_500KHZ, SX1278_LORA_CR_4_8, SX1278_LORA_CRC_EN, 10);

  HAL_UART_Receive_IT(&huart1, &uart_rx_buf, 1);
 8000866:	2201      	movs	r2, #1
 8000868:	492d      	ldr	r1, [pc, #180]	; (8000920 <main+0x128>)
 800086a:	482e      	ldr	r0, [pc, #184]	; (8000924 <main+0x12c>)
 800086c:	f001 fec7 	bl	80025fe <HAL_UART_Receive_IT>

  SX1278_LoRaEntryRx(&hlora, 0, 2000);
 8000870:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000874:	2100      	movs	r1, #0
 8000876:	4829      	ldr	r0, [pc, #164]	; (800091c <main+0x124>)
 8000878:	f002 fec0 	bl	80035fc <SX1278_LoRaEntryRx>

  RING_BUFFER_Init(&ring_buffer, command_buffer, 10);
 800087c:	220a      	movs	r2, #10
 800087e:	492a      	ldr	r1, [pc, #168]	; (8000928 <main+0x130>)
 8000880:	482a      	ldr	r0, [pc, #168]	; (800092c <main+0x134>)
 8000882:	f003 f924 	bl	8003ace <RING_BUFFER_Init>

    /* USER CODE BEGIN 3 */

#if MY_ID == 0
	  static uint32_t timer = 0;
	  if(HAL_GetTick() - timer > 30000)
 8000886:	f000 fae5 	bl	8000e54 <HAL_GetTick>
 800088a:	4602      	mov	r2, r0
 800088c:	4b28      	ldr	r3, [pc, #160]	; (8000930 <main+0x138>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	f247 5230 	movw	r2, #30000	; 0x7530
 8000896:	4293      	cmp	r3, r2
 8000898:	d92e      	bls.n	80008f8 <main+0x100>
	  {
		  uint8_t temp_cmd[] = {0x02};
 800089a:	2302      	movs	r3, #2
 800089c:	713b      	strb	r3, [r7, #4]
		  Push_Command_To_Ring_Buffer(1, 1, 7, 1, sizeof(temp_cmd), temp_cmd);
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	9301      	str	r3, [sp, #4]
 80008a2:	2301      	movs	r3, #1
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	2301      	movs	r3, #1
 80008a8:	2207      	movs	r2, #7
 80008aa:	2101      	movs	r1, #1
 80008ac:	2001      	movs	r0, #1
 80008ae:	f7ff fddb 	bl	8000468 <Push_Command_To_Ring_Buffer>
		  Push_Command_To_Ring_Buffer(2, 1, 7, 1, sizeof(temp_cmd), temp_cmd);
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	2301      	movs	r3, #1
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2301      	movs	r3, #1
 80008bc:	2207      	movs	r2, #7
 80008be:	2101      	movs	r1, #1
 80008c0:	2002      	movs	r0, #2
 80008c2:	f7ff fdd1 	bl	8000468 <Push_Command_To_Ring_Buffer>
		  Push_Command_To_Ring_Buffer(3, 1, 7, 1, sizeof(temp_cmd), temp_cmd);
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	2301      	movs	r3, #1
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2301      	movs	r3, #1
 80008d0:	2207      	movs	r2, #7
 80008d2:	2101      	movs	r1, #1
 80008d4:	2003      	movs	r0, #3
 80008d6:	f7ff fdc7 	bl	8000468 <Push_Command_To_Ring_Buffer>
		  Push_Command_To_Ring_Buffer(4, 1, 7, 0, sizeof(temp_cmd), temp_cmd);
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	2301      	movs	r3, #1
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2300      	movs	r3, #0
 80008e4:	2207      	movs	r2, #7
 80008e6:	2101      	movs	r1, #1
 80008e8:	2004      	movs	r0, #4
 80008ea:	f7ff fdbd 	bl	8000468 <Push_Command_To_Ring_Buffer>
		  timer = HAL_GetTick();
 80008ee:	f000 fab1 	bl	8000e54 <HAL_GetTick>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <main+0x138>)
 80008f6:	6013      	str	r3, [r2, #0]

//	  BUTTON_Handle(&btn);

//	  COMMAND_LINE_Handle();

	  FRAME_SYNC_Handle();
 80008f8:	f002 fc0a 	bl	8003110 <FRAME_SYNC_Handle>

	  Command_Sending_Handle();
 80008fc:	f7ff fe50 	bl	80005a0 <Command_Sending_Handle>
  {
 8000900:	e7c1      	b.n	8000886 <main+0x8e>
 8000902:	bf00      	nop
 8000904:	f3af 8000 	nop.w
 8000908:	19de5080 	.word	0x19de5080
 800090c:	00000000 	.word	0x00000000
 8000910:	20000bac 	.word	0x20000bac
 8000914:	40010800 	.word	0x40010800
 8000918:	2000008c 	.word	0x2000008c
 800091c:	20000bc8 	.word	0x20000bc8
 8000920:	20000de0 	.word	0x20000de0
 8000924:	200000e4 	.word	0x200000e4
 8000928:	20000128 	.word	0x20000128
 800092c:	20000ba0 	.word	0x20000ba0
 8000930:	20000de4 	.word	0x20000de4

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b090      	sub	sp, #64	; 0x40
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 0318 	add.w	r3, r7, #24
 800093e:	2228      	movs	r2, #40	; 0x28
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f003 f992 	bl	8003c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000956:	2301      	movs	r3, #1
 8000958:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800095a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800095e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000964:	2301      	movs	r3, #1
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000968:	2302      	movs	r3, #2
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000970:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000972:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000976:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000978:	f107 0318 	add.w	r3, r7, #24
 800097c:	4618      	mov	r0, r3
 800097e:	f000 fd2f 	bl	80013e0 <HAL_RCC_OscConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000988:	f000 f8c4 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098c:	230f      	movs	r3, #15
 800098e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000990:	2302      	movs	r3, #2
 8000992:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2102      	movs	r1, #2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 ff9c 	bl	80018e4 <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009b2:	f000 f8af 	bl	8000b14 <Error_Handler>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3740      	adds	r7, #64	; 0x40
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_SPI1_Init+0x64>)
 80009c6:	4a18      	ldr	r2, [pc, #96]	; (8000a28 <MX_SPI1_Init+0x68>)
 80009c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_SPI1_Init+0x64>)
 80009cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_SPI1_Init+0x64>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_SPI1_Init+0x64>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_SPI1_Init+0x64>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_SPI1_Init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_SPI1_Init+0x64>)
 80009ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_SPI1_Init+0x64>)
 80009f4:	2210      	movs	r2, #16
 80009f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <MX_SPI1_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_SPI1_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <MX_SPI1_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_SPI1_Init+0x64>)
 8000a0c:	220a      	movs	r2, #10
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_SPI1_Init+0x64>)
 8000a12:	f001 f8ff 	bl	8001c14 <HAL_SPI_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a1c:	f000 f87a 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000008c 	.word	0x2000008c
 8000a28:	40013000 	.word	0x40013000

08000a2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <MX_USART1_UART_Init+0x50>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a64:	f001 fcec 	bl	8002440 <HAL_UART_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a6e:	f000 f851 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200000e4 	.word	0x200000e4
 8000a7c:	40013800 	.word	0x40013800

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_GPIO_Init+0x8c>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <MX_GPIO_Init+0x8c>)
 8000a9a:	f043 0320 	orr.w	r3, r3, #32
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_GPIO_Init+0x8c>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0320 	and.w	r3, r3, #32
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_GPIO_Init+0x8c>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a16      	ldr	r2, [pc, #88]	; (8000b0c <MX_GPIO_Init+0x8c>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_GPIO_Init+0x8c>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|NSS_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2118      	movs	r1, #24
 8000ac8:	4811      	ldr	r0, [pc, #68]	; (8000b10 <MX_GPIO_Init+0x90>)
 8000aca:	f000 fc70 	bl	80013ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : D0_Pin */
  GPIO_InitStruct.Pin = D0_Pin;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(D0_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480b      	ldr	r0, [pc, #44]	; (8000b10 <MX_GPIO_Init+0x90>)
 8000ae2:	f000 fac9 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|NSS_Pin;
 8000ae6:	2318      	movs	r3, #24
 8000ae8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2302      	movs	r3, #2
 8000af4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	4619      	mov	r1, r3
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_GPIO_Init+0x90>)
 8000afe:	f000 fabb 	bl	8001078 <HAL_GPIO_Init>

}
 8000b02:	bf00      	nop
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010800 	.word	0x40010800

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>
	...

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <HAL_MspInit+0x40>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	4a0d      	ldr	r2, [pc, #52]	; (8000b60 <HAL_MspInit+0x40>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6193      	str	r3, [r2, #24]
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <HAL_MspInit+0x40>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <HAL_MspInit+0x40>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <HAL_MspInit+0x40>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	61d3      	str	r3, [r2, #28]
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_MspInit+0x40>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <HAL_SPI_MspInit+0x88>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d12f      	bne.n	8000be4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <HAL_SPI_MspInit+0x8c>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <HAL_SPI_MspInit+0x8c>)
 8000b8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <HAL_SPI_MspInit+0x8c>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <HAL_SPI_MspInit+0x8c>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <HAL_SPI_MspInit+0x8c>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_SPI_MspInit+0x8c>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000bb4:	23a0      	movs	r3, #160	; 0xa0
 8000bb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <HAL_SPI_MspInit+0x90>)
 8000bc8:	f000 fa56 	bl	8001078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bcc:	2340      	movs	r3, #64	; 0x40
 8000bce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <HAL_SPI_MspInit+0x90>)
 8000be0:	f000 fa4a 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000be4:	bf00      	nop
 8000be6:	3720      	adds	r7, #32
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40013000 	.word	0x40013000
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40010800 	.word	0x40010800

08000bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a1c      	ldr	r2, [pc, #112]	; (8000c84 <HAL_UART_MspInit+0x8c>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d131      	bne.n	8000c7c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <HAL_UART_MspInit+0x90>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a1a      	ldr	r2, [pc, #104]	; (8000c88 <HAL_UART_MspInit+0x90>)
 8000c1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_UART_MspInit+0x90>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_UART_MspInit+0x90>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <HAL_UART_MspInit+0x90>)
 8000c36:	f043 0304 	orr.w	r3, r3, #4
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_UART_MspInit+0x90>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480b      	ldr	r0, [pc, #44]	; (8000c8c <HAL_UART_MspInit+0x94>)
 8000c5e:	f000 fa0b 	bl	8001078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	4619      	mov	r1, r3
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <HAL_UART_MspInit+0x94>)
 8000c78:	f000 f9fe 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40013800 	.word	0x40013800
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010800 	.word	0x40010800

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd6:	f000 f8ab 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f002 ff74 	bl	8003bfc <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20005000 	.word	0x20005000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	20000de8 	.word	0x20000de8
 8000d48:	20001eb8 	.word	0x20001eb8

08000d4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d5a:	490d      	ldr	r1, [pc, #52]	; (8000d90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d70:	4c0a      	ldr	r4, [pc, #40]	; (8000d9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d7e:	f7ff ffe5 	bl	8000d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d82:	f002 ff41 	bl	8003c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d86:	f7ff fd37 	bl	80007f8 <main>
  bx lr
 8000d8a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d94:	0800470c 	.word	0x0800470c
  ldr r2, =_sbss
 8000d98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d9c:	20001eb4 	.word	0x20001eb4

08000da0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da0:	e7fe      	b.n	8000da0 <ADC1_2_IRQHandler>
	...

08000da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_Init+0x28>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_Init+0x28>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f92b 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	200f      	movs	r0, #15
 8000dbc:	f000 f808 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff feae 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40022000 	.word	0x40022000

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f935 	bl	800105e <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f000 f90b 	bl	8001026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000004 	.word	0x20000004

08000e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_IncTick+0x1c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x20>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a03      	ldr	r2, [pc, #12]	; (8000e50 <HAL_IncTick+0x20>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000dec 	.word	0x20000dec

08000e54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <HAL_GetTick+0x10>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	20000dec 	.word	0x20000dec

08000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff fff0 	bl	8000e54 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_Delay+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e8e:	bf00      	nop
 8000e90:	f7ff ffe0 	bl	8000e54 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	f7ff ff90 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff49 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff5e 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff90 	bl	8000f68 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5f 	bl	8000f14 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffb0 	bl	8000fcc <SysTick_Config>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b08b      	sub	sp, #44	; 0x2c
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108a:	e169      	b.n	8001360 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800108c:	2201      	movs	r2, #1
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	f040 8158 	bne.w	800135a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	4a9a      	ldr	r2, [pc, #616]	; (8001318 <HAL_GPIO_Init+0x2a0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d05e      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010b4:	4a98      	ldr	r2, [pc, #608]	; (8001318 <HAL_GPIO_Init+0x2a0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d875      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010ba:	4a98      	ldr	r2, [pc, #608]	; (800131c <HAL_GPIO_Init+0x2a4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d058      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010c0:	4a96      	ldr	r2, [pc, #600]	; (800131c <HAL_GPIO_Init+0x2a4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d86f      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010c6:	4a96      	ldr	r2, [pc, #600]	; (8001320 <HAL_GPIO_Init+0x2a8>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d052      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010cc:	4a94      	ldr	r2, [pc, #592]	; (8001320 <HAL_GPIO_Init+0x2a8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d869      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010d2:	4a94      	ldr	r2, [pc, #592]	; (8001324 <HAL_GPIO_Init+0x2ac>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d04c      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010d8:	4a92      	ldr	r2, [pc, #584]	; (8001324 <HAL_GPIO_Init+0x2ac>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d863      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010de:	4a92      	ldr	r2, [pc, #584]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d046      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
 80010e4:	4a90      	ldr	r2, [pc, #576]	; (8001328 <HAL_GPIO_Init+0x2b0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d85d      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010ea:	2b12      	cmp	r3, #18
 80010ec:	d82a      	bhi.n	8001144 <HAL_GPIO_Init+0xcc>
 80010ee:	2b12      	cmp	r3, #18
 80010f0:	d859      	bhi.n	80011a6 <HAL_GPIO_Init+0x12e>
 80010f2:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <HAL_GPIO_Init+0x80>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	08001173 	.word	0x08001173
 80010fc:	0800114d 	.word	0x0800114d
 8001100:	0800115f 	.word	0x0800115f
 8001104:	080011a1 	.word	0x080011a1
 8001108:	080011a7 	.word	0x080011a7
 800110c:	080011a7 	.word	0x080011a7
 8001110:	080011a7 	.word	0x080011a7
 8001114:	080011a7 	.word	0x080011a7
 8001118:	080011a7 	.word	0x080011a7
 800111c:	080011a7 	.word	0x080011a7
 8001120:	080011a7 	.word	0x080011a7
 8001124:	080011a7 	.word	0x080011a7
 8001128:	080011a7 	.word	0x080011a7
 800112c:	080011a7 	.word	0x080011a7
 8001130:	080011a7 	.word	0x080011a7
 8001134:	080011a7 	.word	0x080011a7
 8001138:	080011a7 	.word	0x080011a7
 800113c:	08001155 	.word	0x08001155
 8001140:	08001169 	.word	0x08001169
 8001144:	4a79      	ldr	r2, [pc, #484]	; (800132c <HAL_GPIO_Init+0x2b4>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d013      	beq.n	8001172 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800114a:	e02c      	b.n	80011a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	623b      	str	r3, [r7, #32]
          break;
 8001152:	e029      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	3304      	adds	r3, #4
 800115a:	623b      	str	r3, [r7, #32]
          break;
 800115c:	e024      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	3308      	adds	r3, #8
 8001164:	623b      	str	r3, [r7, #32]
          break;
 8001166:	e01f      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	330c      	adds	r3, #12
 800116e:	623b      	str	r3, [r7, #32]
          break;
 8001170:	e01a      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d102      	bne.n	8001180 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800117a:	2304      	movs	r3, #4
 800117c:	623b      	str	r3, [r7, #32]
          break;
 800117e:	e013      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d105      	bne.n	8001194 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001188:	2308      	movs	r3, #8
 800118a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	611a      	str	r2, [r3, #16]
          break;
 8001192:	e009      	b.n	80011a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001194:	2308      	movs	r3, #8
 8001196:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	615a      	str	r2, [r3, #20]
          break;
 800119e:	e003      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
          break;
 80011a4:	e000      	b.n	80011a8 <HAL_GPIO_Init+0x130>
          break;
 80011a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2bff      	cmp	r3, #255	; 0xff
 80011ac:	d801      	bhi.n	80011b2 <HAL_GPIO_Init+0x13a>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	e001      	b.n	80011b6 <HAL_GPIO_Init+0x13e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3304      	adds	r3, #4
 80011b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	2bff      	cmp	r3, #255	; 0xff
 80011bc:	d802      	bhi.n	80011c4 <HAL_GPIO_Init+0x14c>
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	e002      	b.n	80011ca <HAL_GPIO_Init+0x152>
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c6:	3b08      	subs	r3, #8
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	210f      	movs	r1, #15
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	401a      	ands	r2, r3
 80011dc:	6a39      	ldr	r1, [r7, #32]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	fa01 f303 	lsl.w	r3, r1, r3
 80011e4:	431a      	orrs	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80b1 	beq.w	800135a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011f8:	4b4d      	ldr	r3, [pc, #308]	; (8001330 <HAL_GPIO_Init+0x2b8>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a4c      	ldr	r2, [pc, #304]	; (8001330 <HAL_GPIO_Init+0x2b8>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b4a      	ldr	r3, [pc, #296]	; (8001330 <HAL_GPIO_Init+0x2b8>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001210:	4a48      	ldr	r2, [pc, #288]	; (8001334 <HAL_GPIO_Init+0x2bc>)
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	220f      	movs	r2, #15
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	4013      	ands	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a40      	ldr	r2, [pc, #256]	; (8001338 <HAL_GPIO_Init+0x2c0>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d013      	beq.n	8001264 <HAL_GPIO_Init+0x1ec>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a3f      	ldr	r2, [pc, #252]	; (800133c <HAL_GPIO_Init+0x2c4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d00d      	beq.n	8001260 <HAL_GPIO_Init+0x1e8>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a3e      	ldr	r2, [pc, #248]	; (8001340 <HAL_GPIO_Init+0x2c8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d007      	beq.n	800125c <HAL_GPIO_Init+0x1e4>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a3d      	ldr	r2, [pc, #244]	; (8001344 <HAL_GPIO_Init+0x2cc>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d101      	bne.n	8001258 <HAL_GPIO_Init+0x1e0>
 8001254:	2303      	movs	r3, #3
 8001256:	e006      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001258:	2304      	movs	r3, #4
 800125a:	e004      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 800125c:	2302      	movs	r3, #2
 800125e:	e002      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001264:	2300      	movs	r3, #0
 8001266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001268:	f002 0203 	and.w	r2, r2, #3
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	4093      	lsls	r3, r2
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001276:	492f      	ldr	r1, [pc, #188]	; (8001334 <HAL_GPIO_Init+0x2bc>)
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3302      	adds	r3, #2
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	492c      	ldr	r1, [pc, #176]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	600b      	str	r3, [r1, #0]
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	4928      	ldr	r1, [pc, #160]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	4922      	ldr	r1, [pc, #136]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]
 80012c4:	e006      	b.n	80012d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	491e      	ldr	r1, [pc, #120]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	4918      	ldr	r1, [pc, #96]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	608b      	str	r3, [r1, #8]
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	4914      	ldr	r1, [pc, #80]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 80012f8:	4013      	ands	r3, r2
 80012fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d021      	beq.n	800134c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	490e      	ldr	r1, [pc, #56]	; (8001348 <HAL_GPIO_Init+0x2d0>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	60cb      	str	r3, [r1, #12]
 8001314:	e021      	b.n	800135a <HAL_GPIO_Init+0x2e2>
 8001316:	bf00      	nop
 8001318:	10320000 	.word	0x10320000
 800131c:	10310000 	.word	0x10310000
 8001320:	10220000 	.word	0x10220000
 8001324:	10210000 	.word	0x10210000
 8001328:	10120000 	.word	0x10120000
 800132c:	10110000 	.word	0x10110000
 8001330:	40021000 	.word	0x40021000
 8001334:	40010000 	.word	0x40010000
 8001338:	40010800 	.word	0x40010800
 800133c:	40010c00 	.word	0x40010c00
 8001340:	40011000 	.word	0x40011000
 8001344:	40011400 	.word	0x40011400
 8001348:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_GPIO_Init+0x304>)
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	43db      	mvns	r3, r3
 8001354:	4909      	ldr	r1, [pc, #36]	; (800137c <HAL_GPIO_Init+0x304>)
 8001356:	4013      	ands	r3, r2
 8001358:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	3301      	adds	r3, #1
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	fa22 f303 	lsr.w	r3, r2, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	f47f ae8e 	bne.w	800108c <HAL_GPIO_Init+0x14>
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	372c      	adds	r7, #44	; 0x2c
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	40010400 	.word	0x40010400

08001380 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	4013      	ands	r3, r2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001398:	2301      	movs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	e001      	b.n	80013a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	460b      	mov	r3, r1
 80013b8:	807b      	strh	r3, [r7, #2]
 80013ba:	4613      	mov	r3, r2
 80013bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013be:	787b      	ldrb	r3, [r7, #1]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c4:	887a      	ldrh	r2, [r7, #2]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013ca:	e003      	b.n	80013d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013cc:	887b      	ldrh	r3, [r7, #2]
 80013ce:	041a      	lsls	r2, r3, #16
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	611a      	str	r2, [r3, #16]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
	...

080013e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e272      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 8087 	beq.w	800150e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001400:	4b92      	ldr	r3, [pc, #584]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b04      	cmp	r3, #4
 800140a:	d00c      	beq.n	8001426 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800140c:	4b8f      	ldr	r3, [pc, #572]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	2b08      	cmp	r3, #8
 8001416:	d112      	bne.n	800143e <HAL_RCC_OscConfig+0x5e>
 8001418:	4b8c      	ldr	r3, [pc, #560]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001424:	d10b      	bne.n	800143e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001426:	4b89      	ldr	r3, [pc, #548]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d06c      	beq.n	800150c <HAL_RCC_OscConfig+0x12c>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d168      	bne.n	800150c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e24c      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001446:	d106      	bne.n	8001456 <HAL_RCC_OscConfig+0x76>
 8001448:	4b80      	ldr	r3, [pc, #512]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a7f      	ldr	r2, [pc, #508]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 800144e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	e02e      	b.n	80014b4 <HAL_RCC_OscConfig+0xd4>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10c      	bne.n	8001478 <HAL_RCC_OscConfig+0x98>
 800145e:	4b7b      	ldr	r3, [pc, #492]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a7a      	ldr	r2, [pc, #488]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b78      	ldr	r3, [pc, #480]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a77      	ldr	r2, [pc, #476]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e01d      	b.n	80014b4 <HAL_RCC_OscConfig+0xd4>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0xbc>
 8001482:	4b72      	ldr	r3, [pc, #456]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a71      	ldr	r2, [pc, #452]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b6f      	ldr	r3, [pc, #444]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a6e      	ldr	r2, [pc, #440]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e00b      	b.n	80014b4 <HAL_RCC_OscConfig+0xd4>
 800149c:	4b6b      	ldr	r3, [pc, #428]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a6a      	ldr	r2, [pc, #424]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 80014a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b68      	ldr	r3, [pc, #416]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a67      	ldr	r2, [pc, #412]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 80014ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d013      	beq.n	80014e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fcca 	bl	8000e54 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff fcc6 	bl	8000e54 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	; 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e200      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	4b5d      	ldr	r3, [pc, #372]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0xe4>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fcb6 	bl	8000e54 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fcb2 	bl	8000e54 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	; 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e1ec      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	4b53      	ldr	r3, [pc, #332]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x10c>
 800150a:	e000      	b.n	800150e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d063      	beq.n	80015e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800151a:	4b4c      	ldr	r3, [pc, #304]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00b      	beq.n	800153e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001526:	4b49      	ldr	r3, [pc, #292]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b08      	cmp	r3, #8
 8001530:	d11c      	bne.n	800156c <HAL_RCC_OscConfig+0x18c>
 8001532:	4b46      	ldr	r3, [pc, #280]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d116      	bne.n	800156c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153e:	4b43      	ldr	r3, [pc, #268]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <HAL_RCC_OscConfig+0x176>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e1c0      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b3d      	ldr	r3, [pc, #244]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4939      	ldr	r1, [pc, #228]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	e03a      	b.n	80015e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001574:	4b36      	ldr	r3, [pc, #216]	; (8001650 <HAL_RCC_OscConfig+0x270>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157a:	f7ff fc6b 	bl	8000e54 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001582:	f7ff fc67 	bl	8000e54 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e1a1      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	4b2d      	ldr	r3, [pc, #180]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b2a      	ldr	r3, [pc, #168]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4927      	ldr	r1, [pc, #156]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
 80015b4:	e015      	b.n	80015e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <HAL_RCC_OscConfig+0x270>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fc4a 	bl	8000e54 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff fc46 	bl	8000e54 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e180      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	4b1d      	ldr	r3, [pc, #116]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d03a      	beq.n	8001664 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d019      	beq.n	800162a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fc2a 	bl	8000e54 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff fc26 	bl	8000e54 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e160      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <HAL_RCC_OscConfig+0x26c>)
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001622:	2001      	movs	r0, #1
 8001624:	f000 fad8 	bl	8001bd8 <RCC_Delay>
 8001628:	e01c      	b.n	8001664 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <HAL_RCC_OscConfig+0x274>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001630:	f7ff fc10 	bl	8000e54 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001636:	e00f      	b.n	8001658 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001638:	f7ff fc0c 	bl	8000e54 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d908      	bls.n	8001658 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e146      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000
 8001650:	42420000 	.word	0x42420000
 8001654:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	4b92      	ldr	r3, [pc, #584]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1e9      	bne.n	8001638 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80a6 	beq.w	80017be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001676:	4b8b      	ldr	r3, [pc, #556]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10d      	bne.n	800169e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b88      	ldr	r3, [pc, #544]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a87      	ldr	r2, [pc, #540]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	61d3      	str	r3, [r2, #28]
 800168e:	4b85      	ldr	r3, [pc, #532]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800169a:	2301      	movs	r3, #1
 800169c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169e:	4b82      	ldr	r3, [pc, #520]	; (80018a8 <HAL_RCC_OscConfig+0x4c8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d118      	bne.n	80016dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016aa:	4b7f      	ldr	r3, [pc, #508]	; (80018a8 <HAL_RCC_OscConfig+0x4c8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a7e      	ldr	r2, [pc, #504]	; (80018a8 <HAL_RCC_OscConfig+0x4c8>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b6:	f7ff fbcd 	bl	8000e54 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016be:	f7ff fbc9 	bl	8000e54 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b64      	cmp	r3, #100	; 0x64
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e103      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	4b75      	ldr	r3, [pc, #468]	; (80018a8 <HAL_RCC_OscConfig+0x4c8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d106      	bne.n	80016f2 <HAL_RCC_OscConfig+0x312>
 80016e4:	4b6f      	ldr	r3, [pc, #444]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4a6e      	ldr	r2, [pc, #440]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6213      	str	r3, [r2, #32]
 80016f0:	e02d      	b.n	800174e <HAL_RCC_OscConfig+0x36e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10c      	bne.n	8001714 <HAL_RCC_OscConfig+0x334>
 80016fa:	4b6a      	ldr	r3, [pc, #424]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4a69      	ldr	r2, [pc, #420]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	6213      	str	r3, [r2, #32]
 8001706:	4b67      	ldr	r3, [pc, #412]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	4a66      	ldr	r2, [pc, #408]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	f023 0304 	bic.w	r3, r3, #4
 8001710:	6213      	str	r3, [r2, #32]
 8001712:	e01c      	b.n	800174e <HAL_RCC_OscConfig+0x36e>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b05      	cmp	r3, #5
 800171a:	d10c      	bne.n	8001736 <HAL_RCC_OscConfig+0x356>
 800171c:	4b61      	ldr	r3, [pc, #388]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4a60      	ldr	r2, [pc, #384]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	6213      	str	r3, [r2, #32]
 8001728:	4b5e      	ldr	r3, [pc, #376]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4a5d      	ldr	r2, [pc, #372]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6213      	str	r3, [r2, #32]
 8001734:	e00b      	b.n	800174e <HAL_RCC_OscConfig+0x36e>
 8001736:	4b5b      	ldr	r3, [pc, #364]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4a5a      	ldr	r2, [pc, #360]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	6213      	str	r3, [r2, #32]
 8001742:	4b58      	ldr	r3, [pc, #352]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4a57      	ldr	r2, [pc, #348]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	f023 0304 	bic.w	r3, r3, #4
 800174c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d015      	beq.n	8001782 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7ff fb7d 	bl	8000e54 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175c:	e00a      	b.n	8001774 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7ff fb79 	bl	8000e54 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f241 3288 	movw	r2, #5000	; 0x1388
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e0b1      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001774:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0ee      	beq.n	800175e <HAL_RCC_OscConfig+0x37e>
 8001780:	e014      	b.n	80017ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001782:	f7ff fb67 	bl	8000e54 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001788:	e00a      	b.n	80017a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178a:	f7ff fb63 	bl	8000e54 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f241 3288 	movw	r2, #5000	; 0x1388
 8001798:	4293      	cmp	r3, r2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e09b      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a0:	4b40      	ldr	r3, [pc, #256]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1ee      	bne.n	800178a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d105      	bne.n	80017be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b2:	4b3c      	ldr	r3, [pc, #240]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	4a3b      	ldr	r2, [pc, #236]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8087 	beq.w	80018d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c8:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d061      	beq.n	8001898 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d146      	bne.n	800186a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017dc:	4b33      	ldr	r3, [pc, #204]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e2:	f7ff fb37 	bl	8000e54 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ea:	f7ff fb33 	bl	8000e54 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e06d      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fc:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f0      	bne.n	80017ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001810:	d108      	bne.n	8001824 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	4921      	ldr	r1, [pc, #132]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a19      	ldr	r1, [r3, #32]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	430b      	orrs	r3, r1
 8001836:	491b      	ldr	r1, [pc, #108]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7ff fb07 	bl	8000e54 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184a:	f7ff fb03 	bl	8000e54 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e03d      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x46a>
 8001868:	e035      	b.n	80018d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_RCC_OscConfig+0x4cc>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff faf0 	bl	8000e54 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff faec 	bl	8000e54 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e026      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x498>
 8001896:	e01e      	b.n	80018d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d107      	bne.n	80018b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e019      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40007000 	.word	0x40007000
 80018ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_OscConfig+0x500>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d106      	bne.n	80018d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d001      	beq.n	80018d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40021000 	.word	0x40021000

080018e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0d0      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018f8:	4b6a      	ldr	r3, [pc, #424]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d910      	bls.n	8001928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001906:	4b67      	ldr	r3, [pc, #412]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 0207 	bic.w	r2, r3, #7
 800190e:	4965      	ldr	r1, [pc, #404]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001916:	4b63      	ldr	r3, [pc, #396]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0b8      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d020      	beq.n	8001976 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001940:	4b59      	ldr	r3, [pc, #356]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a58      	ldr	r2, [pc, #352]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800194a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001958:	4b53      	ldr	r3, [pc, #332]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4a52      	ldr	r2, [pc, #328]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001962:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001964:	4b50      	ldr	r3, [pc, #320]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	494d      	ldr	r1, [pc, #308]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	4313      	orrs	r3, r2
 8001974:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d040      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d115      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e07f      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a2:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e073      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b2:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e06b      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c2:	4b39      	ldr	r3, [pc, #228]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f023 0203 	bic.w	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4936      	ldr	r1, [pc, #216]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d4:	f7ff fa3e 	bl	8000e54 <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019dc:	f7ff fa3a 	bl	8000e54 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e053      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 020c 	and.w	r2, r3, #12
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d1eb      	bne.n	80019dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a04:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d210      	bcs.n	8001a34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 0207 	bic.w	r2, r3, #7
 8001a1a:	4922      	ldr	r1, [pc, #136]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e032      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	4916      	ldr	r1, [pc, #88]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a5e:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a72:	f000 f821 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8001a76:	4602      	mov	r2, r0
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	490a      	ldr	r1, [pc, #40]	; (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 8001a84:	5ccb      	ldrb	r3, [r1, r3]
 8001a86:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8a:	4a09      	ldr	r2, [pc, #36]	; (8001ab0 <HAL_RCC_ClockConfig+0x1cc>)
 8001a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_RCC_ClockConfig+0x1d0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f99c 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40022000 	.word	0x40022000
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	08004630 	.word	0x08004630
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000004 	.word	0x20000004

08001ab8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab8:	b490      	push	{r4, r7}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001abe:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xac>)
 8001ac0:	1d3c      	adds	r4, r7, #4
 8001ac2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ac4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ac8:	f240 2301 	movw	r3, #513	; 0x201
 8001acc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ae2:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d002      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0x40>
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d003      	beq.n	8001afe <HAL_RCC_GetSysClockFreq+0x46>
 8001af6:	e02b      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001afa:	623b      	str	r3, [r7, #32]
      break;
 8001afc:	e02b      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	0c9b      	lsrs	r3, r3, #18
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3328      	adds	r3, #40	; 0x28
 8001b08:	443b      	add	r3, r7
 8001b0a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b0e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d012      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	0c5b      	lsrs	r3, r3, #17
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	3328      	adds	r3, #40	; 0x28
 8001b26:	443b      	add	r3, r7
 8001b28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	4a0e      	ldr	r2, [pc, #56]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b32:	fb03 f202 	mul.w	r2, r3, r2
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3e:	e004      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b44:	fb02 f303 	mul.w	r3, r2, r3
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	623b      	str	r3, [r7, #32]
      break;
 8001b4e:	e002      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b52:	623b      	str	r3, [r7, #32]
      break;
 8001b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b56:	6a3b      	ldr	r3, [r7, #32]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3728      	adds	r7, #40	; 0x28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc90      	pop	{r4, r7}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	08004620 	.word	0x08004620
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	007a1200 	.word	0x007a1200
 8001b70:	003d0900 	.word	0x003d0900

08001b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b78:	4b02      	ldr	r3, [pc, #8]	; (8001b84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	20000000 	.word	0x20000000

08001b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b8c:	f7ff fff2 	bl	8001b74 <HAL_RCC_GetHCLKFreq>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	0a1b      	lsrs	r3, r3, #8
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	4903      	ldr	r1, [pc, #12]	; (8001bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	08004640 	.word	0x08004640

08001bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bb4:	f7ff ffde 	bl	8001b74 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	0adb      	lsrs	r3, r3, #11
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	4903      	ldr	r1, [pc, #12]	; (8001bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	08004640 	.word	0x08004640

08001bd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <RCC_Delay+0x34>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <RCC_Delay+0x38>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	0a5b      	lsrs	r3, r3, #9
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	fb02 f303 	mul.w	r3, r2, r3
 8001bf2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bf4:	bf00      	nop
  }
  while (Delay --);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1e5a      	subs	r2, r3, #1
 8001bfa:	60fa      	str	r2, [r7, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f9      	bne.n	8001bf4 <RCC_Delay+0x1c>
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	10624dd3 	.word	0x10624dd3

08001c14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e076      	b.n	8001d14 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d108      	bne.n	8001c40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c36:	d009      	beq.n	8001c4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
 8001c3e:	e005      	b.n	8001c4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d106      	bne.n	8001c6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7fe ff7c 	bl	8000b64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd0:	ea42 0103 	orr.w	r1, r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	0c1a      	lsrs	r2, r3, #16
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f002 0204 	and.w	r2, r2, #4
 8001cf2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69da      	ldr	r2, [r3, #28]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_SPI_Transmit+0x22>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e126      	b.n	8001f8c <HAL_SPI_Transmit+0x270>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d46:	f7ff f885 	bl	8000e54 <HAL_GetTick>
 8001d4a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d002      	beq.n	8001d62 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d60:	e10b      	b.n	8001f7a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <HAL_SPI_Transmit+0x52>
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d102      	bne.n	8001d74 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d72:	e102      	b.n	8001f7a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2203      	movs	r2, #3
 8001d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	88fa      	ldrh	r2, [r7, #6]
 8001d8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	88fa      	ldrh	r2, [r7, #6]
 8001d92:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dba:	d10f      	bne.n	8001ddc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de6:	2b40      	cmp	r3, #64	; 0x40
 8001de8:	d007      	beq.n	8001dfa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001df8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e02:	d14b      	bne.n	8001e9c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <HAL_SPI_Transmit+0xf6>
 8001e0c:	8afb      	ldrh	r3, [r7, #22]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d13e      	bne.n	8001e90 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	881a      	ldrh	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	1c9a      	adds	r2, r3, #2
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e36:	e02b      	b.n	8001e90 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d112      	bne.n	8001e6c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	881a      	ldrh	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	1c9a      	adds	r2, r3, #2
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e6a:	e011      	b.n	8001e90 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e6c:	f7fe fff2 	bl	8000e54 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d803      	bhi.n	8001e84 <HAL_SPI_Transmit+0x168>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e82:	d102      	bne.n	8001e8a <HAL_SPI_Transmit+0x16e>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e8e:	e074      	b.n	8001f7a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1ce      	bne.n	8001e38 <HAL_SPI_Transmit+0x11c>
 8001e9a:	e04c      	b.n	8001f36 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <HAL_SPI_Transmit+0x18e>
 8001ea4:	8afb      	ldrh	r3, [r7, #22]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d140      	bne.n	8001f2c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	330c      	adds	r3, #12
 8001eb4:	7812      	ldrb	r2, [r2, #0]
 8001eb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ed0:	e02c      	b.n	8001f2c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d113      	bne.n	8001f08 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	330c      	adds	r3, #12
 8001eea:	7812      	ldrb	r2, [r2, #0]
 8001eec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f06:	e011      	b.n	8001f2c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f08:	f7fe ffa4 	bl	8000e54 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d803      	bhi.n	8001f20 <HAL_SPI_Transmit+0x204>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1e:	d102      	bne.n	8001f26 <HAL_SPI_Transmit+0x20a>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d102      	bne.n	8001f2c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f2a:	e026      	b.n	8001f7a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1cd      	bne.n	8001ed2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	6839      	ldr	r1, [r7, #0]
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 fa62 	bl	8002404 <SPI_EndRxTxTransaction>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10a      	bne.n	8001f6a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f54:	2300      	movs	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	77fb      	strb	r3, [r7, #31]
 8001f76:	e000      	b.n	8001f7a <HAL_SPI_Transmit+0x25e>
  }

error:
 8001f78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3720      	adds	r7, #32
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08c      	sub	sp, #48	; 0x30
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_SPI_TransmitReceive+0x26>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e18a      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x33c>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fc2:	f7fe ff47 	bl	8000e54 <HAL_GetTick>
 8001fc6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001fd8:	887b      	ldrh	r3, [r7, #2]
 8001fda:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001fdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d00f      	beq.n	8002004 <HAL_SPI_TransmitReceive+0x70>
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fea:	d107      	bne.n	8001ffc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d103      	bne.n	8001ffc <HAL_SPI_TransmitReceive+0x68>
 8001ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d003      	beq.n	8002004 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002002:	e15b      	b.n	80022bc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d005      	beq.n	8002016 <HAL_SPI_TransmitReceive+0x82>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_SPI_TransmitReceive+0x82>
 8002010:	887b      	ldrh	r3, [r7, #2]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d103      	bne.n	800201e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800201c:	e14e      	b.n	80022bc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b04      	cmp	r3, #4
 8002028:	d003      	beq.n	8002032 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2205      	movs	r2, #5
 800202e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	887a      	ldrh	r2, [r7, #2]
 8002042:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	887a      	ldrh	r2, [r7, #2]
 8002054:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	887a      	ldrh	r2, [r7, #2]
 800205a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002072:	2b40      	cmp	r3, #64	; 0x40
 8002074:	d007      	beq.n	8002086 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002084:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800208e:	d178      	bne.n	8002182 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <HAL_SPI_TransmitReceive+0x10a>
 8002098:	8b7b      	ldrh	r3, [r7, #26]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d166      	bne.n	800216c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	881a      	ldrh	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	1c9a      	adds	r2, r3, #2
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3b01      	subs	r3, #1
 80020bc:	b29a      	uxth	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020c2:	e053      	b.n	800216c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d11b      	bne.n	800210a <HAL_SPI_TransmitReceive+0x176>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d016      	beq.n	800210a <HAL_SPI_TransmitReceive+0x176>
 80020dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d113      	bne.n	800210a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	881a      	ldrh	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	1c9a      	adds	r2, r3, #2
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b01      	cmp	r3, #1
 8002116:	d119      	bne.n	800214c <HAL_SPI_TransmitReceive+0x1b8>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d014      	beq.n	800214c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	b292      	uxth	r2, r2
 800212e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002134:	1c9a      	adds	r2, r3, #2
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800213e:	b29b      	uxth	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002148:	2301      	movs	r3, #1
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800214c:	f7fe fe82 	bl	8000e54 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002158:	429a      	cmp	r2, r3
 800215a:	d807      	bhi.n	800216c <HAL_SPI_TransmitReceive+0x1d8>
 800215c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800215e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002162:	d003      	beq.n	800216c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800216a:	e0a7      	b.n	80022bc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002170:	b29b      	uxth	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1a6      	bne.n	80020c4 <HAL_SPI_TransmitReceive+0x130>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800217a:	b29b      	uxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1a1      	bne.n	80020c4 <HAL_SPI_TransmitReceive+0x130>
 8002180:	e07c      	b.n	800227c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <HAL_SPI_TransmitReceive+0x1fc>
 800218a:	8b7b      	ldrh	r3, [r7, #26]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d16b      	bne.n	8002268 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	330c      	adds	r3, #12
 800219a:	7812      	ldrb	r2, [r2, #0]
 800219c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021b6:	e057      	b.n	8002268 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d11c      	bne.n	8002200 <HAL_SPI_TransmitReceive+0x26c>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d017      	beq.n	8002200 <HAL_SPI_TransmitReceive+0x26c>
 80021d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d114      	bne.n	8002200 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	330c      	adds	r3, #12
 80021e0:	7812      	ldrb	r2, [r2, #0]
 80021e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b01      	cmp	r3, #1
 800220c:	d119      	bne.n	8002242 <HAL_SPI_TransmitReceive+0x2ae>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d014      	beq.n	8002242 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002234:	b29b      	uxth	r3, r3
 8002236:	3b01      	subs	r3, #1
 8002238:	b29a      	uxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800223e:	2301      	movs	r3, #1
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002242:	f7fe fe07 	bl	8000e54 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800224e:	429a      	cmp	r2, r3
 8002250:	d803      	bhi.n	800225a <HAL_SPI_TransmitReceive+0x2c6>
 8002252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002258:	d102      	bne.n	8002260 <HAL_SPI_TransmitReceive+0x2cc>
 800225a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225c:	2b00      	cmp	r3, #0
 800225e:	d103      	bne.n	8002268 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002266:	e029      	b.n	80022bc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800226c:	b29b      	uxth	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1a2      	bne.n	80021b8 <HAL_SPI_TransmitReceive+0x224>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002276:	b29b      	uxth	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d19d      	bne.n	80021b8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800227c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 f8bf 	bl	8002404 <SPI_EndRxTxTransaction>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d006      	beq.n	800229a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2220      	movs	r2, #32
 8002296:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002298:	e010      	b.n	80022bc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10b      	bne.n	80022ba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	e000      	b.n	80022bc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80022ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3730      	adds	r7, #48	; 0x30
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022e6:	b2db      	uxtb	r3, r3
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
	...

080022f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	4613      	mov	r3, r2
 8002302:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002304:	f7fe fda6 	bl	8000e54 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	4413      	add	r3, r2
 8002312:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002314:	f7fe fd9e 	bl	8000e54 <HAL_GetTick>
 8002318:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800231a:	4b39      	ldr	r3, [pc, #228]	; (8002400 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	015b      	lsls	r3, r3, #5
 8002320:	0d1b      	lsrs	r3, r3, #20
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	fb02 f303 	mul.w	r3, r2, r3
 8002328:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800232a:	e054      	b.n	80023d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002332:	d050      	beq.n	80023d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002334:	f7fe fd8e 	bl	8000e54 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	429a      	cmp	r2, r3
 8002342:	d902      	bls.n	800234a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d13d      	bne.n	80023c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002358:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002362:	d111      	bne.n	8002388 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800236c:	d004      	beq.n	8002378 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002376:	d107      	bne.n	8002388 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002386:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002390:	d10f      	bne.n	80023b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e017      	b.n	80023f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4013      	ands	r3, r2
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	bf0c      	ite	eq
 80023e6:	2301      	moveq	r3, #1
 80023e8:	2300      	movne	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d19b      	bne.n	800232c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000000 	.word	0x20000000

08002404 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af02      	add	r7, sp, #8
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2200      	movs	r2, #0
 8002418:	2180      	movs	r1, #128	; 0x80
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f7ff ff6a 	bl	80022f4 <SPI_WaitFlagStateUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d007      	beq.n	8002436 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	f043 0220 	orr.w	r2, r3, #32
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e000      	b.n	8002438 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e03f      	b.n	80024d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe fbc6 	bl	8000bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2224      	movs	r2, #36	; 0x24
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f96d 	bl	8002764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b08a      	sub	sp, #40	; 0x28
 80024de:	af02      	add	r7, sp, #8
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	603b      	str	r3, [r7, #0]
 80024e6:	4613      	mov	r3, r2
 80024e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	d17c      	bne.n	80025f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_UART_Transmit+0x2c>
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e075      	b.n	80025f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_UART_Transmit+0x3e>
 8002514:	2302      	movs	r3, #2
 8002516:	e06e      	b.n	80025f6 <HAL_UART_Transmit+0x11c>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2221      	movs	r2, #33	; 0x21
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800252e:	f7fe fc91 	bl	8000e54 <HAL_GetTick>
 8002532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	88fa      	ldrh	r2, [r7, #6]
 8002538:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	88fa      	ldrh	r2, [r7, #6]
 800253e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002548:	d108      	bne.n	800255c <HAL_UART_Transmit+0x82>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d104      	bne.n	800255c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	e003      	b.n	8002564 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002560:	2300      	movs	r3, #0
 8002562:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800256c:	e02a      	b.n	80025c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2200      	movs	r2, #0
 8002576:	2180      	movs	r1, #128	; 0x80
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 f870 	bl	800265e <UART_WaitOnFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e036      	b.n	80025f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10b      	bne.n	80025a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800259c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	3302      	adds	r3, #2
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	e007      	b.n	80025b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	781a      	ldrb	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	3301      	adds	r3, #1
 80025b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1cf      	bne.n	800256e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2200      	movs	r2, #0
 80025d6:	2140      	movs	r1, #64	; 0x40
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 f840 	bl	800265e <UART_WaitOnFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e006      	b.n	80025f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e000      	b.n	80025f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80025f4:	2302      	movs	r3, #2
  }
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3720      	adds	r7, #32
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	4613      	mov	r3, r2
 800260a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b20      	cmp	r3, #32
 8002616:	d11d      	bne.n	8002654 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <HAL_UART_Receive_IT+0x26>
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e016      	b.n	8002656 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_UART_Receive_IT+0x38>
 8002632:	2302      	movs	r3, #2
 8002634:	e00f      	b.n	8002656 <HAL_UART_Receive_IT+0x58>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	461a      	mov	r2, r3
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f851 	bl	80026f2 <UART_Start_Receive_IT>
 8002650:	4603      	mov	r3, r0
 8002652:	e000      	b.n	8002656 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002654:	2302      	movs	r3, #2
  }
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	4613      	mov	r3, r2
 800266c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800266e:	e02c      	b.n	80026ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002676:	d028      	beq.n	80026ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <UART_WaitOnFlagUntilTimeout+0x30>
 800267e:	f7fe fbe9 	bl	8000e54 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	429a      	cmp	r2, r3
 800268c:	d21d      	bcs.n	80026ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800269c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0201 	bic.w	r2, r2, #1
 80026ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e00f      	b.n	80026ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4013      	ands	r3, r2
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	bf0c      	ite	eq
 80026da:	2301      	moveq	r3, #1
 80026dc:	2300      	movne	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d0c3      	beq.n	8002670 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b085      	sub	sp, #20
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	4613      	mov	r3, r2
 80026fe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	88fa      	ldrh	r2, [r7, #6]
 800270a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	88fa      	ldrh	r2, [r7, #6]
 8002710:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2222      	movs	r2, #34	; 0x22
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002736:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0220 	orr.w	r2, r2, #32
 8002756:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800279e:	f023 030c 	bic.w	r3, r3, #12
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	430b      	orrs	r3, r1
 80027aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a2c      	ldr	r2, [pc, #176]	; (8002878 <UART_SetConfig+0x114>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d103      	bne.n	80027d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027cc:	f7ff f9f0 	bl	8001bb0 <HAL_RCC_GetPCLK2Freq>
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	e002      	b.n	80027da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027d4:	f7ff f9d8 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 80027d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	009a      	lsls	r2, r3, #2
 80027e4:	441a      	add	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f0:	4a22      	ldr	r2, [pc, #136]	; (800287c <UART_SetConfig+0x118>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	0119      	lsls	r1, r3, #4
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	009a      	lsls	r2, r3, #2
 8002804:	441a      	add	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002810:	4b1a      	ldr	r3, [pc, #104]	; (800287c <UART_SetConfig+0x118>)
 8002812:	fba3 0302 	umull	r0, r3, r3, r2
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	2064      	movs	r0, #100	; 0x64
 800281a:	fb00 f303 	mul.w	r3, r0, r3
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	3332      	adds	r3, #50	; 0x32
 8002824:	4a15      	ldr	r2, [pc, #84]	; (800287c <UART_SetConfig+0x118>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002830:	4419      	add	r1, r3
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	009a      	lsls	r2, r3, #2
 800283c:	441a      	add	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	fbb2 f2f3 	udiv	r2, r2, r3
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <UART_SetConfig+0x118>)
 800284a:	fba3 0302 	umull	r0, r3, r3, r2
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2064      	movs	r0, #100	; 0x64
 8002852:	fb00 f303 	mul.w	r3, r0, r3
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	3332      	adds	r3, #50	; 0x32
 800285c:	4a07      	ldr	r2, [pc, #28]	; (800287c <UART_SetConfig+0x118>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	f003 020f 	and.w	r2, r3, #15
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	440a      	add	r2, r1
 800286e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40013800 	.word	0x40013800
 800287c:	51eb851f 	.word	0x51eb851f

08002880 <update_crc_32>:
 *
 * The function update_crc_32() calculates a new CRC-32 value based on the
 * previous value of the CRC and the next byte of the data to be checked.
 */

uint32_t update_crc_32( uint32_t crc, unsigned char c ) {
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	70fb      	strb	r3, [r7, #3]

	uint32_t tmp;
	uint32_t long_c;

	long_c = 0x000000ffL & (uint32_t) c;
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	60fb      	str	r3, [r7, #12]

	if ( ! crc_tab32_init ) init_crc32_tab();
 8002890:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <update_crc_32+0x48>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	f083 0301 	eor.w	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <update_crc_32+0x22>
 800289e:	f000 f817 	bl	80028d0 <init_crc32_tab>

	tmp = crc ^ long_c;
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4053      	eors	r3, r2
 80028a8:	60bb      	str	r3, [r7, #8]
	crc = (crc >> 8) ^ crc_tab32[ tmp & 0xff ];
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	0a1a      	lsrs	r2, r3, #8
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	4906      	ldr	r1, [pc, #24]	; (80028cc <update_crc_32+0x4c>)
 80028b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80028b8:	4053      	eors	r3, r2
 80028ba:	607b      	str	r3, [r7, #4]

	return crc & 0xffffffffL;
 80028bc:	687b      	ldr	r3, [r7, #4]

}  /* update_crc_32 */
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000df0 	.word	0x20000df0
 80028cc:	20000df4 	.word	0x20000df4

080028d0 <init_crc32_tab>:
 * For optimal speed, the CRC32 calculation uses a table with pre-calculated
 * bit patterns which are used in the XOR operations in the program. This table
 * is generated once, the first time the CRC update routine is called.
 */

static void init_crc32_tab( void ) {
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0

	uint32_t i;
	uint32_t j;
	uint32_t crc;

	for (i=0; i<256; i++) {
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	e020      	b.n	800291e <init_crc32_tab+0x4e>

		crc = i;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	607b      	str	r3, [r7, #4]

		for (j=0; j<8; j++) {
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	e010      	b.n	8002908 <init_crc32_tab+0x38>

			if ( crc & 0x00000001L ) crc = ( crc >> 1 ) ^ CRC_POLY_32;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <init_crc32_tab+0x2c>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	085a      	lsrs	r2, r3, #1
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <init_crc32_tab+0x64>)
 80028f6:	4053      	eors	r3, r2
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	e002      	b.n	8002902 <init_crc32_tab+0x32>
			else                     crc =   crc >> 1;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	607b      	str	r3, [r7, #4]
		for (j=0; j<8; j++) {
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	3301      	adds	r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b07      	cmp	r3, #7
 800290c:	d9eb      	bls.n	80028e6 <init_crc32_tab+0x16>
		}

		crc_tab32[i] = crc;
 800290e:	490a      	ldr	r1, [pc, #40]	; (8002938 <init_crc32_tab+0x68>)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0; i<256; i++) {
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	3301      	adds	r3, #1
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2bff      	cmp	r3, #255	; 0xff
 8002922:	d9db      	bls.n	80028dc <init_crc32_tab+0xc>
	}

	crc_tab32_init = true;
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <init_crc32_tab+0x6c>)
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]

}  /* init_crc32_tab */
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	edb88320 	.word	0xedb88320
 8002938:	20000df4 	.word	0x20000df4
 800293c:	20000df0 	.word	0x20000df0

08002940 <Rx_Reset>:
{
	HAL_UART_Transmit(&FRAME_SYNC_huart, &tx_data, 1, 100);
}

static void Rx_Reset()
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
	FS_Data.rx_checksum = 0xFFFFFFFF;
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <Rx_Reset+0x38>)
 8002946:	f04f 32ff 	mov.w	r2, #4294967295
 800294a:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80
	FS_Data.rx_state = SEARCHING_STX;
 800294e:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <Rx_Reset+0x38>)
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2a84 	strb.w	r2, [r3, #2692]	; 0xa84
	FS_Data.rx_num_crc_byte = 0;
 8002956:	4b08      	ldr	r3, [pc, #32]	; (8002978 <Rx_Reset+0x38>)
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2b94 	strb.w	r2, [r3, #2964]	; 0xb94
	FS_Data.rx_packet.crc32 = 0;
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <Rx_Reset+0x38>)
 8002960:	2200      	movs	r2, #0
 8002962:	f8c3 2b8c 	str.w	r2, [r3, #2956]	; 0xb8c
	FS_Data.rx_pointer = 0;
 8002966:	4b04      	ldr	r3, [pc, #16]	; (8002978 <Rx_Reset+0x38>)
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2a85 	strb.w	r2, [r3, #2693]	; 0xa85
}
 800296e:	bf00      	nop
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	200011f4 	.word	0x200011f4

0800297c <CRC_Update>:

static void CRC_Update(uint32_t *crc, uint8_t data)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	70fb      	strb	r3, [r7, #3]
	*crc = update_crc_32(*crc, data);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff75 	bl	8002880 <update_crc_32>
 8002996:	4602      	mov	r2, r0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	601a      	str	r2, [r3, #0]
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <validate_packet>:

static void validate_packet()
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b0c3      	sub	sp, #268	; 0x10c
 80029a8:	af40      	add	r7, sp, #256	; 0x100
	if(FS_Data.rx_packet.temp_des_id != FS_Data.my_id) return;
 80029aa:	4b86      	ldr	r3, [pc, #536]	; (8002bc4 <validate_packet+0x220>)
 80029ac:	f893 2a89 	ldrb.w	r2, [r3, #2697]	; 0xa89
 80029b0:	4b84      	ldr	r3, [pc, #528]	; (8002bc4 <validate_packet+0x220>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	f040 8101 	bne.w	8002bbc <validate_packet+0x218>
	uint8_t temp_data = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	71fb      	strb	r3, [r7, #7]
	FS_Data.rx_checksum = ~FS_Data.rx_checksum;
 80029be:	4b81      	ldr	r3, [pc, #516]	; (8002bc4 <validate_packet+0x220>)
 80029c0:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 80029c4:	43db      	mvns	r3, r3
 80029c6:	4a7f      	ldr	r2, [pc, #508]	; (8002bc4 <validate_packet+0x220>)
 80029c8:	f8c2 3a80 	str.w	r3, [r2, #2688]	; 0xa80
	if(FS_Data.rx_packet.crc32 != FS_Data.rx_checksum)
 80029cc:	4b7d      	ldr	r3, [pc, #500]	; (8002bc4 <validate_packet+0x220>)
 80029ce:	f8d3 2b8c 	ldr.w	r2, [r3, #2956]	; 0xb8c
 80029d2:	4b7c      	ldr	r3, [pc, #496]	; (8002bc4 <validate_packet+0x220>)
 80029d4:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 80029d8:	429a      	cmp	r2, r3
 80029da:	d019      	beq.n	8002a10 <validate_packet+0x6c>
	{
		temp_data = NACK;
 80029dc:	23fe      	movs	r3, #254	; 0xfe
 80029de:	71fb      	strb	r3, [r7, #7]
		FRAME_SYNC_Send_Frame(FS_Data.rx_packet.src_id, FS_Data.rx_packet.src_id, 1, &temp_data, 1, 0);
 80029e0:	4b78      	ldr	r3, [pc, #480]	; (8002bc4 <validate_packet+0x220>)
 80029e2:	f893 0a8a 	ldrb.w	r0, [r3, #2698]	; 0xa8a
 80029e6:	4b77      	ldr	r3, [pc, #476]	; (8002bc4 <validate_packet+0x220>)
 80029e8:	f893 1a8a 	ldrb.w	r1, [r3, #2698]	; 0xa8a
 80029ec:	1dfb      	adds	r3, r7, #7
 80029ee:	2200      	movs	r2, #0
 80029f0:	9201      	str	r2, [sp, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	9200      	str	r2, [sp, #0]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f000 f8ea 	bl	8002bd0 <FRAME_SYNC_Send_Frame>
		FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
 80029fc:	4b71      	ldr	r3, [pc, #452]	; (8002bc4 <validate_packet+0x220>)
 80029fe:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8002a02:	4619      	mov	r1, r3
 8002a04:	4870      	ldr	r0, [pc, #448]	; (8002bc8 <validate_packet+0x224>)
 8002a06:	f7fd fe73 	bl	80006f0 <FRAME_SYNC_RxFailCallback>
		Rx_Reset();
 8002a0a:	f7ff ff99 	bl	8002940 <Rx_Reset>
		return;
 8002a0e:	e0d6      	b.n	8002bbe <validate_packet+0x21a>
	}

	switch(FS_Data.rx_packet.buffer[0])
 8002a10:	4b6c      	ldr	r3, [pc, #432]	; (8002bc4 <validate_packet+0x220>)
 8002a12:	f893 3a8d 	ldrb.w	r3, [r3, #2701]	; 0xa8d
 8002a16:	2bfe      	cmp	r3, #254	; 0xfe
 8002a18:	d013      	beq.n	8002a42 <validate_packet+0x9e>
 8002a1a:	2bff      	cmp	r3, #255	; 0xff
 8002a1c:	d132      	bne.n	8002a84 <validate_packet+0xe0>
	{
		case ACK:	// Received ACK
			if(FS_Data.device_state == FRAME_SYNC_WAITING_ACK)
 8002a1e:	4b69      	ldr	r3, [pc, #420]	; (8002bc4 <validate_packet+0x220>)
 8002a20:	785b      	ldrb	r3, [r3, #1]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	f040 80c2 	bne.w	8002bac <validate_packet+0x208>
			{
				FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 8002a28:	4b66      	ldr	r3, [pc, #408]	; (8002bc4 <validate_packet+0x220>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	705a      	strb	r2, [r3, #1]
				if(FS_Data.stored_packet.is_requiring_reply == 1)
 8002a2e:	4b65      	ldr	r3, [pc, #404]	; (8002bc4 <validate_packet+0x220>)
 8002a30:	f893 3ca8 	ldrb.w	r3, [r3, #3240]	; 0xca8
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	f040 80b9 	bne.w	8002bac <validate_packet+0x208>
				{
					FS_Data.device_state = FRAME_SYNC_WAITING_REPLY;
 8002a3a:	4b62      	ldr	r3, [pc, #392]	; (8002bc4 <validate_packet+0x220>)
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	705a      	strb	r2, [r3, #1]
				}
			}
			break;
 8002a40:	e0b4      	b.n	8002bac <validate_packet+0x208>
		case NACK:	// Received NACK
			// Re-transmit
			if(FS_Data.device_state == FRAME_SYNC_WAITING_ACK)
 8002a42:	4b60      	ldr	r3, [pc, #384]	; (8002bc4 <validate_packet+0x220>)
 8002a44:	785b      	ldrb	r3, [r3, #1]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	f040 80b2 	bne.w	8002bb0 <validate_packet+0x20c>
			{
				FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 8002a4c:	4b5d      	ldr	r3, [pc, #372]	; (8002bc4 <validate_packet+0x220>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	705a      	strb	r2, [r3, #1]
				FRAME_SYNC_Send_Frame(FS_Data.stored_packet.final_des_id, FS_Data.stored_packet.temp_des_id, FS_Data.stored_packet.time_to_live - 1,
 8002a52:	4b5c      	ldr	r3, [pc, #368]	; (8002bc4 <validate_packet+0x220>)
 8002a54:	f893 0ba0 	ldrb.w	r0, [r3, #2976]	; 0xba0
 8002a58:	4b5a      	ldr	r3, [pc, #360]	; (8002bc4 <validate_packet+0x220>)
 8002a5a:	f893 1ba1 	ldrb.w	r1, [r3, #2977]	; 0xba1
 8002a5e:	4b59      	ldr	r3, [pc, #356]	; (8002bc4 <validate_packet+0x220>)
 8002a60:	f993 3ba3 	ldrsb.w	r3, [r3, #2979]	; 0xba3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b2dc      	uxtb	r4, r3
 8002a6a:	4b56      	ldr	r3, [pc, #344]	; (8002bc4 <validate_packet+0x220>)
 8002a6c:	f893 3ba4 	ldrb.w	r3, [r3, #2980]	; 0xba4
 8002a70:	4a54      	ldr	r2, [pc, #336]	; (8002bc4 <validate_packet+0x220>)
 8002a72:	f892 2ca8 	ldrb.w	r2, [r2, #3240]	; 0xca8
 8002a76:	9201      	str	r2, [sp, #4]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	4b54      	ldr	r3, [pc, #336]	; (8002bcc <validate_packet+0x228>)
 8002a7c:	4622      	mov	r2, r4
 8002a7e:	f000 f8a7 	bl	8002bd0 <FRAME_SYNC_Send_Frame>
						FS_Data.stored_packet.buffer, FS_Data.stored_packet.length, FS_Data.stored_packet.is_requiring_reply);
			}
			break;
 8002a82:	e095      	b.n	8002bb0 <validate_packet+0x20c>
		default:	// Received normal data
			if(FS_Data.rx_packet.temp_des_id == FS_Data.my_id)
 8002a84:	4b4f      	ldr	r3, [pc, #316]	; (8002bc4 <validate_packet+0x220>)
 8002a86:	f893 2a89 	ldrb.w	r2, [r3, #2697]	; 0xa89
 8002a8a:	4b4e      	ldr	r3, [pc, #312]	; (8002bc4 <validate_packet+0x220>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	f040 8090 	bne.w	8002bb4 <validate_packet+0x210>
			{
				if(FS_Data.device_state == FRAME_SYNC_WAITING_REPLY)
 8002a94:	4b4b      	ldr	r3, [pc, #300]	; (8002bc4 <validate_packet+0x220>)
 8002a96:	785b      	ldrb	r3, [r3, #1]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d122      	bne.n	8002ae2 <validate_packet+0x13e>
				{
					FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 8002a9c:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <validate_packet+0x220>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	705a      	strb	r2, [r3, #1]
					temp_data = ACK;
 8002aa2:	23ff      	movs	r3, #255	; 0xff
 8002aa4:	71fb      	strb	r3, [r7, #7]
					FRAME_SYNC_Send_Frame(FS_Data.rx_packet.src_id, FS_Data.rx_packet.src_id, 1, &temp_data, 1, 0);
 8002aa6:	4b47      	ldr	r3, [pc, #284]	; (8002bc4 <validate_packet+0x220>)
 8002aa8:	f893 0a8a 	ldrb.w	r0, [r3, #2698]	; 0xa8a
 8002aac:	4b45      	ldr	r3, [pc, #276]	; (8002bc4 <validate_packet+0x220>)
 8002aae:	f893 1a8a 	ldrb.w	r1, [r3, #2698]	; 0xa8a
 8002ab2:	1dfb      	adds	r3, r7, #7
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	9201      	str	r2, [sp, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	9200      	str	r2, [sp, #0]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f000 f887 	bl	8002bd0 <FRAME_SYNC_Send_Frame>
					FRAME_SYNC_RxCpltCallback(FS_Data.rx_packet);
 8002ac2:	4c40      	ldr	r4, [pc, #256]	; (8002bc4 <validate_packet+0x220>)
 8002ac4:	4668      	mov	r0, sp
 8002ac6:	f604 2398 	addw	r3, r4, #2712	; 0xa98
 8002aca:	22fc      	movs	r2, #252	; 0xfc
 8002acc:	4619      	mov	r1, r3
 8002ace:	f001 f8bf 	bl	8003c50 <memcpy>
 8002ad2:	f604 2388 	addw	r3, r4, #2696	; 0xa88
 8002ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ad8:	f7fd fda2 	bl	8000620 <FRAME_SYNC_RxCpltCallback>
					Rx_Reset();
 8002adc:	f7ff ff30 	bl	8002940 <Rx_Reset>
					return;
 8002ae0:	e06d      	b.n	8002bbe <validate_packet+0x21a>
				}

				FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 8002ae2:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <validate_packet+0x220>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	705a      	strb	r2, [r3, #1]
				temp_data = ACK;
 8002ae8:	23ff      	movs	r3, #255	; 0xff
 8002aea:	71fb      	strb	r3, [r7, #7]
				FRAME_SYNC_Send_Frame(FS_Data.rx_packet.src_id, FS_Data.rx_packet.src_id, 1, &temp_data, 1, 0);
 8002aec:	4b35      	ldr	r3, [pc, #212]	; (8002bc4 <validate_packet+0x220>)
 8002aee:	f893 0a8a 	ldrb.w	r0, [r3, #2698]	; 0xa8a
 8002af2:	4b34      	ldr	r3, [pc, #208]	; (8002bc4 <validate_packet+0x220>)
 8002af4:	f893 1a8a 	ldrb.w	r1, [r3, #2698]	; 0xa8a
 8002af8:	1dfb      	adds	r3, r7, #7
 8002afa:	2200      	movs	r2, #0
 8002afc:	9201      	str	r2, [sp, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	9200      	str	r2, [sp, #0]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f000 f864 	bl	8002bd0 <FRAME_SYNC_Send_Frame>

				if(FS_Data.rx_packet.final_des_id > FS_Data.my_id)
 8002b08:	4b2e      	ldr	r3, [pc, #184]	; (8002bc4 <validate_packet+0x220>)
 8002b0a:	f893 2a88 	ldrb.w	r2, [r3, #2696]	; 0xa88
 8002b0e:	4b2d      	ldr	r3, [pc, #180]	; (8002bc4 <validate_packet+0x220>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d91a      	bls.n	8002b4c <validate_packet+0x1a8>
				{
					FRAME_SYNC_Send_Frame(FS_Data.rx_packet.final_des_id, FS_Data.rx_packet.temp_des_id + 1, FS_Data.rx_packet.time_to_live - 1,
 8002b16:	4b2b      	ldr	r3, [pc, #172]	; (8002bc4 <validate_packet+0x220>)
 8002b18:	f893 0a88 	ldrb.w	r0, [r3, #2696]	; 0xa88
 8002b1c:	4b29      	ldr	r3, [pc, #164]	; (8002bc4 <validate_packet+0x220>)
 8002b1e:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8002b22:	3301      	adds	r3, #1
 8002b24:	b2d9      	uxtb	r1, r3
 8002b26:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <validate_packet+0x220>)
 8002b28:	f993 3a8b 	ldrsb.w	r3, [r3, #2699]	; 0xa8b
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b2dc      	uxtb	r4, r3
 8002b32:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <validate_packet+0x220>)
 8002b34:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8002b38:	4a22      	ldr	r2, [pc, #136]	; (8002bc4 <validate_packet+0x220>)
 8002b3a:	f892 2ca8 	ldrb.w	r2, [r2, #3240]	; 0xca8
 8002b3e:	9201      	str	r2, [sp, #4]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <validate_packet+0x224>)
 8002b44:	4622      	mov	r2, r4
 8002b46:	f000 f843 	bl	8002bd0 <FRAME_SYNC_Send_Frame>
				{
					FRAME_SYNC_RxCpltCallback(FS_Data.rx_packet);
				}
			}

			break;
 8002b4a:	e033      	b.n	8002bb4 <validate_packet+0x210>
				else if(FS_Data.rx_packet.final_des_id < FS_Data.my_id)
 8002b4c:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <validate_packet+0x220>)
 8002b4e:	f893 2a88 	ldrb.w	r2, [r3, #2696]	; 0xa88
 8002b52:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <validate_packet+0x220>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d21a      	bcs.n	8002b90 <validate_packet+0x1ec>
					FRAME_SYNC_Send_Frame(FS_Data.rx_packet.final_des_id, FS_Data.rx_packet.temp_des_id - 1, FS_Data.rx_packet.time_to_live - 1,
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <validate_packet+0x220>)
 8002b5c:	f893 0a88 	ldrb.w	r0, [r3, #2696]	; 0xa88
 8002b60:	4b18      	ldr	r3, [pc, #96]	; (8002bc4 <validate_packet+0x220>)
 8002b62:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b2d9      	uxtb	r1, r3
 8002b6a:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <validate_packet+0x220>)
 8002b6c:	f993 3a8b 	ldrsb.w	r3, [r3, #2699]	; 0xa8b
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b2dc      	uxtb	r4, r3
 8002b76:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <validate_packet+0x220>)
 8002b78:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8002b7c:	4a11      	ldr	r2, [pc, #68]	; (8002bc4 <validate_packet+0x220>)
 8002b7e:	f892 2ca8 	ldrb.w	r2, [r2, #3240]	; 0xca8
 8002b82:	9201      	str	r2, [sp, #4]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <validate_packet+0x224>)
 8002b88:	4622      	mov	r2, r4
 8002b8a:	f000 f821 	bl	8002bd0 <FRAME_SYNC_Send_Frame>
			break;
 8002b8e:	e011      	b.n	8002bb4 <validate_packet+0x210>
					FRAME_SYNC_RxCpltCallback(FS_Data.rx_packet);
 8002b90:	4c0c      	ldr	r4, [pc, #48]	; (8002bc4 <validate_packet+0x220>)
 8002b92:	4668      	mov	r0, sp
 8002b94:	f604 2398 	addw	r3, r4, #2712	; 0xa98
 8002b98:	22fc      	movs	r2, #252	; 0xfc
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f001 f858 	bl	8003c50 <memcpy>
 8002ba0:	f604 2388 	addw	r3, r4, #2696	; 0xa88
 8002ba4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ba6:	f7fd fd3b 	bl	8000620 <FRAME_SYNC_RxCpltCallback>
			break;
 8002baa:	e003      	b.n	8002bb4 <validate_packet+0x210>
			break;
 8002bac:	bf00      	nop
 8002bae:	e002      	b.n	8002bb6 <validate_packet+0x212>
			break;
 8002bb0:	bf00      	nop
 8002bb2:	e000      	b.n	8002bb6 <validate_packet+0x212>
			break;
 8002bb4:	bf00      	nop
	}
	Rx_Reset();
 8002bb6:	f7ff fec3 	bl	8002940 <Rx_Reset>
 8002bba:	e000      	b.n	8002bbe <validate_packet+0x21a>
	if(FS_Data.rx_packet.temp_des_id != FS_Data.my_id) return;
 8002bbc:	bf00      	nop
}
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd90      	pop	{r4, r7, pc}
 8002bc4:	200011f4 	.word	0x200011f4
 8002bc8:	20001c81 	.word	0x20001c81
 8002bcc:	20001d99 	.word	0x20001d99

08002bd0 <FRAME_SYNC_Send_Frame>:
	FS_Data = *p_new_data;
}

// STX Final_Des Temp_Des TTL Len Data 4_byte_CRC EXT
void FRAME_SYNC_Send_Frame(uint8_t final_des_id, uint8_t temp_des_id, uint8_t time_to_live, uint8_t *tx_frame, uint8_t size, uint8_t is_requiring_reply)
{
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	b0c7      	sub	sp, #284	; 0x11c
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	4608      	mov	r0, r1
 8002bda:	4611      	mov	r1, r2
 8002bdc:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002be0:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002bea:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002bee:	4622      	mov	r2, r4
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002bf6:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	701a      	strb	r2, [r3, #0]
 8002bfe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002c02:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8002c06:	460a      	mov	r2, r1
 8002c08:	701a      	strb	r2, [r3, #0]
	uint8_t temp_packet[MAX_LENGTH_DATA] = {STX};
 8002c0a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002c0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c12:	2202      	movs	r2, #2
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	3304      	adds	r3, #4
 8002c18:	22fb      	movs	r2, #251	; 0xfb
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f001 f825 	bl	8003c6c <memset>
	uint8_t packet_length = 1;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	if(FS_Data.device_state != FRAME_SYNC_READY_TO_TRANSMIT) return;
 8002c28:	4bc3      	ldr	r3, [pc, #780]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002c2a:	785b      	ldrb	r3, [r3, #1]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f040 817b 	bne.w	8002f28 <FRAME_SYNC_Send_Frame+0x358>
	if(time_to_live <= 0) return;
 8002c32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002c36:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 8175 	beq.w	8002f2c <FRAME_SYNC_Send_Frame+0x35c>
	FS_Data.tx_checksum = 0xFFFFFFFF;
 8002c42:	4bbd      	ldr	r3, [pc, #756]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002c44:	f04f 32ff 	mov.w	r2, #4294967295
 8002c48:	605a      	str	r2, [r3, #4]

	// Transmit STX

	// Transmit final destination device id
	CRC_Update(&FS_Data.tx_checksum, final_des_id);
 8002c4a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002c4e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	4619      	mov	r1, r3
 8002c56:	48b9      	ldr	r0, [pc, #740]	; (8002f3c <FRAME_SYNC_Send_Frame+0x36c>)
 8002c58:	f7ff fe90 	bl	800297c <CRC_Update>
	temp_packet[packet_length++] = final_des_id;
 8002c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8002c66:	4619      	mov	r1, r3
 8002c68:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002c6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c70:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002c74:	f2a2 1211 	subw	r2, r2, #273	; 0x111
 8002c78:	7812      	ldrb	r2, [r2, #0]
 8002c7a:	545a      	strb	r2, [r3, r1]

	// Transmit temporary destination device id
	CRC_Update(&FS_Data.tx_checksum, temp_des_id);
 8002c7c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002c80:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	4619      	mov	r1, r3
 8002c88:	48ac      	ldr	r0, [pc, #688]	; (8002f3c <FRAME_SYNC_Send_Frame+0x36c>)
 8002c8a:	f7ff fe77 	bl	800297c <CRC_Update>
	temp_packet[packet_length++] = temp_des_id;
 8002c8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002c9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ca2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002ca6:	f5a2 7289 	sub.w	r2, r2, #274	; 0x112
 8002caa:	7812      	ldrb	r2, [r2, #0]
 8002cac:	545a      	strb	r2, [r3, r1]

	// Transmit source device id
	CRC_Update(&FS_Data.tx_checksum, FS_Data.my_id);
 8002cae:	4ba2      	ldr	r3, [pc, #648]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	48a1      	ldr	r0, [pc, #644]	; (8002f3c <FRAME_SYNC_Send_Frame+0x36c>)
 8002cb6:	f7ff fe61 	bl	800297c <CRC_Update>
	temp_packet[packet_length++] = FS_Data.my_id;
 8002cba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b9c      	ldr	r3, [pc, #624]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002cc8:	7819      	ldrb	r1, [r3, #0]
 8002cca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002cce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002cd2:	5499      	strb	r1, [r3, r2]

	// Transmit time to live
	CRC_Update(&FS_Data.tx_checksum, time_to_live);
 8002cd4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002cd8:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4896      	ldr	r0, [pc, #600]	; (8002f3c <FRAME_SYNC_Send_Frame+0x36c>)
 8002ce2:	f7ff fe4b 	bl	800297c <CRC_Update>
	temp_packet[packet_length++] = time_to_live;
 8002ce6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002cf6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002cfa:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002cfe:	f2a2 1213 	subw	r2, r2, #275	; 0x113
 8002d02:	7812      	ldrb	r2, [r2, #0]
 8002d04:	545a      	strb	r2, [r3, r1]

	// Transmit data length
	CRC_Update(&FS_Data.tx_checksum, size);
 8002d06:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	488b      	ldr	r0, [pc, #556]	; (8002f3c <FRAME_SYNC_Send_Frame+0x36c>)
 8002d0e:	f7ff fe35 	bl	800297c <CRC_Update>
	temp_packet[packet_length++] = size;
 8002d12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002d22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d26:	f897 2128 	ldrb.w	r2, [r7, #296]	; 0x128
 8002d2a:	545a      	strb	r2, [r3, r1]

	// Transmit data
	for(int i = 0; i < size; i++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002d32:	e036      	b.n	8002da2 <FRAME_SYNC_Send_Frame+0x1d2>
	{
		CRC_Update(&FS_Data.tx_checksum, tx_frame[i]);
 8002d34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d38:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002d3c:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	4413      	add	r3, r2
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	4619      	mov	r1, r3
 8002d48:	487c      	ldr	r0, [pc, #496]	; (8002f3c <FRAME_SYNC_Send_Frame+0x36c>)
 8002d4a:	f7ff fe17 	bl	800297c <CRC_Update>
		FS_Data.stored_packet.buffer[i] = tx_frame[i];
 8002d4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d52:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002d56:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	7819      	ldrb	r1, [r3, #0]
 8002d60:	4a75      	ldr	r2, [pc, #468]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002d62:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d66:	4413      	add	r3, r2
 8002d68:	f603 33a5 	addw	r3, r3, #2981	; 0xba5
 8002d6c:	460a      	mov	r2, r1
 8002d6e:	701a      	strb	r2, [r3, #0]
		temp_packet[packet_length++] = tx_frame[i];
 8002d70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d74:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002d78:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	441a      	add	r2, r3
 8002d80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002d84:	1c59      	adds	r1, r3, #1
 8002d86:	f887 1117 	strb.w	r1, [r7, #279]	; 0x117
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	7812      	ldrb	r2, [r2, #0]
 8002d8e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002d92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d96:	545a      	strb	r2, [r3, r1]
	for(int i = 0; i < size; i++)
 8002d98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002da2:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8002da6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002daa:	429a      	cmp	r2, r3
 8002dac:	dbc2      	blt.n	8002d34 <FRAME_SYNC_Send_Frame+0x164>
	}

	// Transmit crc
	FS_Data.tx_checksum = ~FS_Data.tx_checksum;
 8002dae:	4b62      	ldr	r3, [pc, #392]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	4a60      	ldr	r2, [pc, #384]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002db6:	6053      	str	r3, [r2, #4]
	temp_packet[packet_length++] = *((uint8_t *)&FS_Data.tx_checksum + 0);
 8002db8:	4a60      	ldr	r2, [pc, #384]	; (8002f3c <FRAME_SYNC_Send_Frame+0x36c>)
 8002dba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002dbe:	1c59      	adds	r1, r3, #1
 8002dc0:	f887 1117 	strb.w	r1, [r7, #279]	; 0x117
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	7812      	ldrb	r2, [r2, #0]
 8002dc8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002dcc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002dd0:	545a      	strb	r2, [r3, r1]
	temp_packet[packet_length++] = *((uint8_t *)&FS_Data.tx_checksum + 1);
 8002dd2:	4a5b      	ldr	r2, [pc, #364]	; (8002f40 <FRAME_SYNC_Send_Frame+0x370>)
 8002dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002dd8:	1c59      	adds	r1, r3, #1
 8002dda:	f887 1117 	strb.w	r1, [r7, #279]	; 0x117
 8002dde:	4619      	mov	r1, r3
 8002de0:	7812      	ldrb	r2, [r2, #0]
 8002de2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002de6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002dea:	545a      	strb	r2, [r3, r1]
	temp_packet[packet_length++] = *((uint8_t *)&FS_Data.tx_checksum + 2);
 8002dec:	4a55      	ldr	r2, [pc, #340]	; (8002f44 <FRAME_SYNC_Send_Frame+0x374>)
 8002dee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002df2:	1c59      	adds	r1, r3, #1
 8002df4:	f887 1117 	strb.w	r1, [r7, #279]	; 0x117
 8002df8:	4619      	mov	r1, r3
 8002dfa:	7812      	ldrb	r2, [r2, #0]
 8002dfc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e00:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e04:	545a      	strb	r2, [r3, r1]
	temp_packet[packet_length++] = *((uint8_t *)&FS_Data.tx_checksum + 3);
 8002e06:	4a50      	ldr	r2, [pc, #320]	; (8002f48 <FRAME_SYNC_Send_Frame+0x378>)
 8002e08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e0c:	1c59      	adds	r1, r3, #1
 8002e0e:	f887 1117 	strb.w	r1, [r7, #279]	; 0x117
 8002e12:	4619      	mov	r1, r3
 8002e14:	7812      	ldrb	r2, [r2, #0]
 8002e16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e1e:	545a      	strb	r2, [r3, r1]

	// Transmit ETX
//	FRAME_SYNC_Byte_Transmit(ETX);
	temp_packet[packet_length++] = ETX;
 8002e20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e34:	2103      	movs	r1, #3
 8002e36:	5499      	strb	r1, [r3, r2]

	if(*tx_frame != ACK && *tx_frame != NACK)
 8002e38:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2bff      	cmp	r3, #255	; 0xff
 8002e46:	d00a      	beq.n	8002e5e <FRAME_SYNC_Send_Frame+0x28e>
 8002e48:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e4c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2bfe      	cmp	r3, #254	; 0xfe
 8002e56:	d002      	beq.n	8002e5e <FRAME_SYNC_Send_Frame+0x28e>
	{
		FS_Data.device_state = FRAME_SYNC_WAITING_ACK;
 8002e58:	4b37      	ldr	r3, [pc, #220]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	705a      	strb	r2, [r3, #1]
	}

	FS_Data.stored_packet.final_des_id = final_des_id;
 8002e5e:	4a36      	ldr	r2, [pc, #216]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002e60:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e64:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	f882 3ba0 	strb.w	r3, [r2, #2976]	; 0xba0
	FS_Data.stored_packet.temp_des_id = temp_des_id;
 8002e6e:	4a32      	ldr	r2, [pc, #200]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002e70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e74:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	f882 3ba1 	strb.w	r3, [r2, #2977]	; 0xba1
	FS_Data.stored_packet.src_id = FS_Data.my_id;
 8002e7e:	4b2e      	ldr	r3, [pc, #184]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002e84:	f883 2ba2 	strb.w	r2, [r3, #2978]	; 0xba2
	FS_Data.stored_packet.time_to_live = time_to_live;
 8002e88:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e8c:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8002e90:	f993 2000 	ldrsb.w	r2, [r3]
 8002e94:	4b28      	ldr	r3, [pc, #160]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002e96:	f883 2ba3 	strb.w	r2, [r3, #2979]	; 0xba3
	FS_Data.stored_packet.length = size;
 8002e9a:	4a27      	ldr	r2, [pc, #156]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002e9c:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8002ea0:	f882 3ba4 	strb.w	r3, [r2, #2980]	; 0xba4
	for(int i = 0; i < size; i++)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002eaa:	e015      	b.n	8002ed8 <FRAME_SYNC_Send_Frame+0x308>
	{
		FS_Data.stored_packet.buffer[i] = tx_frame[i];
 8002eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eb0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002eb4:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	7819      	ldrb	r1, [r3, #0]
 8002ebe:	4a1e      	ldr	r2, [pc, #120]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f603 33a5 	addw	r3, r3, #2981	; 0xba5
 8002eca:	460a      	mov	r2, r1
 8002ecc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 8002ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002ed8:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8002edc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	dbe3      	blt.n	8002eac <FRAME_SYNC_Send_Frame+0x2dc>
	}
	FS_Data.stored_packet.crc32 = FS_Data.tx_checksum;
 8002ee4:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4a13      	ldr	r2, [pc, #76]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002eea:	f8c2 3ca4 	str.w	r3, [r2, #3236]	; 0xca4
	if(FS_Data.my_id == 0)
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d105      	bne.n	8002f02 <FRAME_SYNC_Send_Frame+0x332>
	{
		FS_Data.stored_packet.is_requiring_reply = is_requiring_reply;
 8002ef6:	4a10      	ldr	r2, [pc, #64]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002ef8:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8002efc:	f882 3ca8 	strb.w	r3, [r2, #3240]	; 0xca8
 8002f00:	e003      	b.n	8002f0a <FRAME_SYNC_Send_Frame+0x33a>
	}
	else
	{
		FS_Data.stored_packet.is_requiring_reply = 0;
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2ca8 	strb.w	r2, [r3, #3240]	; 0xca8
	}


	FS_Data.last_transmit_frame_timer = HAL_GetTick();
 8002f0a:	f7fd ffa3 	bl	8000e54 <HAL_GetTick>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <FRAME_SYNC_Send_Frame+0x368>)
 8002f12:	f8c2 3b9c 	str.w	r3, [r2, #2972]	; 0xb9c

	FRAME_SYNC_Packet_Transmit(temp_packet, packet_length);
 8002f16:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8002f1a:	f107 030c 	add.w	r3, r7, #12
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fc11 	bl	8000748 <FRAME_SYNC_Packet_Transmit>
 8002f26:	e002      	b.n	8002f2e <FRAME_SYNC_Send_Frame+0x35e>
	if(FS_Data.device_state != FRAME_SYNC_READY_TO_TRANSMIT) return;
 8002f28:	bf00      	nop
 8002f2a:	e000      	b.n	8002f2e <FRAME_SYNC_Send_Frame+0x35e>
	if(time_to_live <= 0) return;
 8002f2c:	bf00      	nop
}
 8002f2e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd90      	pop	{r4, r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200011f4 	.word	0x200011f4
 8002f3c:	200011f8 	.word	0x200011f8
 8002f40:	200011f9 	.word	0x200011f9
 8002f44:	200011fa 	.word	0x200011fa
 8002f48:	200011fb 	.word	0x200011fb

08002f4c <FRAME_SYNC_Receive>:

void FRAME_SYNC_Receive(uint8_t rx_data)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
	switch(FS_Data.rx_state)
 8002f56:	4b6b      	ldr	r3, [pc, #428]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 8002f58:	f893 3a84 	ldrb.w	r3, [r3, #2692]	; 0xa84
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	f200 80c2 	bhi.w	80030e6 <FRAME_SYNC_Receive+0x19a>
 8002f62:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <FRAME_SYNC_Receive+0x1c>)
 8002f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f68:	08002f8d 	.word	0x08002f8d
 8002f6c:	08002fad 	.word	0x08002fad
 8002f70:	08002fc9 	.word	0x08002fc9
 8002f74:	08002ff1 	.word	0x08002ff1
 8002f78:	0800300d 	.word	0x0800300d
 8002f7c:	0800302b 	.word	0x0800302b
 8002f80:	08003047 	.word	0x08003047
 8002f84:	08003087 	.word	0x08003087
 8002f88:	080030c7 	.word	0x080030c7
	{
		case SEARCHING_STX:
			if(rx_data == STX)
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d109      	bne.n	8002fa6 <FRAME_SYNC_Receive+0x5a>
			{
				FS_Data.rx_checksum = 0xFFFFFFFF;
 8002f92:	4b5c      	ldr	r3, [pc, #368]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 8002f94:	f04f 32ff 	mov.w	r2, #4294967295
 8002f98:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80
				FS_Data.rx_state = RECEIVING_FINAL_DES_ID;
 8002f9c:	4b59      	ldr	r3, [pc, #356]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2a84 	strb.w	r2, [r3, #2692]	; 0xa84
			else
			{
				Rx_Reset();
//				FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
			}
			break;
 8002fa4:	e0a4      	b.n	80030f0 <FRAME_SYNC_Receive+0x1a4>
				Rx_Reset();
 8002fa6:	f7ff fccb 	bl	8002940 <Rx_Reset>
			break;
 8002faa:	e0a1      	b.n	80030f0 <FRAME_SYNC_Receive+0x1a4>
		case RECEIVING_FINAL_DES_ID:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4855      	ldr	r0, [pc, #340]	; (8003108 <FRAME_SYNC_Receive+0x1bc>)
 8002fb2:	f7ff fce3 	bl	800297c <CRC_Update>
			FS_Data.rx_packet.final_des_id = rx_data;
 8002fb6:	4a53      	ldr	r2, [pc, #332]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	f882 3a88 	strb.w	r3, [r2, #2696]	; 0xa88
			FS_Data.rx_state = RECEIVING_TEMP_DES_ID;
 8002fbe:	4b51      	ldr	r3, [pc, #324]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	f883 2a84 	strb.w	r2, [r3, #2692]	; 0xa84
			break;
 8002fc6:	e093      	b.n	80030f0 <FRAME_SYNC_Receive+0x1a4>
		case RECEIVING_TEMP_DES_ID:
			if(rx_data != MY_ID)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <FRAME_SYNC_Receive+0x88>
			{
				Rx_Reset();
 8002fce:	f7ff fcb7 	bl	8002940 <Rx_Reset>
				return;
 8002fd2:	e093      	b.n	80030fc <FRAME_SYNC_Receive+0x1b0>
			}
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	484b      	ldr	r0, [pc, #300]	; (8003108 <FRAME_SYNC_Receive+0x1bc>)
 8002fda:	f7ff fccf 	bl	800297c <CRC_Update>
			FS_Data.rx_packet.temp_des_id = rx_data;
 8002fde:	4a49      	ldr	r2, [pc, #292]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	f882 3a89 	strb.w	r3, [r2, #2697]	; 0xa89
			FS_Data.rx_state = RECEIVING_SRC_ID;
 8002fe6:	4b47      	ldr	r3, [pc, #284]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 8002fe8:	2203      	movs	r2, #3
 8002fea:	f883 2a84 	strb.w	r2, [r3, #2692]	; 0xa84
			break;
 8002fee:	e07f      	b.n	80030f0 <FRAME_SYNC_Receive+0x1a4>
		case RECEIVING_SRC_ID:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4844      	ldr	r0, [pc, #272]	; (8003108 <FRAME_SYNC_Receive+0x1bc>)
 8002ff6:	f7ff fcc1 	bl	800297c <CRC_Update>
			FS_Data.rx_packet.src_id = rx_data;
 8002ffa:	4a42      	ldr	r2, [pc, #264]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	f882 3a8a 	strb.w	r3, [r2, #2698]	; 0xa8a
			FS_Data.rx_state = RECEIVING_TIME_TO_LIVE;
 8003002:	4b40      	ldr	r3, [pc, #256]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 8003004:	2204      	movs	r2, #4
 8003006:	f883 2a84 	strb.w	r2, [r3, #2692]	; 0xa84
			break;
 800300a:	e071      	b.n	80030f0 <FRAME_SYNC_Receive+0x1a4>
		case RECEIVING_TIME_TO_LIVE:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	4619      	mov	r1, r3
 8003010:	483d      	ldr	r0, [pc, #244]	; (8003108 <FRAME_SYNC_Receive+0x1bc>)
 8003012:	f7ff fcb3 	bl	800297c <CRC_Update>
			FS_Data.rx_packet.time_to_live = rx_data;
 8003016:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800301a:	4b3a      	ldr	r3, [pc, #232]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 800301c:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
			FS_Data.rx_state = RECEIVING_DATA_LEN;
 8003020:	4b38      	ldr	r3, [pc, #224]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 8003022:	2205      	movs	r2, #5
 8003024:	f883 2a84 	strb.w	r2, [r3, #2692]	; 0xa84
			break;
 8003028:	e062      	b.n	80030f0 <FRAME_SYNC_Receive+0x1a4>
		case RECEIVING_DATA_LEN:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	4619      	mov	r1, r3
 800302e:	4836      	ldr	r0, [pc, #216]	; (8003108 <FRAME_SYNC_Receive+0x1bc>)
 8003030:	f7ff fca4 	bl	800297c <CRC_Update>
			FS_Data.rx_packet.length = rx_data;
 8003034:	4a33      	ldr	r2, [pc, #204]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	f882 3a8c 	strb.w	r3, [r2, #2700]	; 0xa8c
			FS_Data.rx_state = RECEIVING_DATA;
 800303c:	4b31      	ldr	r3, [pc, #196]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 800303e:	2206      	movs	r2, #6
 8003040:	f883 2a84 	strb.w	r2, [r3, #2692]	; 0xa84
			break;
 8003044:	e054      	b.n	80030f0 <FRAME_SYNC_Receive+0x1a4>
		case RECEIVING_DATA:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	4619      	mov	r1, r3
 800304a:	482f      	ldr	r0, [pc, #188]	; (8003108 <FRAME_SYNC_Receive+0x1bc>)
 800304c:	f7ff fc96 	bl	800297c <CRC_Update>
			FS_Data.rx_packet.buffer[FS_Data.rx_pointer++] = rx_data;
 8003050:	4b2c      	ldr	r3, [pc, #176]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 8003052:	f893 3a85 	ldrb.w	r3, [r3, #2693]	; 0xa85
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	b2d1      	uxtb	r1, r2
 800305a:	4a2a      	ldr	r2, [pc, #168]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 800305c:	f882 1a85 	strb.w	r1, [r2, #2693]	; 0xa85
 8003060:	461a      	mov	r2, r3
 8003062:	4b28      	ldr	r3, [pc, #160]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 8003064:	4413      	add	r3, r2
 8003066:	79fa      	ldrb	r2, [r7, #7]
 8003068:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d
			if(FS_Data.rx_pointer == FS_Data.rx_packet.length)
 800306c:	4b25      	ldr	r3, [pc, #148]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 800306e:	f893 2a85 	ldrb.w	r2, [r3, #2693]	; 0xa85
 8003072:	4b24      	ldr	r3, [pc, #144]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 8003074:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8003078:	429a      	cmp	r2, r3
 800307a:	d136      	bne.n	80030ea <FRAME_SYNC_Receive+0x19e>
			{
				FS_Data.rx_state = RECEIVING_CRC;
 800307c:	4b21      	ldr	r3, [pc, #132]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 800307e:	2207      	movs	r2, #7
 8003080:	f883 2a84 	strb.w	r2, [r3, #2692]	; 0xa84
			}
			break;
 8003084:	e031      	b.n	80030ea <FRAME_SYNC_Receive+0x19e>
		case RECEIVING_CRC:
			FS_Data.rx_packet.crc32 |= (uint32_t)rx_data << ((FS_Data.rx_num_crc_byte) * 8);
 8003086:	4b1f      	ldr	r3, [pc, #124]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 8003088:	f8d3 2b8c 	ldr.w	r2, [r3, #2956]	; 0xb8c
 800308c:	79f9      	ldrb	r1, [r7, #7]
 800308e:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 8003090:	f893 3b94 	ldrb.w	r3, [r3, #2964]	; 0xb94
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	fa01 f303 	lsl.w	r3, r1, r3
 800309a:	4313      	orrs	r3, r2
 800309c:	4a19      	ldr	r2, [pc, #100]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 800309e:	f8c2 3b8c 	str.w	r3, [r2, #2956]	; 0xb8c
			FS_Data.rx_num_crc_byte++;
 80030a2:	4b18      	ldr	r3, [pc, #96]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 80030a4:	f893 3b94 	ldrb.w	r3, [r3, #2964]	; 0xb94
 80030a8:	3301      	adds	r3, #1
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	4b15      	ldr	r3, [pc, #84]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 80030ae:	f883 2b94 	strb.w	r2, [r3, #2964]	; 0xb94
			if(FS_Data.rx_num_crc_byte == 4)
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 80030b4:	f893 3b94 	ldrb.w	r3, [r3, #2964]	; 0xb94
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d118      	bne.n	80030ee <FRAME_SYNC_Receive+0x1a2>
			{
				FS_Data.rx_state = RECEIVING_ETX;
 80030bc:	4b11      	ldr	r3, [pc, #68]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 80030be:	2208      	movs	r2, #8
 80030c0:	f883 2a84 	strb.w	r2, [r3, #2692]	; 0xa84
			}
			break;
 80030c4:	e013      	b.n	80030ee <FRAME_SYNC_Receive+0x1a2>
		case RECEIVING_ETX:
			if(rx_data == ETX)
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d102      	bne.n	80030d2 <FRAME_SYNC_Receive+0x186>
			{
				validate_packet();
 80030cc:	f7ff fc6a 	bl	80029a4 <validate_packet>
			else
			{
				Rx_Reset();
				FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
			}
			break;
 80030d0:	e00e      	b.n	80030f0 <FRAME_SYNC_Receive+0x1a4>
				Rx_Reset();
 80030d2:	f7ff fc35 	bl	8002940 <Rx_Reset>
				FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 80030d8:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 80030dc:	4619      	mov	r1, r3
 80030de:	480b      	ldr	r0, [pc, #44]	; (800310c <FRAME_SYNC_Receive+0x1c0>)
 80030e0:	f7fd fb06 	bl	80006f0 <FRAME_SYNC_RxFailCallback>
			break;
 80030e4:	e004      	b.n	80030f0 <FRAME_SYNC_Receive+0x1a4>
		default:
			break;
 80030e6:	bf00      	nop
 80030e8:	e002      	b.n	80030f0 <FRAME_SYNC_Receive+0x1a4>
			break;
 80030ea:	bf00      	nop
 80030ec:	e000      	b.n	80030f0 <FRAME_SYNC_Receive+0x1a4>
			break;
 80030ee:	bf00      	nop
	}

	FS_Data.last_receive_byte_timer = HAL_GetTick();
 80030f0:	f7fd feb0 	bl	8000e54 <HAL_GetTick>
 80030f4:	4603      	mov	r3, r0
 80030f6:	4a03      	ldr	r2, [pc, #12]	; (8003104 <FRAME_SYNC_Receive+0x1b8>)
 80030f8:	f8c2 3b98 	str.w	r3, [r2, #2968]	; 0xb98
}
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	200011f4 	.word	0x200011f4
 8003108:	20001c74 	.word	0x20001c74
 800310c:	20001c81 	.word	0x20001c81

08003110 <FRAME_SYNC_Handle>:

void FRAME_SYNC_Handle(){
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b083      	sub	sp, #12
 8003114:	af02      	add	r7, sp, #8
	if(FS_Data.rx_state != SEARCHING_STX && (HAL_GetTick() - FS_Data.last_receive_byte_timer > WAITING_NEXT_BYTE_TIME))
 8003116:	4b31      	ldr	r3, [pc, #196]	; (80031dc <FRAME_SYNC_Handle+0xcc>)
 8003118:	f893 3a84 	ldrb.w	r3, [r3, #2692]	; 0xa84
 800311c:	2b00      	cmp	r3, #0
 800311e:	d012      	beq.n	8003146 <FRAME_SYNC_Handle+0x36>
 8003120:	f7fd fe98 	bl	8000e54 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <FRAME_SYNC_Handle+0xcc>)
 8003128:	f8d3 3b98 	ldr.w	r3, [r3, #2968]	; 0xb98
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003132:	d908      	bls.n	8003146 <FRAME_SYNC_Handle+0x36>
	{
		Rx_Reset();
 8003134:	f7ff fc04 	bl	8002940 <Rx_Reset>
		FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
 8003138:	4b28      	ldr	r3, [pc, #160]	; (80031dc <FRAME_SYNC_Handle+0xcc>)
 800313a:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 800313e:	4619      	mov	r1, r3
 8003140:	4827      	ldr	r0, [pc, #156]	; (80031e0 <FRAME_SYNC_Handle+0xd0>)
 8003142:	f7fd fad5 	bl	80006f0 <FRAME_SYNC_RxFailCallback>
	}

	if(FS_Data.device_state == FRAME_SYNC_WAITING_ACK && (HAL_GetTick() - FS_Data.last_transmit_frame_timer > WAITING_ACK_TIME))
 8003146:	4b25      	ldr	r3, [pc, #148]	; (80031dc <FRAME_SYNC_Handle+0xcc>)
 8003148:	785b      	ldrb	r3, [r3, #1]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d12e      	bne.n	80031ac <FRAME_SYNC_Handle+0x9c>
 800314e:	f7fd fe81 	bl	8000e54 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	4b21      	ldr	r3, [pc, #132]	; (80031dc <FRAME_SYNC_Handle+0xcc>)
 8003156:	f8d3 3b9c 	ldr.w	r3, [r3, #2972]	; 0xb9c
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003160:	4293      	cmp	r3, r2
 8003162:	d923      	bls.n	80031ac <FRAME_SYNC_Handle+0x9c>
	{
		if(FS_Data.stored_packet.time_to_live - 1 != 0)
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <FRAME_SYNC_Handle+0xcc>)
 8003166:	f993 3ba3 	ldrsb.w	r3, [r3, #2979]	; 0xba3
 800316a:	2b01      	cmp	r3, #1
 800316c:	d01b      	beq.n	80031a6 <FRAME_SYNC_Handle+0x96>
		{
			FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 800316e:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <FRAME_SYNC_Handle+0xcc>)
 8003170:	2200      	movs	r2, #0
 8003172:	705a      	strb	r2, [r3, #1]
			FRAME_SYNC_Send_Frame(FS_Data.stored_packet.final_des_id, FS_Data.stored_packet.temp_des_id, FS_Data.stored_packet.time_to_live - 1,
 8003174:	4b19      	ldr	r3, [pc, #100]	; (80031dc <FRAME_SYNC_Handle+0xcc>)
 8003176:	f893 0ba0 	ldrb.w	r0, [r3, #2976]	; 0xba0
 800317a:	4b18      	ldr	r3, [pc, #96]	; (80031dc <FRAME_SYNC_Handle+0xcc>)
 800317c:	f893 1ba1 	ldrb.w	r1, [r3, #2977]	; 0xba1
 8003180:	4b16      	ldr	r3, [pc, #88]	; (80031dc <FRAME_SYNC_Handle+0xcc>)
 8003182:	f993 3ba3 	ldrsb.w	r3, [r3, #2979]	; 0xba3
 8003186:	b2db      	uxtb	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b2dc      	uxtb	r4, r3
 800318c:	4b13      	ldr	r3, [pc, #76]	; (80031dc <FRAME_SYNC_Handle+0xcc>)
 800318e:	f893 3ba4 	ldrb.w	r3, [r3, #2980]	; 0xba4
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <FRAME_SYNC_Handle+0xcc>)
 8003194:	f892 2ca8 	ldrb.w	r2, [r2, #3240]	; 0xca8
 8003198:	9201      	str	r2, [sp, #4]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <FRAME_SYNC_Handle+0xd4>)
 800319e:	4622      	mov	r2, r4
 80031a0:	f7ff fd16 	bl	8002bd0 <FRAME_SYNC_Send_Frame>
 80031a4:	e002      	b.n	80031ac <FRAME_SYNC_Handle+0x9c>
					FS_Data.stored_packet.buffer, FS_Data.stored_packet.length, FS_Data.stored_packet.is_requiring_reply);
		}
		else
		{
			FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 80031a6:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <FRAME_SYNC_Handle+0xcc>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	705a      	strb	r2, [r3, #1]
		}
	}

	if(FS_Data.device_state == FRAME_SYNC_WAITING_REPLY && (HAL_GetTick() - FS_Data.last_transmit_frame_timer > WAITING_REPLY_TIME))
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <FRAME_SYNC_Handle+0xcc>)
 80031ae:	785b      	ldrb	r3, [r3, #1]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d10d      	bne.n	80031d0 <FRAME_SYNC_Handle+0xc0>
 80031b4:	f7fd fe4e 	bl	8000e54 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <FRAME_SYNC_Handle+0xcc>)
 80031bc:	f8d3 3b9c 	ldr.w	r3, [r3, #2972]	; 0xb9c
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d902      	bls.n	80031d0 <FRAME_SYNC_Handle+0xc0>
	{
		FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 80031ca:	4b04      	ldr	r3, [pc, #16]	; (80031dc <FRAME_SYNC_Handle+0xcc>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	705a      	strb	r2, [r3, #1]
	}

	FRAME_SYNC_Packet_Receive();
 80031d0:	f7fd fad4 	bl	800077c <FRAME_SYNC_Packet_Receive>
}
 80031d4:	bf00      	nop
 80031d6:	3704      	adds	r7, #4
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd90      	pop	{r4, r7, pc}
 80031dc:	200011f4 	.word	0x200011f4
 80031e0:	20001c81 	.word	0x20001c81
 80031e4:	20001d99 	.word	0x20001d99

080031e8 <FRAME_SYNC_Is_Ready_Transmit>:

uint8_t FRAME_SYNC_Is_Ready_Transmit()
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
	return (FS_Data.device_state == FRAME_SYNC_READY_TO_TRANSMIT) ? 1 : 0;
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <FRAME_SYNC_Is_Ready_Transmit+0x1c>)
 80031ee:	785b      	ldrb	r3, [r3, #1]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	200011f4 	.word	0x200011f4

08003208 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fbee 	bl	80039fe <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fc09 	bl	8003a3e <SX1278_hw_SPIReadByte>
 800322c:	4603      	mov	r3, r0
 800322e:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2101      	movs	r1, #1
 8003236:	4618      	mov	r0, r3
 8003238:	f000 fba6 	bl	8003988 <SX1278_hw_SetNSS>
	return tmp;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	460b      	mov	r3, r1
 8003250:	70fb      	strb	r3, [r7, #3]
 8003252:	4613      	mov	r3, r2
 8003254:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2100      	movs	r1, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fb93 	bl	8003988 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	78fb      	ldrb	r3, [r7, #3]
 8003268:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800326c:	b2db      	uxtb	r3, r3
 800326e:	4619      	mov	r1, r3
 8003270:	4610      	mov	r0, r2
 8003272:	f000 fbc4 	bl	80039fe <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	78ba      	ldrb	r2, [r7, #2]
 800327c:	4611      	mov	r1, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fbbd 	bl	80039fe <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2101      	movs	r1, #1
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fb7c 	bl	8003988 <SX1278_hw_SetNSS>
}
 8003290:	bf00      	nop
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	461a      	mov	r2, r3
 80032a4:	460b      	mov	r3, r1
 80032a6:	72fb      	strb	r3, [r7, #11]
 80032a8:	4613      	mov	r3, r2
 80032aa:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80032ac:	7abb      	ldrb	r3, [r7, #10]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d927      	bls.n	8003302 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fb65 	bl	8003988 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	7afa      	ldrb	r2, [r7, #11]
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fb99 	bl	80039fe <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80032cc:	2300      	movs	r3, #0
 80032ce:	75fb      	strb	r3, [r7, #23]
 80032d0:	e00c      	b.n	80032ec <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6819      	ldr	r1, [r3, #0]
 80032d6:	7dfb      	ldrb	r3, [r7, #23]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	18d4      	adds	r4, r2, r3
 80032dc:	4608      	mov	r0, r1
 80032de:	f000 fbae 	bl	8003a3e <SX1278_hw_SPIReadByte>
 80032e2:	4603      	mov	r3, r0
 80032e4:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
 80032e8:	3301      	adds	r3, #1
 80032ea:	75fb      	strb	r3, [r7, #23]
 80032ec:	7dfa      	ldrb	r2, [r7, #23]
 80032ee:	7abb      	ldrb	r3, [r7, #10]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d3ee      	bcc.n	80032d2 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2101      	movs	r1, #1
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fb44 	bl	8003988 <SX1278_hw_SetNSS>
 8003300:	e000      	b.n	8003304 <SX1278_SPIBurstRead+0x6c>
		return;
 8003302:	bf00      	nop
	}
}
 8003304:	371c      	adds	r7, #28
 8003306:	46bd      	mov	sp, r7
 8003308:	bd90      	pop	{r4, r7, pc}

0800330a <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800330a:	b580      	push	{r7, lr}
 800330c:	b086      	sub	sp, #24
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	461a      	mov	r2, r3
 8003316:	460b      	mov	r3, r1
 8003318:	72fb      	strb	r3, [r7, #11]
 800331a:	4613      	mov	r3, r2
 800331c:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800331e:	7abb      	ldrb	r3, [r7, #10]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d929      	bls.n	8003378 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fb2c 	bl	8003988 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	7afb      	ldrb	r3, [r7, #11]
 8003336:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800333a:	b2db      	uxtb	r3, r3
 800333c:	4619      	mov	r1, r3
 800333e:	4610      	mov	r0, r2
 8003340:	f000 fb5d 	bl	80039fe <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8003344:	2300      	movs	r3, #0
 8003346:	75fb      	strb	r3, [r7, #23]
 8003348:	e00b      	b.n	8003362 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	7dfb      	ldrb	r3, [r7, #23]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	4413      	add	r3, r2
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	4619      	mov	r1, r3
 8003358:	f000 fb51 	bl	80039fe <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800335c:	7dfb      	ldrb	r3, [r7, #23]
 800335e:	3301      	adds	r3, #1
 8003360:	75fb      	strb	r3, [r7, #23]
 8003362:	7dfa      	ldrb	r2, [r7, #23]
 8003364:	7abb      	ldrb	r3, [r7, #10]
 8003366:	429a      	cmp	r2, r3
 8003368:	d3ef      	bcc.n	800334a <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2101      	movs	r1, #1
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fb09 	bl	8003988 <SX1278_hw_SetNSS>
 8003376:	e000      	b.n	800337a <SX1278_SPIBurstWrite+0x70>
		return;
 8003378:	bf00      	nop
	}
}
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f90d 	bl	80035a8 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800338e:	200f      	movs	r0, #15
 8003390:	f000 fb7b 	bl	8003a8a <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f917 	bl	80035c8 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80033a0:	f04f 0000 	mov.w	r0, #0
 80033a4:	f04f 0100 	mov.w	r1, #0
 80033a8:	04d9      	lsls	r1, r3, #19
 80033aa:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80033ae:	04d0      	lsls	r0, r2, #19
 80033b0:	4a6f      	ldr	r2, [pc, #444]	; (8003570 <SX1278_config+0x1f0>)
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	f7fc fed3 	bl	8000160 <__aeabi_uldivmod>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80033c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	0c02      	lsrs	r2, r0, #16
 80033d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80033d4:	0c0b      	lsrs	r3, r1, #16
 80033d6:	b2d3      	uxtb	r3, r2
 80033d8:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80033da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	0a02      	lsrs	r2, r0, #8
 80033e8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80033ec:	0a0b      	lsrs	r3, r1, #8
 80033ee:	b2d3      	uxtb	r3, r2
 80033f0:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80033f2:	7c3b      	ldrb	r3, [r7, #16]
 80033f4:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 80033f6:	f107 020c 	add.w	r2, r7, #12
 80033fa:	2303      	movs	r3, #3
 80033fc:	2106      	movs	r1, #6
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff ff83 	bl	800330a <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8003404:	2234      	movs	r2, #52	; 0x34
 8003406:	2139      	movs	r1, #57	; 0x39
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff ff1c 	bl	8003246 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	7c1b      	ldrb	r3, [r3, #16]
 8003412:	461a      	mov	r2, r3
 8003414:	4b57      	ldr	r3, [pc, #348]	; (8003574 <SX1278_config+0x1f4>)
 8003416:	5c9b      	ldrb	r3, [r3, r2]
 8003418:	461a      	mov	r2, r3
 800341a:	2109      	movs	r1, #9
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff ff12 	bl	8003246 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8003422:	220b      	movs	r2, #11
 8003424:	210b      	movs	r1, #11
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff ff0d 	bl	8003246 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 800342c:	2223      	movs	r2, #35	; 0x23
 800342e:	210c      	movs	r1, #12
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff ff08 	bl	8003246 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	7c5b      	ldrb	r3, [r3, #17]
 800343a:	461a      	mov	r2, r3
 800343c:	4b4e      	ldr	r3, [pc, #312]	; (8003578 <SX1278_config+0x1f8>)
 800343e:	5c9b      	ldrb	r3, [r3, r2]
 8003440:	2b06      	cmp	r3, #6
 8003442:	d147      	bne.n	80034d4 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7c9b      	ldrb	r3, [r3, #18]
 8003448:	461a      	mov	r2, r3
 800344a:	4b4c      	ldr	r3, [pc, #304]	; (800357c <SX1278_config+0x1fc>)
 800344c:	5c9b      	ldrb	r3, [r3, r2]
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	7cdb      	ldrb	r3, [r3, #19]
 8003456:	4619      	mov	r1, r3
 8003458:	4b49      	ldr	r3, [pc, #292]	; (8003580 <SX1278_config+0x200>)
 800345a:	5c5b      	ldrb	r3, [r3, r1]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	b2db      	uxtb	r3, r3
 8003460:	4413      	add	r3, r2
 8003462:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8003464:	3301      	adds	r3, #1
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	211d      	movs	r1, #29
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff feea 	bl	8003246 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	7c5b      	ldrb	r3, [r3, #17]
 8003476:	461a      	mov	r2, r3
 8003478:	4b3f      	ldr	r3, [pc, #252]	; (8003578 <SX1278_config+0x1f8>)
 800347a:	5c9b      	ldrb	r3, [r3, r2]
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7d1b      	ldrb	r3, [r3, #20]
 8003484:	4619      	mov	r1, r3
 8003486:	4b3f      	ldr	r3, [pc, #252]	; (8003584 <SX1278_config+0x204>)
 8003488:	5c5b      	ldrb	r3, [r3, r1]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	b2db      	uxtb	r3, r3
 800348e:	4413      	add	r3, r2
 8003490:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8003492:	3303      	adds	r3, #3
 8003494:	b2db      	uxtb	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	211e      	movs	r1, #30
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff fed3 	bl	8003246 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80034a0:	2131      	movs	r1, #49	; 0x31
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff feb0 	bl	8003208 <SX1278_SPIRead>
 80034a8:	4603      	mov	r3, r0
 80034aa:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	f023 0307 	bic.w	r3, r3, #7
 80034b2:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	f043 0305 	orr.w	r3, r3, #5
 80034ba:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	461a      	mov	r2, r3
 80034c0:	2131      	movs	r1, #49	; 0x31
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff febf 	bl	8003246 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80034c8:	220c      	movs	r2, #12
 80034ca:	2137      	movs	r1, #55	; 0x37
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff feba 	bl	8003246 <SX1278_SPIWrite>
 80034d2:	e029      	b.n	8003528 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	7c9b      	ldrb	r3, [r3, #18]
 80034d8:	461a      	mov	r2, r3
 80034da:	4b28      	ldr	r3, [pc, #160]	; (800357c <SX1278_config+0x1fc>)
 80034dc:	5c9b      	ldrb	r3, [r3, r2]
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	7cdb      	ldrb	r3, [r3, #19]
 80034e6:	4619      	mov	r1, r3
 80034e8:	4b25      	ldr	r3, [pc, #148]	; (8003580 <SX1278_config+0x200>)
 80034ea:	5c5b      	ldrb	r3, [r3, r1]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80034f0:	4413      	add	r3, r2
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	211d      	movs	r1, #29
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff fea4 	bl	8003246 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	7c5b      	ldrb	r3, [r3, #17]
 8003502:	461a      	mov	r2, r3
 8003504:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <SX1278_config+0x1f8>)
 8003506:	5c9b      	ldrb	r3, [r3, r2]
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	7d1b      	ldrb	r3, [r3, #20]
 8003510:	4619      	mov	r1, r3
 8003512:	4b1c      	ldr	r3, [pc, #112]	; (8003584 <SX1278_config+0x204>)
 8003514:	5c5b      	ldrb	r3, [r3, r1]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800351a:	4413      	add	r3, r2
 800351c:	b2db      	uxtb	r3, r3
 800351e:	461a      	mov	r2, r3
 8003520:	211e      	movs	r1, #30
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff fe8f 	bl	8003246 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8003528:	2204      	movs	r2, #4
 800352a:	2126      	movs	r1, #38	; 0x26
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff fe8a 	bl	8003246 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8003532:	2208      	movs	r2, #8
 8003534:	211f      	movs	r1, #31
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff fe85 	bl	8003246 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800353c:	2200      	movs	r2, #0
 800353e:	2120      	movs	r1, #32
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff fe80 	bl	8003246 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8003546:	2208      	movs	r2, #8
 8003548:	2121      	movs	r1, #33	; 0x21
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff fe7b 	bl	8003246 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8003550:	2201      	movs	r2, #1
 8003552:	2141      	movs	r1, #65	; 0x41
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff fe76 	bl	8003246 <SX1278_SPIWrite>
	module->readBytes = 0;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f810 	bl	8003588 <SX1278_standby>
}
 8003568:	bf00      	nop
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	01e84800 	.word	0x01e84800
 8003574:	08004648 	.word	0x08004648
 8003578:	0800464c 	.word	0x0800464c
 800357c:	08004654 	.word	0x08004654
 8003580:	08004660 	.word	0x08004660
 8003584:	08004664 	.word	0x08004664

08003588 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8003590:	2209      	movs	r2, #9
 8003592:	2101      	movs	r1, #1
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff fe56 	bl	8003246 <SX1278_SPIWrite>
	module->status = STANDBY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	759a      	strb	r2, [r3, #22]
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80035b0:	2208      	movs	r2, #8
 80035b2:	2101      	movs	r1, #1
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff fe46 	bl	8003246 <SX1278_SPIWrite>
	module->status = SLEEP;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	759a      	strb	r2, [r3, #22]
}
 80035c0:	bf00      	nop
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80035d0:	2288      	movs	r2, #136	; 0x88
 80035d2:	2101      	movs	r1, #1
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff fe36 	bl	8003246 <SX1278_SPIWrite>
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80035ea:	22ff      	movs	r2, #255	; 0xff
 80035ec:	2112      	movs	r1, #18
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff fe29 	bl	8003246 <SX1278_SPIWrite>
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	460b      	mov	r3, r1
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	7afa      	ldrb	r2, [r7, #11]
 800360e:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f7ff feb5 	bl	8003380 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8003616:	2284      	movs	r2, #132	; 0x84
 8003618:	214d      	movs	r1, #77	; 0x4d
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f7ff fe13 	bl	8003246 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8003620:	22ff      	movs	r2, #255	; 0xff
 8003622:	2124      	movs	r1, #36	; 0x24
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f7ff fe0e 	bl	8003246 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800362a:	2201      	movs	r2, #1
 800362c:	2140      	movs	r1, #64	; 0x40
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f7ff fe09 	bl	8003246 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8003634:	223f      	movs	r2, #63	; 0x3f
 8003636:	2111      	movs	r1, #17
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f7ff fe04 	bl	8003246 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f7ff ffcf 	bl	80035e2 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8003644:	7afb      	ldrb	r3, [r7, #11]
 8003646:	461a      	mov	r2, r3
 8003648:	2122      	movs	r1, #34	; 0x22
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f7ff fdfb 	bl	8003246 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8003650:	210f      	movs	r1, #15
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f7ff fdd8 	bl	8003208 <SX1278_SPIRead>
 8003658:	4603      	mov	r3, r0
 800365a:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 800365c:	7dfb      	ldrb	r3, [r7, #23]
 800365e:	461a      	mov	r2, r3
 8003660:	210d      	movs	r1, #13
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f7ff fdef 	bl	8003246 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8003668:	228d      	movs	r2, #141	; 0x8d
 800366a:	2101      	movs	r1, #1
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f7ff fdea 	bl	8003246 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800367a:	2118      	movs	r1, #24
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f7ff fdc3 	bl	8003208 <SX1278_SPIRead>
 8003682:	4603      	mov	r3, r0
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b04      	cmp	r3, #4
 800368a:	d104      	bne.n	8003696 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2203      	movs	r2, #3
 8003690:	759a      	strb	r2, [r3, #22]
			return 1;
 8003692:	2301      	movs	r3, #1
 8003694:	e013      	b.n	80036be <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3b01      	subs	r3, #1
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 f985 	bl	80039b6 <SX1278_hw_Reset>
			SX1278_config(module);
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f7ff fe67 	bl	8003380 <SX1278_config>
			return 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e003      	b.n	80036be <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80036b6:	2001      	movs	r0, #1
 80036b8:	f000 f9e7 	bl	8003a8a <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80036bc:	e7dd      	b.n	800367a <SX1278_LoRaEntryRx+0x7e>
	}
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b084      	sub	sp, #16
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 f9e4 	bl	8003aa0 <SX1278_hw_GetDIO0>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d030      	beq.n	8003740 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3317      	adds	r3, #23
 80036e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036e6:	2100      	movs	r1, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fabf 	bl	8003c6c <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 80036ee:	2110      	movs	r1, #16
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff fd89 	bl	8003208 <SX1278_SPIRead>
 80036f6:	4603      	mov	r3, r0
 80036f8:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 80036fa:	7bbb      	ldrb	r3, [r7, #14]
 80036fc:	461a      	mov	r2, r3
 80036fe:	210d      	movs	r1, #13
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff fda0 	bl	8003246 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	7c5b      	ldrb	r3, [r3, #17]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	7d5b      	ldrb	r3, [r3, #21]
 8003712:	73fb      	strb	r3, [r7, #15]
 8003714:	e005      	b.n	8003722 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8003716:	2113      	movs	r1, #19
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff fd75 	bl	8003208 <SX1278_SPIRead>
 800371e:	4603      	mov	r3, r0
 8003720:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f103 0217 	add.w	r2, r3, #23
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	2100      	movs	r1, #0
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff fdb3 	bl	8003298 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	7bfa      	ldrb	r2, [r7, #15]
 8003736:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff ff51 	bl	80035e2 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	460b      	mov	r3, r1
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	7afa      	ldrb	r2, [r7, #11]
 8003760:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f7ff fe0c 	bl	8003380 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8003768:	2287      	movs	r2, #135	; 0x87
 800376a:	214d      	movs	r1, #77	; 0x4d
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f7ff fd6a 	bl	8003246 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8003772:	2200      	movs	r2, #0
 8003774:	2124      	movs	r1, #36	; 0x24
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f7ff fd65 	bl	8003246 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 800377c:	2241      	movs	r2, #65	; 0x41
 800377e:	2140      	movs	r1, #64	; 0x40
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7ff fd60 	bl	8003246 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f7ff ff2b 	bl	80035e2 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 800378c:	22f7      	movs	r2, #247	; 0xf7
 800378e:	2111      	movs	r1, #17
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff fd58 	bl	8003246 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8003796:	7afb      	ldrb	r3, [r7, #11]
 8003798:	461a      	mov	r2, r3
 800379a:	2122      	movs	r1, #34	; 0x22
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff fd52 	bl	8003246 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80037a2:	210e      	movs	r1, #14
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f7ff fd2f 	bl	8003208 <SX1278_SPIRead>
 80037aa:	4603      	mov	r3, r0
 80037ac:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	461a      	mov	r2, r3
 80037b2:	210d      	movs	r1, #13
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f7ff fd46 	bl	8003246 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80037ba:	2122      	movs	r1, #34	; 0x22
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f7ff fd23 	bl	8003208 <SX1278_SPIRead>
 80037c2:	4603      	mov	r3, r0
 80037c4:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80037c6:	7dba      	ldrb	r2, [r7, #22]
 80037c8:	7afb      	ldrb	r3, [r7, #11]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d104      	bne.n	80037d8 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2202      	movs	r2, #2
 80037d2:	759a      	strb	r2, [r3, #22]
			return 1;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e00e      	b.n	80037f6 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3b01      	subs	r3, #1
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1ea      	bne.n	80037ba <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f8e4 	bl	80039b6 <SX1278_hw_Reset>
			SX1278_config(module);
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f7ff fdc6 	bl	8003380 <SX1278_config>
			return 0;
 80037f4:	2300      	movs	r3, #0
		}
	}
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	4613      	mov	r3, r2
 800380c:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	2100      	movs	r1, #0
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f7ff fd78 	bl	800330a <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 800381a:	228b      	movs	r2, #139	; 0x8b
 800381c:	2101      	movs	r1, #1
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f7ff fd11 	bl	8003246 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f000 f939 	bl	8003aa0 <SX1278_hw_GetDIO0>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00b      	beq.n	800384c <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8003834:	2112      	movs	r1, #18
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f7ff fce6 	bl	8003208 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f7ff fed0 	bl	80035e2 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f7ff fea0 	bl	8003588 <SX1278_standby>
			return 1;
 8003848:	2301      	movs	r3, #1
 800384a:	e013      	b.n	8003874 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	3b01      	subs	r3, #1
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f000 f8aa 	bl	80039b6 <SX1278_hw_Reset>
			SX1278_config(module);
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff fd8c 	bl	8003380 <SX1278_config>
			return 0;
 8003868:	2300      	movs	r3, #0
 800386a:	e003      	b.n	8003874 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 800386c:	2001      	movs	r0, #1
 800386e:	f000 f90c 	bl	8003a8a <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8003872:	e7d7      	b.n	8003824 <SX1278_LoRaTxPacket+0x26>
	}
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f000 f866 	bl	800395e <SX1278_hw_init>
	module->frequency = frequency;
 8003892:	68f9      	ldr	r1, [r7, #12]
 8003894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003898:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	7e3a      	ldrb	r2, [r7, #24]
 80038a0:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	7f3a      	ldrb	r2, [r7, #28]
 80038a6:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80038ae:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80038b6:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80038be:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80038c6:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7ff fd59 	bl	8003380 <SX1278_config>
}
 80038ce:	bf00      	nop
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <SX1278_transmit>:

int SX1278_transmit(SX1278_t *module, uint8_t *txBuf, uint8_t length,
		uint32_t timeout) {
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	4613      	mov	r3, r2
 80038e4:	71fb      	strb	r3, [r7, #7]
	if (SX1278_LoRaEntryTx(module, length, timeout)) {
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	4619      	mov	r1, r3
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7ff ff2e 	bl	800374e <SX1278_LoRaEntryTx>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d007      	beq.n	8003908 <SX1278_transmit+0x32>
		return SX1278_LoRaTxPacket(module, txBuf, length, timeout);
 80038f8:	79fa      	ldrb	r2, [r7, #7]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f7ff ff7d 	bl	80037fe <SX1278_LoRaTxPacket>
 8003904:	4603      	mov	r3, r0
 8003906:	e000      	b.n	800390a <SX1278_transmit+0x34>
	}
	return 0;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	4613      	mov	r3, r2
 800391e:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8003926:	79fa      	ldrb	r2, [r7, #7]
 8003928:	429a      	cmp	r2, r3
 800392a:	d003      	beq.n	8003934 <SX1278_read+0x22>
		length = module->readBytes;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8003932:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3317      	adds	r3, #23
 8003938:	79fa      	ldrb	r2, [r7, #7]
 800393a:	4619      	mov	r1, r3
 800393c:	68b8      	ldr	r0, [r7, #8]
 800393e:	f000 f987 	bl	8003c50 <memcpy>
	rxBuf[length] = '\0';
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	4413      	add	r3, r2
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 8003954:	79fb      	ldrb	r3, [r7, #7]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <SX1278_hw_init>:
//#include "gpio.h"
//#include "spi.h"

#include "main.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8003966:	2101      	movs	r1, #1
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f80d 	bl	8003988 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6858      	ldr	r0, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	b29b      	uxth	r3, r3
 8003978:	2201      	movs	r2, #1
 800397a:	4619      	mov	r1, r3
 800397c:	f7fd fd17 	bl	80013ae <HAL_GPIO_WritePin>
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6958      	ldr	r0, [r3, #20]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	b299      	uxth	r1, r3
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	bf0c      	ite	eq
 80039a2:	2301      	moveq	r3, #1
 80039a4:	2300      	movne	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	f7fd fd00 	bl	80013ae <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80039be:	2101      	movs	r1, #1
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff ffe1 	bl	8003988 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6858      	ldr	r0, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2200      	movs	r2, #0
 80039d2:	4619      	mov	r1, r3
 80039d4:	f7fd fceb 	bl	80013ae <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80039d8:	2001      	movs	r0, #1
 80039da:	f000 f856 	bl	8003a8a <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6858      	ldr	r0, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2201      	movs	r2, #1
 80039ea:	4619      	mov	r1, r3
 80039ec:	f7fd fcdf 	bl	80013ae <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 80039f0:	2064      	movs	r0, #100	; 0x64
 80039f2:	f000 f84a 	bl	8003a8a <SX1278_hw_DelayMs>
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff ffbb 	bl	8003988 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6998      	ldr	r0, [r3, #24]
 8003a16:	1cf9      	adds	r1, r7, #3
 8003a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f7fe f97d 	bl	8001d1c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8003a22:	bf00      	nop
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fe fc55 	bl	80022d8 <HAL_SPI_GetState>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d1f7      	bne.n	8003a24 <SX1278_hw_SPICommand+0x26>
		;
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b086      	sub	sp, #24
 8003a42:	af02      	add	r7, sp, #8
 8003a44:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8003a46:	2300      	movs	r3, #0
 8003a48:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8003a4e:	2100      	movs	r1, #0
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff ff99 	bl	8003988 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6998      	ldr	r0, [r3, #24]
 8003a5a:	f107 020e 	add.w	r2, r7, #14
 8003a5e:	f107 010f 	add.w	r1, r7, #15
 8003a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f7fe fa93 	bl	8001f94 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8003a6e:	bf00      	nop
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe fc2f 	bl	80022d8 <HAL_SPI_GetState>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d1f7      	bne.n	8003a70 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8003a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd f9e8 	bl	8000e68 <HAL_Delay>
}
 8003a98:	bf00      	nop
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f7fd fc63 	bl	8001380 <HAL_GPIO_ReadPin>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <RING_BUFFER_Init>:
#include "ring_buffer.h"

void RING_BUFFER_Init(RING_BUFFER_HandleTypeDef *p_ring_buffer, PACKET_STRUCTURE *p_buffer, uint16_t p_max_length){
 8003ace:	b480      	push	{r7}
 8003ad0:	b085      	sub	sp, #20
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	80fb      	strh	r3, [r7, #6]
	p_ring_buffer->buffer = p_buffer;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	601a      	str	r2, [r3, #0]
	p_ring_buffer->head = 0;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	809a      	strh	r2, [r3, #4]
	p_ring_buffer->tail = 0;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	80da      	strh	r2, [r3, #6]
	p_ring_buffer->max_length = p_max_length;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	88fa      	ldrh	r2, [r7, #6]
 8003af2:	811a      	strh	r2, [r3, #8]
}
 8003af4:	bf00      	nop
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr

08003afe <RING_BUFFER_Push>:

int8_t RING_BUFFER_Push(RING_BUFFER_HandleTypeDef *p_ring_buffer, PACKET_STRUCTURE p_data){
 8003afe:	b084      	sub	sp, #16
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	f107 001c 	add.w	r0, r7, #28
 8003b0c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint16_t t_next;

	t_next = p_ring_buffer->head + 1;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	889b      	ldrh	r3, [r3, #4]
 8003b14:	3301      	adds	r3, #1
 8003b16:	81fb      	strh	r3, [r7, #14]
	if(t_next >= p_ring_buffer->max_length)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	891b      	ldrh	r3, [r3, #8]
 8003b1c:	89fa      	ldrh	r2, [r7, #14]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d301      	bcc.n	8003b26 <RING_BUFFER_Push+0x28>
		t_next = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	81fb      	strh	r3, [r7, #14]

	if(t_next == p_ring_buffer->tail)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	88db      	ldrh	r3, [r3, #6]
 8003b2a:	89fa      	ldrh	r2, [r7, #14]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d102      	bne.n	8003b36 <RING_BUFFER_Push+0x38>
		return -1;
 8003b30:	f04f 33ff 	mov.w	r3, #4294967295
 8003b34:	e015      	b.n	8003b62 <RING_BUFFER_Push+0x64>

	p_ring_buffer->buffer[p_ring_buffer->head] = p_data;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	889b      	ldrh	r3, [r3, #4]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	4413      	add	r3, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f107 031c 	add.w	r3, r7, #28
 8003b50:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8003b54:	4619      	mov	r1, r3
 8003b56:	f000 f87b 	bl	8003c50 <memcpy>

	p_ring_buffer->head = t_next;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	89fa      	ldrh	r2, [r7, #14]
 8003b5e:	809a      	strh	r2, [r3, #4]

	return 0;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b6c:	b004      	add	sp, #16
 8003b6e:	4770      	bx	lr

08003b70 <RING_BUFFER_Pop>:

int8_t RING_BUFFER_Pop(RING_BUFFER_HandleTypeDef *p_ring_buffer, PACKET_STRUCTURE *p_data){
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
	uint16_t t_next;

	if(p_ring_buffer->tail == p_ring_buffer->head)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	88da      	ldrh	r2, [r3, #6]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	889b      	ldrh	r3, [r3, #4]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d102      	bne.n	8003b8c <RING_BUFFER_Pop+0x1c>
		return -1;
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8a:	e020      	b.n	8003bce <RING_BUFFER_Pop+0x5e>

	t_next = p_ring_buffer->tail + 1;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	88db      	ldrh	r3, [r3, #6]
 8003b90:	3301      	adds	r3, #1
 8003b92:	81fb      	strh	r3, [r7, #14]
	if(t_next >= p_ring_buffer->max_length)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	891b      	ldrh	r3, [r3, #8]
 8003b98:	89fa      	ldrh	r2, [r7, #14]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d301      	bcc.n	8003ba2 <RING_BUFFER_Pop+0x32>
		t_next = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	81fb      	strh	r3, [r7, #14]

	*p_data = p_ring_buffer->buffer[p_ring_buffer->tail];
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	88db      	ldrh	r3, [r3, #6]
 8003baa:	4619      	mov	r1, r3
 8003bac:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4619      	mov	r1, r3
 8003bbc:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	f000 f845 	bl	8003c50 <memcpy>
	p_ring_buffer->tail = t_next;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	89fa      	ldrh	r2, [r7, #14]
 8003bca:	80da      	strh	r2, [r3, #6]

	return 0;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <RING_BUFFER_Available>:

uint16_t RING_BUFFER_Available(RING_BUFFER_HandleTypeDef *p_ring_buffer){
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
//	} else if(p_ring_buffer->head < p_ring_buffer->tail){
//		return p_ring_buffer->max_length - (p_ring_buffer->head - p_ring_buffer->tail);
//	} else if(p_ring_buffer->head == p_ring_buffer->tail){
//		return 0;
//	}
	return (p_ring_buffer->head == p_ring_buffer->tail) ? 0 : 1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	889a      	ldrh	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	88db      	ldrh	r3, [r3, #6]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	bf14      	ite	ne
 8003bea:	2301      	movne	r3, #1
 8003bec:	2300      	moveq	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	b29b      	uxth	r3, r3
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr

08003bfc <__errno>:
 8003bfc:	4b01      	ldr	r3, [pc, #4]	; (8003c04 <__errno+0x8>)
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	2000000c 	.word	0x2000000c

08003c08 <__libc_init_array>:
 8003c08:	b570      	push	{r4, r5, r6, lr}
 8003c0a:	2600      	movs	r6, #0
 8003c0c:	4d0c      	ldr	r5, [pc, #48]	; (8003c40 <__libc_init_array+0x38>)
 8003c0e:	4c0d      	ldr	r4, [pc, #52]	; (8003c44 <__libc_init_array+0x3c>)
 8003c10:	1b64      	subs	r4, r4, r5
 8003c12:	10a4      	asrs	r4, r4, #2
 8003c14:	42a6      	cmp	r6, r4
 8003c16:	d109      	bne.n	8003c2c <__libc_init_array+0x24>
 8003c18:	f000 fcac 	bl	8004574 <_init>
 8003c1c:	2600      	movs	r6, #0
 8003c1e:	4d0a      	ldr	r5, [pc, #40]	; (8003c48 <__libc_init_array+0x40>)
 8003c20:	4c0a      	ldr	r4, [pc, #40]	; (8003c4c <__libc_init_array+0x44>)
 8003c22:	1b64      	subs	r4, r4, r5
 8003c24:	10a4      	asrs	r4, r4, #2
 8003c26:	42a6      	cmp	r6, r4
 8003c28:	d105      	bne.n	8003c36 <__libc_init_array+0x2e>
 8003c2a:	bd70      	pop	{r4, r5, r6, pc}
 8003c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c30:	4798      	blx	r3
 8003c32:	3601      	adds	r6, #1
 8003c34:	e7ee      	b.n	8003c14 <__libc_init_array+0xc>
 8003c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c3a:	4798      	blx	r3
 8003c3c:	3601      	adds	r6, #1
 8003c3e:	e7f2      	b.n	8003c26 <__libc_init_array+0x1e>
 8003c40:	08004704 	.word	0x08004704
 8003c44:	08004704 	.word	0x08004704
 8003c48:	08004704 	.word	0x08004704
 8003c4c:	08004708 	.word	0x08004708

08003c50 <memcpy>:
 8003c50:	440a      	add	r2, r1
 8003c52:	4291      	cmp	r1, r2
 8003c54:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c58:	d100      	bne.n	8003c5c <memcpy+0xc>
 8003c5a:	4770      	bx	lr
 8003c5c:	b510      	push	{r4, lr}
 8003c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c62:	4291      	cmp	r1, r2
 8003c64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c68:	d1f9      	bne.n	8003c5e <memcpy+0xe>
 8003c6a:	bd10      	pop	{r4, pc}

08003c6c <memset>:
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	4402      	add	r2, r0
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d100      	bne.n	8003c76 <memset+0xa>
 8003c74:	4770      	bx	lr
 8003c76:	f803 1b01 	strb.w	r1, [r3], #1
 8003c7a:	e7f9      	b.n	8003c70 <memset+0x4>

08003c7c <siprintf>:
 8003c7c:	b40e      	push	{r1, r2, r3}
 8003c7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c82:	b500      	push	{lr}
 8003c84:	b09c      	sub	sp, #112	; 0x70
 8003c86:	ab1d      	add	r3, sp, #116	; 0x74
 8003c88:	9002      	str	r0, [sp, #8]
 8003c8a:	9006      	str	r0, [sp, #24]
 8003c8c:	9107      	str	r1, [sp, #28]
 8003c8e:	9104      	str	r1, [sp, #16]
 8003c90:	4808      	ldr	r0, [pc, #32]	; (8003cb4 <siprintf+0x38>)
 8003c92:	4909      	ldr	r1, [pc, #36]	; (8003cb8 <siprintf+0x3c>)
 8003c94:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c98:	9105      	str	r1, [sp, #20]
 8003c9a:	6800      	ldr	r0, [r0, #0]
 8003c9c:	a902      	add	r1, sp, #8
 8003c9e:	9301      	str	r3, [sp, #4]
 8003ca0:	f000 f954 	bl	8003f4c <_svfiprintf_r>
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	9b02      	ldr	r3, [sp, #8]
 8003ca8:	701a      	strb	r2, [r3, #0]
 8003caa:	b01c      	add	sp, #112	; 0x70
 8003cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cb0:	b003      	add	sp, #12
 8003cb2:	4770      	bx	lr
 8003cb4:	2000000c 	.word	0x2000000c
 8003cb8:	ffff0208 	.word	0xffff0208

08003cbc <strcat>:
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	b510      	push	{r4, lr}
 8003cc0:	7814      	ldrb	r4, [r2, #0]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	3201      	adds	r2, #1
 8003cc6:	2c00      	cmp	r4, #0
 8003cc8:	d1fa      	bne.n	8003cc0 <strcat+0x4>
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cd0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cd4:	2a00      	cmp	r2, #0
 8003cd6:	d1f9      	bne.n	8003ccc <strcat+0x10>
 8003cd8:	bd10      	pop	{r4, pc}
	...

08003cdc <_free_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	4605      	mov	r5, r0
 8003ce0:	2900      	cmp	r1, #0
 8003ce2:	d040      	beq.n	8003d66 <_free_r+0x8a>
 8003ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ce8:	1f0c      	subs	r4, r1, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bfb8      	it	lt
 8003cee:	18e4      	addlt	r4, r4, r3
 8003cf0:	f000 fbfc 	bl	80044ec <__malloc_lock>
 8003cf4:	4a1c      	ldr	r2, [pc, #112]	; (8003d68 <_free_r+0x8c>)
 8003cf6:	6813      	ldr	r3, [r2, #0]
 8003cf8:	b933      	cbnz	r3, 8003d08 <_free_r+0x2c>
 8003cfa:	6063      	str	r3, [r4, #4]
 8003cfc:	6014      	str	r4, [r2, #0]
 8003cfe:	4628      	mov	r0, r5
 8003d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d04:	f000 bbf8 	b.w	80044f8 <__malloc_unlock>
 8003d08:	42a3      	cmp	r3, r4
 8003d0a:	d908      	bls.n	8003d1e <_free_r+0x42>
 8003d0c:	6820      	ldr	r0, [r4, #0]
 8003d0e:	1821      	adds	r1, r4, r0
 8003d10:	428b      	cmp	r3, r1
 8003d12:	bf01      	itttt	eq
 8003d14:	6819      	ldreq	r1, [r3, #0]
 8003d16:	685b      	ldreq	r3, [r3, #4]
 8003d18:	1809      	addeq	r1, r1, r0
 8003d1a:	6021      	streq	r1, [r4, #0]
 8003d1c:	e7ed      	b.n	8003cfa <_free_r+0x1e>
 8003d1e:	461a      	mov	r2, r3
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	b10b      	cbz	r3, 8003d28 <_free_r+0x4c>
 8003d24:	42a3      	cmp	r3, r4
 8003d26:	d9fa      	bls.n	8003d1e <_free_r+0x42>
 8003d28:	6811      	ldr	r1, [r2, #0]
 8003d2a:	1850      	adds	r0, r2, r1
 8003d2c:	42a0      	cmp	r0, r4
 8003d2e:	d10b      	bne.n	8003d48 <_free_r+0x6c>
 8003d30:	6820      	ldr	r0, [r4, #0]
 8003d32:	4401      	add	r1, r0
 8003d34:	1850      	adds	r0, r2, r1
 8003d36:	4283      	cmp	r3, r0
 8003d38:	6011      	str	r1, [r2, #0]
 8003d3a:	d1e0      	bne.n	8003cfe <_free_r+0x22>
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4401      	add	r1, r0
 8003d42:	6011      	str	r1, [r2, #0]
 8003d44:	6053      	str	r3, [r2, #4]
 8003d46:	e7da      	b.n	8003cfe <_free_r+0x22>
 8003d48:	d902      	bls.n	8003d50 <_free_r+0x74>
 8003d4a:	230c      	movs	r3, #12
 8003d4c:	602b      	str	r3, [r5, #0]
 8003d4e:	e7d6      	b.n	8003cfe <_free_r+0x22>
 8003d50:	6820      	ldr	r0, [r4, #0]
 8003d52:	1821      	adds	r1, r4, r0
 8003d54:	428b      	cmp	r3, r1
 8003d56:	bf01      	itttt	eq
 8003d58:	6819      	ldreq	r1, [r3, #0]
 8003d5a:	685b      	ldreq	r3, [r3, #4]
 8003d5c:	1809      	addeq	r1, r1, r0
 8003d5e:	6021      	streq	r1, [r4, #0]
 8003d60:	6063      	str	r3, [r4, #4]
 8003d62:	6054      	str	r4, [r2, #4]
 8003d64:	e7cb      	b.n	8003cfe <_free_r+0x22>
 8003d66:	bd38      	pop	{r3, r4, r5, pc}
 8003d68:	20001ea4 	.word	0x20001ea4

08003d6c <sbrk_aligned>:
 8003d6c:	b570      	push	{r4, r5, r6, lr}
 8003d6e:	4e0e      	ldr	r6, [pc, #56]	; (8003da8 <sbrk_aligned+0x3c>)
 8003d70:	460c      	mov	r4, r1
 8003d72:	6831      	ldr	r1, [r6, #0]
 8003d74:	4605      	mov	r5, r0
 8003d76:	b911      	cbnz	r1, 8003d7e <sbrk_aligned+0x12>
 8003d78:	f000 fb7e 	bl	8004478 <_sbrk_r>
 8003d7c:	6030      	str	r0, [r6, #0]
 8003d7e:	4621      	mov	r1, r4
 8003d80:	4628      	mov	r0, r5
 8003d82:	f000 fb79 	bl	8004478 <_sbrk_r>
 8003d86:	1c43      	adds	r3, r0, #1
 8003d88:	d00a      	beq.n	8003da0 <sbrk_aligned+0x34>
 8003d8a:	1cc4      	adds	r4, r0, #3
 8003d8c:	f024 0403 	bic.w	r4, r4, #3
 8003d90:	42a0      	cmp	r0, r4
 8003d92:	d007      	beq.n	8003da4 <sbrk_aligned+0x38>
 8003d94:	1a21      	subs	r1, r4, r0
 8003d96:	4628      	mov	r0, r5
 8003d98:	f000 fb6e 	bl	8004478 <_sbrk_r>
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d101      	bne.n	8003da4 <sbrk_aligned+0x38>
 8003da0:	f04f 34ff 	mov.w	r4, #4294967295
 8003da4:	4620      	mov	r0, r4
 8003da6:	bd70      	pop	{r4, r5, r6, pc}
 8003da8:	20001ea8 	.word	0x20001ea8

08003dac <_malloc_r>:
 8003dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003db0:	1ccd      	adds	r5, r1, #3
 8003db2:	f025 0503 	bic.w	r5, r5, #3
 8003db6:	3508      	adds	r5, #8
 8003db8:	2d0c      	cmp	r5, #12
 8003dba:	bf38      	it	cc
 8003dbc:	250c      	movcc	r5, #12
 8003dbe:	2d00      	cmp	r5, #0
 8003dc0:	4607      	mov	r7, r0
 8003dc2:	db01      	blt.n	8003dc8 <_malloc_r+0x1c>
 8003dc4:	42a9      	cmp	r1, r5
 8003dc6:	d905      	bls.n	8003dd4 <_malloc_r+0x28>
 8003dc8:	230c      	movs	r3, #12
 8003dca:	2600      	movs	r6, #0
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	4630      	mov	r0, r6
 8003dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dd4:	4e2e      	ldr	r6, [pc, #184]	; (8003e90 <_malloc_r+0xe4>)
 8003dd6:	f000 fb89 	bl	80044ec <__malloc_lock>
 8003dda:	6833      	ldr	r3, [r6, #0]
 8003ddc:	461c      	mov	r4, r3
 8003dde:	bb34      	cbnz	r4, 8003e2e <_malloc_r+0x82>
 8003de0:	4629      	mov	r1, r5
 8003de2:	4638      	mov	r0, r7
 8003de4:	f7ff ffc2 	bl	8003d6c <sbrk_aligned>
 8003de8:	1c43      	adds	r3, r0, #1
 8003dea:	4604      	mov	r4, r0
 8003dec:	d14d      	bne.n	8003e8a <_malloc_r+0xde>
 8003dee:	6834      	ldr	r4, [r6, #0]
 8003df0:	4626      	mov	r6, r4
 8003df2:	2e00      	cmp	r6, #0
 8003df4:	d140      	bne.n	8003e78 <_malloc_r+0xcc>
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	4631      	mov	r1, r6
 8003dfa:	4638      	mov	r0, r7
 8003dfc:	eb04 0803 	add.w	r8, r4, r3
 8003e00:	f000 fb3a 	bl	8004478 <_sbrk_r>
 8003e04:	4580      	cmp	r8, r0
 8003e06:	d13a      	bne.n	8003e7e <_malloc_r+0xd2>
 8003e08:	6821      	ldr	r1, [r4, #0]
 8003e0a:	3503      	adds	r5, #3
 8003e0c:	1a6d      	subs	r5, r5, r1
 8003e0e:	f025 0503 	bic.w	r5, r5, #3
 8003e12:	3508      	adds	r5, #8
 8003e14:	2d0c      	cmp	r5, #12
 8003e16:	bf38      	it	cc
 8003e18:	250c      	movcc	r5, #12
 8003e1a:	4638      	mov	r0, r7
 8003e1c:	4629      	mov	r1, r5
 8003e1e:	f7ff ffa5 	bl	8003d6c <sbrk_aligned>
 8003e22:	3001      	adds	r0, #1
 8003e24:	d02b      	beq.n	8003e7e <_malloc_r+0xd2>
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	442b      	add	r3, r5
 8003e2a:	6023      	str	r3, [r4, #0]
 8003e2c:	e00e      	b.n	8003e4c <_malloc_r+0xa0>
 8003e2e:	6822      	ldr	r2, [r4, #0]
 8003e30:	1b52      	subs	r2, r2, r5
 8003e32:	d41e      	bmi.n	8003e72 <_malloc_r+0xc6>
 8003e34:	2a0b      	cmp	r2, #11
 8003e36:	d916      	bls.n	8003e66 <_malloc_r+0xba>
 8003e38:	1961      	adds	r1, r4, r5
 8003e3a:	42a3      	cmp	r3, r4
 8003e3c:	6025      	str	r5, [r4, #0]
 8003e3e:	bf18      	it	ne
 8003e40:	6059      	strne	r1, [r3, #4]
 8003e42:	6863      	ldr	r3, [r4, #4]
 8003e44:	bf08      	it	eq
 8003e46:	6031      	streq	r1, [r6, #0]
 8003e48:	5162      	str	r2, [r4, r5]
 8003e4a:	604b      	str	r3, [r1, #4]
 8003e4c:	4638      	mov	r0, r7
 8003e4e:	f104 060b 	add.w	r6, r4, #11
 8003e52:	f000 fb51 	bl	80044f8 <__malloc_unlock>
 8003e56:	f026 0607 	bic.w	r6, r6, #7
 8003e5a:	1d23      	adds	r3, r4, #4
 8003e5c:	1af2      	subs	r2, r6, r3
 8003e5e:	d0b6      	beq.n	8003dce <_malloc_r+0x22>
 8003e60:	1b9b      	subs	r3, r3, r6
 8003e62:	50a3      	str	r3, [r4, r2]
 8003e64:	e7b3      	b.n	8003dce <_malloc_r+0x22>
 8003e66:	6862      	ldr	r2, [r4, #4]
 8003e68:	42a3      	cmp	r3, r4
 8003e6a:	bf0c      	ite	eq
 8003e6c:	6032      	streq	r2, [r6, #0]
 8003e6e:	605a      	strne	r2, [r3, #4]
 8003e70:	e7ec      	b.n	8003e4c <_malloc_r+0xa0>
 8003e72:	4623      	mov	r3, r4
 8003e74:	6864      	ldr	r4, [r4, #4]
 8003e76:	e7b2      	b.n	8003dde <_malloc_r+0x32>
 8003e78:	4634      	mov	r4, r6
 8003e7a:	6876      	ldr	r6, [r6, #4]
 8003e7c:	e7b9      	b.n	8003df2 <_malloc_r+0x46>
 8003e7e:	230c      	movs	r3, #12
 8003e80:	4638      	mov	r0, r7
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	f000 fb38 	bl	80044f8 <__malloc_unlock>
 8003e88:	e7a1      	b.n	8003dce <_malloc_r+0x22>
 8003e8a:	6025      	str	r5, [r4, #0]
 8003e8c:	e7de      	b.n	8003e4c <_malloc_r+0xa0>
 8003e8e:	bf00      	nop
 8003e90:	20001ea4 	.word	0x20001ea4

08003e94 <__ssputs_r>:
 8003e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e98:	688e      	ldr	r6, [r1, #8]
 8003e9a:	4682      	mov	sl, r0
 8003e9c:	429e      	cmp	r6, r3
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	4690      	mov	r8, r2
 8003ea2:	461f      	mov	r7, r3
 8003ea4:	d838      	bhi.n	8003f18 <__ssputs_r+0x84>
 8003ea6:	898a      	ldrh	r2, [r1, #12]
 8003ea8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003eac:	d032      	beq.n	8003f14 <__ssputs_r+0x80>
 8003eae:	6825      	ldr	r5, [r4, #0]
 8003eb0:	6909      	ldr	r1, [r1, #16]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	eba5 0901 	sub.w	r9, r5, r1
 8003eb8:	6965      	ldr	r5, [r4, #20]
 8003eba:	444b      	add	r3, r9
 8003ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ec0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ec4:	106d      	asrs	r5, r5, #1
 8003ec6:	429d      	cmp	r5, r3
 8003ec8:	bf38      	it	cc
 8003eca:	461d      	movcc	r5, r3
 8003ecc:	0553      	lsls	r3, r2, #21
 8003ece:	d531      	bpl.n	8003f34 <__ssputs_r+0xa0>
 8003ed0:	4629      	mov	r1, r5
 8003ed2:	f7ff ff6b 	bl	8003dac <_malloc_r>
 8003ed6:	4606      	mov	r6, r0
 8003ed8:	b950      	cbnz	r0, 8003ef0 <__ssputs_r+0x5c>
 8003eda:	230c      	movs	r3, #12
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee0:	f8ca 3000 	str.w	r3, [sl]
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eea:	81a3      	strh	r3, [r4, #12]
 8003eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef0:	464a      	mov	r2, r9
 8003ef2:	6921      	ldr	r1, [r4, #16]
 8003ef4:	f7ff feac 	bl	8003c50 <memcpy>
 8003ef8:	89a3      	ldrh	r3, [r4, #12]
 8003efa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f02:	81a3      	strh	r3, [r4, #12]
 8003f04:	6126      	str	r6, [r4, #16]
 8003f06:	444e      	add	r6, r9
 8003f08:	6026      	str	r6, [r4, #0]
 8003f0a:	463e      	mov	r6, r7
 8003f0c:	6165      	str	r5, [r4, #20]
 8003f0e:	eba5 0509 	sub.w	r5, r5, r9
 8003f12:	60a5      	str	r5, [r4, #8]
 8003f14:	42be      	cmp	r6, r7
 8003f16:	d900      	bls.n	8003f1a <__ssputs_r+0x86>
 8003f18:	463e      	mov	r6, r7
 8003f1a:	4632      	mov	r2, r6
 8003f1c:	4641      	mov	r1, r8
 8003f1e:	6820      	ldr	r0, [r4, #0]
 8003f20:	f000 faca 	bl	80044b8 <memmove>
 8003f24:	68a3      	ldr	r3, [r4, #8]
 8003f26:	2000      	movs	r0, #0
 8003f28:	1b9b      	subs	r3, r3, r6
 8003f2a:	60a3      	str	r3, [r4, #8]
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	4433      	add	r3, r6
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	e7db      	b.n	8003eec <__ssputs_r+0x58>
 8003f34:	462a      	mov	r2, r5
 8003f36:	f000 fae5 	bl	8004504 <_realloc_r>
 8003f3a:	4606      	mov	r6, r0
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d1e1      	bne.n	8003f04 <__ssputs_r+0x70>
 8003f40:	4650      	mov	r0, sl
 8003f42:	6921      	ldr	r1, [r4, #16]
 8003f44:	f7ff feca 	bl	8003cdc <_free_r>
 8003f48:	e7c7      	b.n	8003eda <__ssputs_r+0x46>
	...

08003f4c <_svfiprintf_r>:
 8003f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f50:	4698      	mov	r8, r3
 8003f52:	898b      	ldrh	r3, [r1, #12]
 8003f54:	4607      	mov	r7, r0
 8003f56:	061b      	lsls	r3, r3, #24
 8003f58:	460d      	mov	r5, r1
 8003f5a:	4614      	mov	r4, r2
 8003f5c:	b09d      	sub	sp, #116	; 0x74
 8003f5e:	d50e      	bpl.n	8003f7e <_svfiprintf_r+0x32>
 8003f60:	690b      	ldr	r3, [r1, #16]
 8003f62:	b963      	cbnz	r3, 8003f7e <_svfiprintf_r+0x32>
 8003f64:	2140      	movs	r1, #64	; 0x40
 8003f66:	f7ff ff21 	bl	8003dac <_malloc_r>
 8003f6a:	6028      	str	r0, [r5, #0]
 8003f6c:	6128      	str	r0, [r5, #16]
 8003f6e:	b920      	cbnz	r0, 8003f7a <_svfiprintf_r+0x2e>
 8003f70:	230c      	movs	r3, #12
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	f04f 30ff 	mov.w	r0, #4294967295
 8003f78:	e0d1      	b.n	800411e <_svfiprintf_r+0x1d2>
 8003f7a:	2340      	movs	r3, #64	; 0x40
 8003f7c:	616b      	str	r3, [r5, #20]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	9309      	str	r3, [sp, #36]	; 0x24
 8003f82:	2320      	movs	r3, #32
 8003f84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f88:	2330      	movs	r3, #48	; 0x30
 8003f8a:	f04f 0901 	mov.w	r9, #1
 8003f8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004138 <_svfiprintf_r+0x1ec>
 8003f96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f9a:	4623      	mov	r3, r4
 8003f9c:	469a      	mov	sl, r3
 8003f9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fa2:	b10a      	cbz	r2, 8003fa8 <_svfiprintf_r+0x5c>
 8003fa4:	2a25      	cmp	r2, #37	; 0x25
 8003fa6:	d1f9      	bne.n	8003f9c <_svfiprintf_r+0x50>
 8003fa8:	ebba 0b04 	subs.w	fp, sl, r4
 8003fac:	d00b      	beq.n	8003fc6 <_svfiprintf_r+0x7a>
 8003fae:	465b      	mov	r3, fp
 8003fb0:	4622      	mov	r2, r4
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	4638      	mov	r0, r7
 8003fb6:	f7ff ff6d 	bl	8003e94 <__ssputs_r>
 8003fba:	3001      	adds	r0, #1
 8003fbc:	f000 80aa 	beq.w	8004114 <_svfiprintf_r+0x1c8>
 8003fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fc2:	445a      	add	r2, fp
 8003fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8003fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80a2 	beq.w	8004114 <_svfiprintf_r+0x1c8>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fda:	f10a 0a01 	add.w	sl, sl, #1
 8003fde:	9304      	str	r3, [sp, #16]
 8003fe0:	9307      	str	r3, [sp, #28]
 8003fe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fe6:	931a      	str	r3, [sp, #104]	; 0x68
 8003fe8:	4654      	mov	r4, sl
 8003fea:	2205      	movs	r2, #5
 8003fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ff0:	4851      	ldr	r0, [pc, #324]	; (8004138 <_svfiprintf_r+0x1ec>)
 8003ff2:	f000 fa53 	bl	800449c <memchr>
 8003ff6:	9a04      	ldr	r2, [sp, #16]
 8003ff8:	b9d8      	cbnz	r0, 8004032 <_svfiprintf_r+0xe6>
 8003ffa:	06d0      	lsls	r0, r2, #27
 8003ffc:	bf44      	itt	mi
 8003ffe:	2320      	movmi	r3, #32
 8004000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004004:	0711      	lsls	r1, r2, #28
 8004006:	bf44      	itt	mi
 8004008:	232b      	movmi	r3, #43	; 0x2b
 800400a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800400e:	f89a 3000 	ldrb.w	r3, [sl]
 8004012:	2b2a      	cmp	r3, #42	; 0x2a
 8004014:	d015      	beq.n	8004042 <_svfiprintf_r+0xf6>
 8004016:	4654      	mov	r4, sl
 8004018:	2000      	movs	r0, #0
 800401a:	f04f 0c0a 	mov.w	ip, #10
 800401e:	9a07      	ldr	r2, [sp, #28]
 8004020:	4621      	mov	r1, r4
 8004022:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004026:	3b30      	subs	r3, #48	; 0x30
 8004028:	2b09      	cmp	r3, #9
 800402a:	d94e      	bls.n	80040ca <_svfiprintf_r+0x17e>
 800402c:	b1b0      	cbz	r0, 800405c <_svfiprintf_r+0x110>
 800402e:	9207      	str	r2, [sp, #28]
 8004030:	e014      	b.n	800405c <_svfiprintf_r+0x110>
 8004032:	eba0 0308 	sub.w	r3, r0, r8
 8004036:	fa09 f303 	lsl.w	r3, r9, r3
 800403a:	4313      	orrs	r3, r2
 800403c:	46a2      	mov	sl, r4
 800403e:	9304      	str	r3, [sp, #16]
 8004040:	e7d2      	b.n	8003fe8 <_svfiprintf_r+0x9c>
 8004042:	9b03      	ldr	r3, [sp, #12]
 8004044:	1d19      	adds	r1, r3, #4
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	9103      	str	r1, [sp, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	bfbb      	ittet	lt
 800404e:	425b      	neglt	r3, r3
 8004050:	f042 0202 	orrlt.w	r2, r2, #2
 8004054:	9307      	strge	r3, [sp, #28]
 8004056:	9307      	strlt	r3, [sp, #28]
 8004058:	bfb8      	it	lt
 800405a:	9204      	strlt	r2, [sp, #16]
 800405c:	7823      	ldrb	r3, [r4, #0]
 800405e:	2b2e      	cmp	r3, #46	; 0x2e
 8004060:	d10c      	bne.n	800407c <_svfiprintf_r+0x130>
 8004062:	7863      	ldrb	r3, [r4, #1]
 8004064:	2b2a      	cmp	r3, #42	; 0x2a
 8004066:	d135      	bne.n	80040d4 <_svfiprintf_r+0x188>
 8004068:	9b03      	ldr	r3, [sp, #12]
 800406a:	3402      	adds	r4, #2
 800406c:	1d1a      	adds	r2, r3, #4
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	9203      	str	r2, [sp, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	bfb8      	it	lt
 8004076:	f04f 33ff 	movlt.w	r3, #4294967295
 800407a:	9305      	str	r3, [sp, #20]
 800407c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800413c <_svfiprintf_r+0x1f0>
 8004080:	2203      	movs	r2, #3
 8004082:	4650      	mov	r0, sl
 8004084:	7821      	ldrb	r1, [r4, #0]
 8004086:	f000 fa09 	bl	800449c <memchr>
 800408a:	b140      	cbz	r0, 800409e <_svfiprintf_r+0x152>
 800408c:	2340      	movs	r3, #64	; 0x40
 800408e:	eba0 000a 	sub.w	r0, r0, sl
 8004092:	fa03 f000 	lsl.w	r0, r3, r0
 8004096:	9b04      	ldr	r3, [sp, #16]
 8004098:	3401      	adds	r4, #1
 800409a:	4303      	orrs	r3, r0
 800409c:	9304      	str	r3, [sp, #16]
 800409e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040a2:	2206      	movs	r2, #6
 80040a4:	4826      	ldr	r0, [pc, #152]	; (8004140 <_svfiprintf_r+0x1f4>)
 80040a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040aa:	f000 f9f7 	bl	800449c <memchr>
 80040ae:	2800      	cmp	r0, #0
 80040b0:	d038      	beq.n	8004124 <_svfiprintf_r+0x1d8>
 80040b2:	4b24      	ldr	r3, [pc, #144]	; (8004144 <_svfiprintf_r+0x1f8>)
 80040b4:	bb1b      	cbnz	r3, 80040fe <_svfiprintf_r+0x1b2>
 80040b6:	9b03      	ldr	r3, [sp, #12]
 80040b8:	3307      	adds	r3, #7
 80040ba:	f023 0307 	bic.w	r3, r3, #7
 80040be:	3308      	adds	r3, #8
 80040c0:	9303      	str	r3, [sp, #12]
 80040c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040c4:	4433      	add	r3, r6
 80040c6:	9309      	str	r3, [sp, #36]	; 0x24
 80040c8:	e767      	b.n	8003f9a <_svfiprintf_r+0x4e>
 80040ca:	460c      	mov	r4, r1
 80040cc:	2001      	movs	r0, #1
 80040ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80040d2:	e7a5      	b.n	8004020 <_svfiprintf_r+0xd4>
 80040d4:	2300      	movs	r3, #0
 80040d6:	f04f 0c0a 	mov.w	ip, #10
 80040da:	4619      	mov	r1, r3
 80040dc:	3401      	adds	r4, #1
 80040de:	9305      	str	r3, [sp, #20]
 80040e0:	4620      	mov	r0, r4
 80040e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040e6:	3a30      	subs	r2, #48	; 0x30
 80040e8:	2a09      	cmp	r2, #9
 80040ea:	d903      	bls.n	80040f4 <_svfiprintf_r+0x1a8>
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0c5      	beq.n	800407c <_svfiprintf_r+0x130>
 80040f0:	9105      	str	r1, [sp, #20]
 80040f2:	e7c3      	b.n	800407c <_svfiprintf_r+0x130>
 80040f4:	4604      	mov	r4, r0
 80040f6:	2301      	movs	r3, #1
 80040f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80040fc:	e7f0      	b.n	80040e0 <_svfiprintf_r+0x194>
 80040fe:	ab03      	add	r3, sp, #12
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	462a      	mov	r2, r5
 8004104:	4638      	mov	r0, r7
 8004106:	4b10      	ldr	r3, [pc, #64]	; (8004148 <_svfiprintf_r+0x1fc>)
 8004108:	a904      	add	r1, sp, #16
 800410a:	f3af 8000 	nop.w
 800410e:	1c42      	adds	r2, r0, #1
 8004110:	4606      	mov	r6, r0
 8004112:	d1d6      	bne.n	80040c2 <_svfiprintf_r+0x176>
 8004114:	89ab      	ldrh	r3, [r5, #12]
 8004116:	065b      	lsls	r3, r3, #25
 8004118:	f53f af2c 	bmi.w	8003f74 <_svfiprintf_r+0x28>
 800411c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800411e:	b01d      	add	sp, #116	; 0x74
 8004120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004124:	ab03      	add	r3, sp, #12
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	462a      	mov	r2, r5
 800412a:	4638      	mov	r0, r7
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <_svfiprintf_r+0x1fc>)
 800412e:	a904      	add	r1, sp, #16
 8004130:	f000 f87c 	bl	800422c <_printf_i>
 8004134:	e7eb      	b.n	800410e <_svfiprintf_r+0x1c2>
 8004136:	bf00      	nop
 8004138:	08004666 	.word	0x08004666
 800413c:	0800466c 	.word	0x0800466c
 8004140:	08004670 	.word	0x08004670
 8004144:	00000000 	.word	0x00000000
 8004148:	08003e95 	.word	0x08003e95

0800414c <_printf_common>:
 800414c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004150:	4616      	mov	r6, r2
 8004152:	4699      	mov	r9, r3
 8004154:	688a      	ldr	r2, [r1, #8]
 8004156:	690b      	ldr	r3, [r1, #16]
 8004158:	4607      	mov	r7, r0
 800415a:	4293      	cmp	r3, r2
 800415c:	bfb8      	it	lt
 800415e:	4613      	movlt	r3, r2
 8004160:	6033      	str	r3, [r6, #0]
 8004162:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004166:	460c      	mov	r4, r1
 8004168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800416c:	b10a      	cbz	r2, 8004172 <_printf_common+0x26>
 800416e:	3301      	adds	r3, #1
 8004170:	6033      	str	r3, [r6, #0]
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	0699      	lsls	r1, r3, #26
 8004176:	bf42      	ittt	mi
 8004178:	6833      	ldrmi	r3, [r6, #0]
 800417a:	3302      	addmi	r3, #2
 800417c:	6033      	strmi	r3, [r6, #0]
 800417e:	6825      	ldr	r5, [r4, #0]
 8004180:	f015 0506 	ands.w	r5, r5, #6
 8004184:	d106      	bne.n	8004194 <_printf_common+0x48>
 8004186:	f104 0a19 	add.w	sl, r4, #25
 800418a:	68e3      	ldr	r3, [r4, #12]
 800418c:	6832      	ldr	r2, [r6, #0]
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	42ab      	cmp	r3, r5
 8004192:	dc28      	bgt.n	80041e6 <_printf_common+0x9a>
 8004194:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004198:	1e13      	subs	r3, r2, #0
 800419a:	6822      	ldr	r2, [r4, #0]
 800419c:	bf18      	it	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	0692      	lsls	r2, r2, #26
 80041a2:	d42d      	bmi.n	8004200 <_printf_common+0xb4>
 80041a4:	4649      	mov	r1, r9
 80041a6:	4638      	mov	r0, r7
 80041a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041ac:	47c0      	blx	r8
 80041ae:	3001      	adds	r0, #1
 80041b0:	d020      	beq.n	80041f4 <_printf_common+0xa8>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	68e5      	ldr	r5, [r4, #12]
 80041b6:	f003 0306 	and.w	r3, r3, #6
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	bf18      	it	ne
 80041be:	2500      	movne	r5, #0
 80041c0:	6832      	ldr	r2, [r6, #0]
 80041c2:	f04f 0600 	mov.w	r6, #0
 80041c6:	68a3      	ldr	r3, [r4, #8]
 80041c8:	bf08      	it	eq
 80041ca:	1aad      	subeq	r5, r5, r2
 80041cc:	6922      	ldr	r2, [r4, #16]
 80041ce:	bf08      	it	eq
 80041d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041d4:	4293      	cmp	r3, r2
 80041d6:	bfc4      	itt	gt
 80041d8:	1a9b      	subgt	r3, r3, r2
 80041da:	18ed      	addgt	r5, r5, r3
 80041dc:	341a      	adds	r4, #26
 80041de:	42b5      	cmp	r5, r6
 80041e0:	d11a      	bne.n	8004218 <_printf_common+0xcc>
 80041e2:	2000      	movs	r0, #0
 80041e4:	e008      	b.n	80041f8 <_printf_common+0xac>
 80041e6:	2301      	movs	r3, #1
 80041e8:	4652      	mov	r2, sl
 80041ea:	4649      	mov	r1, r9
 80041ec:	4638      	mov	r0, r7
 80041ee:	47c0      	blx	r8
 80041f0:	3001      	adds	r0, #1
 80041f2:	d103      	bne.n	80041fc <_printf_common+0xb0>
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
 80041f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041fc:	3501      	adds	r5, #1
 80041fe:	e7c4      	b.n	800418a <_printf_common+0x3e>
 8004200:	2030      	movs	r0, #48	; 0x30
 8004202:	18e1      	adds	r1, r4, r3
 8004204:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800420e:	4422      	add	r2, r4
 8004210:	3302      	adds	r3, #2
 8004212:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004216:	e7c5      	b.n	80041a4 <_printf_common+0x58>
 8004218:	2301      	movs	r3, #1
 800421a:	4622      	mov	r2, r4
 800421c:	4649      	mov	r1, r9
 800421e:	4638      	mov	r0, r7
 8004220:	47c0      	blx	r8
 8004222:	3001      	adds	r0, #1
 8004224:	d0e6      	beq.n	80041f4 <_printf_common+0xa8>
 8004226:	3601      	adds	r6, #1
 8004228:	e7d9      	b.n	80041de <_printf_common+0x92>
	...

0800422c <_printf_i>:
 800422c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004230:	7e0f      	ldrb	r7, [r1, #24]
 8004232:	4691      	mov	r9, r2
 8004234:	2f78      	cmp	r7, #120	; 0x78
 8004236:	4680      	mov	r8, r0
 8004238:	460c      	mov	r4, r1
 800423a:	469a      	mov	sl, r3
 800423c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800423e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004242:	d807      	bhi.n	8004254 <_printf_i+0x28>
 8004244:	2f62      	cmp	r7, #98	; 0x62
 8004246:	d80a      	bhi.n	800425e <_printf_i+0x32>
 8004248:	2f00      	cmp	r7, #0
 800424a:	f000 80d9 	beq.w	8004400 <_printf_i+0x1d4>
 800424e:	2f58      	cmp	r7, #88	; 0x58
 8004250:	f000 80a4 	beq.w	800439c <_printf_i+0x170>
 8004254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800425c:	e03a      	b.n	80042d4 <_printf_i+0xa8>
 800425e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004262:	2b15      	cmp	r3, #21
 8004264:	d8f6      	bhi.n	8004254 <_printf_i+0x28>
 8004266:	a101      	add	r1, pc, #4	; (adr r1, 800426c <_printf_i+0x40>)
 8004268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800426c:	080042c5 	.word	0x080042c5
 8004270:	080042d9 	.word	0x080042d9
 8004274:	08004255 	.word	0x08004255
 8004278:	08004255 	.word	0x08004255
 800427c:	08004255 	.word	0x08004255
 8004280:	08004255 	.word	0x08004255
 8004284:	080042d9 	.word	0x080042d9
 8004288:	08004255 	.word	0x08004255
 800428c:	08004255 	.word	0x08004255
 8004290:	08004255 	.word	0x08004255
 8004294:	08004255 	.word	0x08004255
 8004298:	080043e7 	.word	0x080043e7
 800429c:	08004309 	.word	0x08004309
 80042a0:	080043c9 	.word	0x080043c9
 80042a4:	08004255 	.word	0x08004255
 80042a8:	08004255 	.word	0x08004255
 80042ac:	08004409 	.word	0x08004409
 80042b0:	08004255 	.word	0x08004255
 80042b4:	08004309 	.word	0x08004309
 80042b8:	08004255 	.word	0x08004255
 80042bc:	08004255 	.word	0x08004255
 80042c0:	080043d1 	.word	0x080043d1
 80042c4:	682b      	ldr	r3, [r5, #0]
 80042c6:	1d1a      	adds	r2, r3, #4
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	602a      	str	r2, [r5, #0]
 80042cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0a4      	b.n	8004422 <_printf_i+0x1f6>
 80042d8:	6820      	ldr	r0, [r4, #0]
 80042da:	6829      	ldr	r1, [r5, #0]
 80042dc:	0606      	lsls	r6, r0, #24
 80042de:	f101 0304 	add.w	r3, r1, #4
 80042e2:	d50a      	bpl.n	80042fa <_printf_i+0xce>
 80042e4:	680e      	ldr	r6, [r1, #0]
 80042e6:	602b      	str	r3, [r5, #0]
 80042e8:	2e00      	cmp	r6, #0
 80042ea:	da03      	bge.n	80042f4 <_printf_i+0xc8>
 80042ec:	232d      	movs	r3, #45	; 0x2d
 80042ee:	4276      	negs	r6, r6
 80042f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042f4:	230a      	movs	r3, #10
 80042f6:	485e      	ldr	r0, [pc, #376]	; (8004470 <_printf_i+0x244>)
 80042f8:	e019      	b.n	800432e <_printf_i+0x102>
 80042fa:	680e      	ldr	r6, [r1, #0]
 80042fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004300:	602b      	str	r3, [r5, #0]
 8004302:	bf18      	it	ne
 8004304:	b236      	sxthne	r6, r6
 8004306:	e7ef      	b.n	80042e8 <_printf_i+0xbc>
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	6820      	ldr	r0, [r4, #0]
 800430c:	1d19      	adds	r1, r3, #4
 800430e:	6029      	str	r1, [r5, #0]
 8004310:	0601      	lsls	r1, r0, #24
 8004312:	d501      	bpl.n	8004318 <_printf_i+0xec>
 8004314:	681e      	ldr	r6, [r3, #0]
 8004316:	e002      	b.n	800431e <_printf_i+0xf2>
 8004318:	0646      	lsls	r6, r0, #25
 800431a:	d5fb      	bpl.n	8004314 <_printf_i+0xe8>
 800431c:	881e      	ldrh	r6, [r3, #0]
 800431e:	2f6f      	cmp	r7, #111	; 0x6f
 8004320:	bf0c      	ite	eq
 8004322:	2308      	moveq	r3, #8
 8004324:	230a      	movne	r3, #10
 8004326:	4852      	ldr	r0, [pc, #328]	; (8004470 <_printf_i+0x244>)
 8004328:	2100      	movs	r1, #0
 800432a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800432e:	6865      	ldr	r5, [r4, #4]
 8004330:	2d00      	cmp	r5, #0
 8004332:	bfa8      	it	ge
 8004334:	6821      	ldrge	r1, [r4, #0]
 8004336:	60a5      	str	r5, [r4, #8]
 8004338:	bfa4      	itt	ge
 800433a:	f021 0104 	bicge.w	r1, r1, #4
 800433e:	6021      	strge	r1, [r4, #0]
 8004340:	b90e      	cbnz	r6, 8004346 <_printf_i+0x11a>
 8004342:	2d00      	cmp	r5, #0
 8004344:	d04d      	beq.n	80043e2 <_printf_i+0x1b6>
 8004346:	4615      	mov	r5, r2
 8004348:	fbb6 f1f3 	udiv	r1, r6, r3
 800434c:	fb03 6711 	mls	r7, r3, r1, r6
 8004350:	5dc7      	ldrb	r7, [r0, r7]
 8004352:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004356:	4637      	mov	r7, r6
 8004358:	42bb      	cmp	r3, r7
 800435a:	460e      	mov	r6, r1
 800435c:	d9f4      	bls.n	8004348 <_printf_i+0x11c>
 800435e:	2b08      	cmp	r3, #8
 8004360:	d10b      	bne.n	800437a <_printf_i+0x14e>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	07de      	lsls	r6, r3, #31
 8004366:	d508      	bpl.n	800437a <_printf_i+0x14e>
 8004368:	6923      	ldr	r3, [r4, #16]
 800436a:	6861      	ldr	r1, [r4, #4]
 800436c:	4299      	cmp	r1, r3
 800436e:	bfde      	ittt	le
 8004370:	2330      	movle	r3, #48	; 0x30
 8004372:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004376:	f105 35ff 	addle.w	r5, r5, #4294967295
 800437a:	1b52      	subs	r2, r2, r5
 800437c:	6122      	str	r2, [r4, #16]
 800437e:	464b      	mov	r3, r9
 8004380:	4621      	mov	r1, r4
 8004382:	4640      	mov	r0, r8
 8004384:	f8cd a000 	str.w	sl, [sp]
 8004388:	aa03      	add	r2, sp, #12
 800438a:	f7ff fedf 	bl	800414c <_printf_common>
 800438e:	3001      	adds	r0, #1
 8004390:	d14c      	bne.n	800442c <_printf_i+0x200>
 8004392:	f04f 30ff 	mov.w	r0, #4294967295
 8004396:	b004      	add	sp, #16
 8004398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800439c:	4834      	ldr	r0, [pc, #208]	; (8004470 <_printf_i+0x244>)
 800439e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043a2:	6829      	ldr	r1, [r5, #0]
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80043aa:	6029      	str	r1, [r5, #0]
 80043ac:	061d      	lsls	r5, r3, #24
 80043ae:	d514      	bpl.n	80043da <_printf_i+0x1ae>
 80043b0:	07df      	lsls	r7, r3, #31
 80043b2:	bf44      	itt	mi
 80043b4:	f043 0320 	orrmi.w	r3, r3, #32
 80043b8:	6023      	strmi	r3, [r4, #0]
 80043ba:	b91e      	cbnz	r6, 80043c4 <_printf_i+0x198>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	f023 0320 	bic.w	r3, r3, #32
 80043c2:	6023      	str	r3, [r4, #0]
 80043c4:	2310      	movs	r3, #16
 80043c6:	e7af      	b.n	8004328 <_printf_i+0xfc>
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	f043 0320 	orr.w	r3, r3, #32
 80043ce:	6023      	str	r3, [r4, #0]
 80043d0:	2378      	movs	r3, #120	; 0x78
 80043d2:	4828      	ldr	r0, [pc, #160]	; (8004474 <_printf_i+0x248>)
 80043d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043d8:	e7e3      	b.n	80043a2 <_printf_i+0x176>
 80043da:	0659      	lsls	r1, r3, #25
 80043dc:	bf48      	it	mi
 80043de:	b2b6      	uxthmi	r6, r6
 80043e0:	e7e6      	b.n	80043b0 <_printf_i+0x184>
 80043e2:	4615      	mov	r5, r2
 80043e4:	e7bb      	b.n	800435e <_printf_i+0x132>
 80043e6:	682b      	ldr	r3, [r5, #0]
 80043e8:	6826      	ldr	r6, [r4, #0]
 80043ea:	1d18      	adds	r0, r3, #4
 80043ec:	6961      	ldr	r1, [r4, #20]
 80043ee:	6028      	str	r0, [r5, #0]
 80043f0:	0635      	lsls	r5, r6, #24
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	d501      	bpl.n	80043fa <_printf_i+0x1ce>
 80043f6:	6019      	str	r1, [r3, #0]
 80043f8:	e002      	b.n	8004400 <_printf_i+0x1d4>
 80043fa:	0670      	lsls	r0, r6, #25
 80043fc:	d5fb      	bpl.n	80043f6 <_printf_i+0x1ca>
 80043fe:	8019      	strh	r1, [r3, #0]
 8004400:	2300      	movs	r3, #0
 8004402:	4615      	mov	r5, r2
 8004404:	6123      	str	r3, [r4, #16]
 8004406:	e7ba      	b.n	800437e <_printf_i+0x152>
 8004408:	682b      	ldr	r3, [r5, #0]
 800440a:	2100      	movs	r1, #0
 800440c:	1d1a      	adds	r2, r3, #4
 800440e:	602a      	str	r2, [r5, #0]
 8004410:	681d      	ldr	r5, [r3, #0]
 8004412:	6862      	ldr	r2, [r4, #4]
 8004414:	4628      	mov	r0, r5
 8004416:	f000 f841 	bl	800449c <memchr>
 800441a:	b108      	cbz	r0, 8004420 <_printf_i+0x1f4>
 800441c:	1b40      	subs	r0, r0, r5
 800441e:	6060      	str	r0, [r4, #4]
 8004420:	6863      	ldr	r3, [r4, #4]
 8004422:	6123      	str	r3, [r4, #16]
 8004424:	2300      	movs	r3, #0
 8004426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800442a:	e7a8      	b.n	800437e <_printf_i+0x152>
 800442c:	462a      	mov	r2, r5
 800442e:	4649      	mov	r1, r9
 8004430:	4640      	mov	r0, r8
 8004432:	6923      	ldr	r3, [r4, #16]
 8004434:	47d0      	blx	sl
 8004436:	3001      	adds	r0, #1
 8004438:	d0ab      	beq.n	8004392 <_printf_i+0x166>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	079b      	lsls	r3, r3, #30
 800443e:	d413      	bmi.n	8004468 <_printf_i+0x23c>
 8004440:	68e0      	ldr	r0, [r4, #12]
 8004442:	9b03      	ldr	r3, [sp, #12]
 8004444:	4298      	cmp	r0, r3
 8004446:	bfb8      	it	lt
 8004448:	4618      	movlt	r0, r3
 800444a:	e7a4      	b.n	8004396 <_printf_i+0x16a>
 800444c:	2301      	movs	r3, #1
 800444e:	4632      	mov	r2, r6
 8004450:	4649      	mov	r1, r9
 8004452:	4640      	mov	r0, r8
 8004454:	47d0      	blx	sl
 8004456:	3001      	adds	r0, #1
 8004458:	d09b      	beq.n	8004392 <_printf_i+0x166>
 800445a:	3501      	adds	r5, #1
 800445c:	68e3      	ldr	r3, [r4, #12]
 800445e:	9903      	ldr	r1, [sp, #12]
 8004460:	1a5b      	subs	r3, r3, r1
 8004462:	42ab      	cmp	r3, r5
 8004464:	dcf2      	bgt.n	800444c <_printf_i+0x220>
 8004466:	e7eb      	b.n	8004440 <_printf_i+0x214>
 8004468:	2500      	movs	r5, #0
 800446a:	f104 0619 	add.w	r6, r4, #25
 800446e:	e7f5      	b.n	800445c <_printf_i+0x230>
 8004470:	08004677 	.word	0x08004677
 8004474:	08004688 	.word	0x08004688

08004478 <_sbrk_r>:
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	2300      	movs	r3, #0
 800447c:	4d05      	ldr	r5, [pc, #20]	; (8004494 <_sbrk_r+0x1c>)
 800447e:	4604      	mov	r4, r0
 8004480:	4608      	mov	r0, r1
 8004482:	602b      	str	r3, [r5, #0]
 8004484:	f7fc fc2c 	bl	8000ce0 <_sbrk>
 8004488:	1c43      	adds	r3, r0, #1
 800448a:	d102      	bne.n	8004492 <_sbrk_r+0x1a>
 800448c:	682b      	ldr	r3, [r5, #0]
 800448e:	b103      	cbz	r3, 8004492 <_sbrk_r+0x1a>
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	bd38      	pop	{r3, r4, r5, pc}
 8004494:	20001eb0 	.word	0x20001eb0

08004498 <__retarget_lock_acquire_recursive>:
 8004498:	4770      	bx	lr

0800449a <__retarget_lock_release_recursive>:
 800449a:	4770      	bx	lr

0800449c <memchr>:
 800449c:	4603      	mov	r3, r0
 800449e:	b510      	push	{r4, lr}
 80044a0:	b2c9      	uxtb	r1, r1
 80044a2:	4402      	add	r2, r0
 80044a4:	4293      	cmp	r3, r2
 80044a6:	4618      	mov	r0, r3
 80044a8:	d101      	bne.n	80044ae <memchr+0x12>
 80044aa:	2000      	movs	r0, #0
 80044ac:	e003      	b.n	80044b6 <memchr+0x1a>
 80044ae:	7804      	ldrb	r4, [r0, #0]
 80044b0:	3301      	adds	r3, #1
 80044b2:	428c      	cmp	r4, r1
 80044b4:	d1f6      	bne.n	80044a4 <memchr+0x8>
 80044b6:	bd10      	pop	{r4, pc}

080044b8 <memmove>:
 80044b8:	4288      	cmp	r0, r1
 80044ba:	b510      	push	{r4, lr}
 80044bc:	eb01 0402 	add.w	r4, r1, r2
 80044c0:	d902      	bls.n	80044c8 <memmove+0x10>
 80044c2:	4284      	cmp	r4, r0
 80044c4:	4623      	mov	r3, r4
 80044c6:	d807      	bhi.n	80044d8 <memmove+0x20>
 80044c8:	1e43      	subs	r3, r0, #1
 80044ca:	42a1      	cmp	r1, r4
 80044cc:	d008      	beq.n	80044e0 <memmove+0x28>
 80044ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044d6:	e7f8      	b.n	80044ca <memmove+0x12>
 80044d8:	4601      	mov	r1, r0
 80044da:	4402      	add	r2, r0
 80044dc:	428a      	cmp	r2, r1
 80044de:	d100      	bne.n	80044e2 <memmove+0x2a>
 80044e0:	bd10      	pop	{r4, pc}
 80044e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044ea:	e7f7      	b.n	80044dc <memmove+0x24>

080044ec <__malloc_lock>:
 80044ec:	4801      	ldr	r0, [pc, #4]	; (80044f4 <__malloc_lock+0x8>)
 80044ee:	f7ff bfd3 	b.w	8004498 <__retarget_lock_acquire_recursive>
 80044f2:	bf00      	nop
 80044f4:	20001eac 	.word	0x20001eac

080044f8 <__malloc_unlock>:
 80044f8:	4801      	ldr	r0, [pc, #4]	; (8004500 <__malloc_unlock+0x8>)
 80044fa:	f7ff bfce 	b.w	800449a <__retarget_lock_release_recursive>
 80044fe:	bf00      	nop
 8004500:	20001eac 	.word	0x20001eac

08004504 <_realloc_r>:
 8004504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004508:	4680      	mov	r8, r0
 800450a:	4614      	mov	r4, r2
 800450c:	460e      	mov	r6, r1
 800450e:	b921      	cbnz	r1, 800451a <_realloc_r+0x16>
 8004510:	4611      	mov	r1, r2
 8004512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004516:	f7ff bc49 	b.w	8003dac <_malloc_r>
 800451a:	b92a      	cbnz	r2, 8004528 <_realloc_r+0x24>
 800451c:	f7ff fbde 	bl	8003cdc <_free_r>
 8004520:	4625      	mov	r5, r4
 8004522:	4628      	mov	r0, r5
 8004524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004528:	f000 f81b 	bl	8004562 <_malloc_usable_size_r>
 800452c:	4284      	cmp	r4, r0
 800452e:	4607      	mov	r7, r0
 8004530:	d802      	bhi.n	8004538 <_realloc_r+0x34>
 8004532:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004536:	d812      	bhi.n	800455e <_realloc_r+0x5a>
 8004538:	4621      	mov	r1, r4
 800453a:	4640      	mov	r0, r8
 800453c:	f7ff fc36 	bl	8003dac <_malloc_r>
 8004540:	4605      	mov	r5, r0
 8004542:	2800      	cmp	r0, #0
 8004544:	d0ed      	beq.n	8004522 <_realloc_r+0x1e>
 8004546:	42bc      	cmp	r4, r7
 8004548:	4622      	mov	r2, r4
 800454a:	4631      	mov	r1, r6
 800454c:	bf28      	it	cs
 800454e:	463a      	movcs	r2, r7
 8004550:	f7ff fb7e 	bl	8003c50 <memcpy>
 8004554:	4631      	mov	r1, r6
 8004556:	4640      	mov	r0, r8
 8004558:	f7ff fbc0 	bl	8003cdc <_free_r>
 800455c:	e7e1      	b.n	8004522 <_realloc_r+0x1e>
 800455e:	4635      	mov	r5, r6
 8004560:	e7df      	b.n	8004522 <_realloc_r+0x1e>

08004562 <_malloc_usable_size_r>:
 8004562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004566:	1f18      	subs	r0, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	bfbc      	itt	lt
 800456c:	580b      	ldrlt	r3, [r1, r0]
 800456e:	18c0      	addlt	r0, r0, r3
 8004570:	4770      	bx	lr
	...

08004574 <_init>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	bf00      	nop
 8004578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457a:	bc08      	pop	{r3}
 800457c:	469e      	mov	lr, r3
 800457e:	4770      	bx	lr

08004580 <_fini>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	bf00      	nop
 8004584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004586:	bc08      	pop	{r3}
 8004588:	469e      	mov	lr, r3
 800458a:	4770      	bx	lr
